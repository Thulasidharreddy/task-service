/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StUnitsOfMeasure implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String unitName;
    private final String unitType;
    private final Double conversionFactor;
    private final String description;

    public StUnitsOfMeasure(StUnitsOfMeasure value) {
        this.unitName = value.unitName;
        this.unitType = value.unitType;
        this.conversionFactor = value.conversionFactor;
        this.description = value.description;
    }

    public StUnitsOfMeasure(
        String unitName,
        String unitType,
        Double conversionFactor,
        String description
    ) {
        this.unitName = unitName;
        this.unitType = unitType;
        this.conversionFactor = conversionFactor;
        this.description = description;
    }

    /**
     * Getter for <code>information_schema.ST_UNITS_OF_MEASURE.UNIT_NAME</code>.
     */
    public String getUnitName() {
        return this.unitName;
    }

    /**
     * Getter for <code>information_schema.ST_UNITS_OF_MEASURE.UNIT_TYPE</code>.
     */
    public String getUnitType() {
        return this.unitType;
    }

    /**
     * Getter for
     * <code>information_schema.ST_UNITS_OF_MEASURE.CONVERSION_FACTOR</code>.
     */
    public Double getConversionFactor() {
        return this.conversionFactor;
    }

    /**
     * Getter for
     * <code>information_schema.ST_UNITS_OF_MEASURE.DESCRIPTION</code>.
     */
    public String getDescription() {
        return this.description;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final StUnitsOfMeasure other = (StUnitsOfMeasure) obj;
        if (this.unitName == null) {
            if (other.unitName != null)
                return false;
        }
        else if (!this.unitName.equals(other.unitName))
            return false;
        if (this.unitType == null) {
            if (other.unitType != null)
                return false;
        }
        else if (!this.unitType.equals(other.unitType))
            return false;
        if (this.conversionFactor == null) {
            if (other.conversionFactor != null)
                return false;
        }
        else if (!this.conversionFactor.equals(other.conversionFactor))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.unitName == null) ? 0 : this.unitName.hashCode());
        result = prime * result + ((this.unitType == null) ? 0 : this.unitType.hashCode());
        result = prime * result + ((this.conversionFactor == null) ? 0 : this.conversionFactor.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StUnitsOfMeasure (");

        sb.append(unitName);
        sb.append(", ").append(unitType);
        sb.append(", ").append(conversionFactor);
        sb.append(", ").append(description);

        sb.append(")");
        return sb.toString();
    }
}
