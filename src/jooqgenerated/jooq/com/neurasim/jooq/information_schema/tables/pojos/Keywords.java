/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keywords implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String word;
    private final Integer reserved;

    public Keywords(Keywords value) {
        this.word = value.word;
        this.reserved = value.reserved;
    }

    public Keywords(
        String word,
        Integer reserved
    ) {
        this.word = word;
        this.reserved = reserved;
    }

    /**
     * Getter for <code>information_schema.KEYWORDS.WORD</code>.
     */
    public String getWord() {
        return this.word;
    }

    /**
     * Getter for <code>information_schema.KEYWORDS.RESERVED</code>.
     */
    public Integer getReserved() {
        return this.reserved;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Keywords other = (Keywords) obj;
        if (this.word == null) {
            if (other.word != null)
                return false;
        }
        else if (!this.word.equals(other.word))
            return false;
        if (this.reserved == null) {
            if (other.reserved != null)
                return false;
        }
        else if (!this.reserved.equals(other.reserved))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.word == null) ? 0 : this.word.hashCode());
        result = prime * result + ((this.reserved == null) ? 0 : this.reserved.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Keywords (");

        sb.append(word);
        sb.append(", ").append(reserved);

        sb.append(")");
        return sb.toString();
    }
}
