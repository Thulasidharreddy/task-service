/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.information_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTablespaces implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UInteger space;
    private final String name;
    private final UInteger flag;
    private final String rowFormat;
    private final UInteger pageSize;
    private final UInteger zipPageSize;
    private final String spaceType;
    private final UInteger fsBlockSize;
    private final ULong fileSize;
    private final ULong allocatedSize;
    private final ULong autoextendSize;
    private final String serverVersion;
    private final UInteger spaceVersion;
    private final String encryption;
    private final String state;

    public InnodbTablespaces(InnodbTablespaces value) {
        this.space = value.space;
        this.name = value.name;
        this.flag = value.flag;
        this.rowFormat = value.rowFormat;
        this.pageSize = value.pageSize;
        this.zipPageSize = value.zipPageSize;
        this.spaceType = value.spaceType;
        this.fsBlockSize = value.fsBlockSize;
        this.fileSize = value.fileSize;
        this.allocatedSize = value.allocatedSize;
        this.autoextendSize = value.autoextendSize;
        this.serverVersion = value.serverVersion;
        this.spaceVersion = value.spaceVersion;
        this.encryption = value.encryption;
        this.state = value.state;
    }

    public InnodbTablespaces(
        UInteger space,
        String name,
        UInteger flag,
        String rowFormat,
        UInteger pageSize,
        UInteger zipPageSize,
        String spaceType,
        UInteger fsBlockSize,
        ULong fileSize,
        ULong allocatedSize,
        ULong autoextendSize,
        String serverVersion,
        UInteger spaceVersion,
        String encryption,
        String state
    ) {
        this.space = space;
        this.name = name;
        this.flag = flag;
        this.rowFormat = rowFormat;
        this.pageSize = pageSize;
        this.zipPageSize = zipPageSize;
        this.spaceType = spaceType;
        this.fsBlockSize = fsBlockSize;
        this.fileSize = fileSize;
        this.allocatedSize = allocatedSize;
        this.autoextendSize = autoextendSize;
        this.serverVersion = serverVersion;
        this.spaceVersion = spaceVersion;
        this.encryption = encryption;
        this.state = state;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.SPACE</code>.
     */
    public UInteger getSpace() {
        return this.space;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.NAME</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.FLAG</code>.
     */
    public UInteger getFlag() {
        return this.flag;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.ROW_FORMAT</code>.
     */
    public String getRowFormat() {
        return this.rowFormat;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.PAGE_SIZE</code>.
     */
    public UInteger getPageSize() {
        return this.pageSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.ZIP_PAGE_SIZE</code>.
     */
    public UInteger getZipPageSize() {
        return this.zipPageSize;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.SPACE_TYPE</code>.
     */
    public String getSpaceType() {
        return this.spaceType;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.FS_BLOCK_SIZE</code>.
     */
    public UInteger getFsBlockSize() {
        return this.fsBlockSize;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.FILE_SIZE</code>.
     */
    public ULong getFileSize() {
        return this.fileSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.ALLOCATED_SIZE</code>.
     */
    public ULong getAllocatedSize() {
        return this.allocatedSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.AUTOEXTEND_SIZE</code>.
     */
    public ULong getAutoextendSize() {
        return this.autoextendSize;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.SERVER_VERSION</code>.
     */
    public String getServerVersion() {
        return this.serverVersion;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TABLESPACES.SPACE_VERSION</code>.
     */
    public UInteger getSpaceVersion() {
        return this.spaceVersion;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.ENCRYPTION</code>.
     */
    public String getEncryption() {
        return this.encryption;
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES.STATE</code>.
     */
    public String getState() {
        return this.state;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbTablespaces other = (InnodbTablespaces) obj;
        if (this.space == null) {
            if (other.space != null)
                return false;
        }
        else if (!this.space.equals(other.space))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.flag == null) {
            if (other.flag != null)
                return false;
        }
        else if (!this.flag.equals(other.flag))
            return false;
        if (this.rowFormat == null) {
            if (other.rowFormat != null)
                return false;
        }
        else if (!this.rowFormat.equals(other.rowFormat))
            return false;
        if (this.pageSize == null) {
            if (other.pageSize != null)
                return false;
        }
        else if (!this.pageSize.equals(other.pageSize))
            return false;
        if (this.zipPageSize == null) {
            if (other.zipPageSize != null)
                return false;
        }
        else if (!this.zipPageSize.equals(other.zipPageSize))
            return false;
        if (this.spaceType == null) {
            if (other.spaceType != null)
                return false;
        }
        else if (!this.spaceType.equals(other.spaceType))
            return false;
        if (this.fsBlockSize == null) {
            if (other.fsBlockSize != null)
                return false;
        }
        else if (!this.fsBlockSize.equals(other.fsBlockSize))
            return false;
        if (this.fileSize == null) {
            if (other.fileSize != null)
                return false;
        }
        else if (!this.fileSize.equals(other.fileSize))
            return false;
        if (this.allocatedSize == null) {
            if (other.allocatedSize != null)
                return false;
        }
        else if (!this.allocatedSize.equals(other.allocatedSize))
            return false;
        if (this.autoextendSize == null) {
            if (other.autoextendSize != null)
                return false;
        }
        else if (!this.autoextendSize.equals(other.autoextendSize))
            return false;
        if (this.serverVersion == null) {
            if (other.serverVersion != null)
                return false;
        }
        else if (!this.serverVersion.equals(other.serverVersion))
            return false;
        if (this.spaceVersion == null) {
            if (other.spaceVersion != null)
                return false;
        }
        else if (!this.spaceVersion.equals(other.spaceVersion))
            return false;
        if (this.encryption == null) {
            if (other.encryption != null)
                return false;
        }
        else if (!this.encryption.equals(other.encryption))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.space == null) ? 0 : this.space.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.flag == null) ? 0 : this.flag.hashCode());
        result = prime * result + ((this.rowFormat == null) ? 0 : this.rowFormat.hashCode());
        result = prime * result + ((this.pageSize == null) ? 0 : this.pageSize.hashCode());
        result = prime * result + ((this.zipPageSize == null) ? 0 : this.zipPageSize.hashCode());
        result = prime * result + ((this.spaceType == null) ? 0 : this.spaceType.hashCode());
        result = prime * result + ((this.fsBlockSize == null) ? 0 : this.fsBlockSize.hashCode());
        result = prime * result + ((this.fileSize == null) ? 0 : this.fileSize.hashCode());
        result = prime * result + ((this.allocatedSize == null) ? 0 : this.allocatedSize.hashCode());
        result = prime * result + ((this.autoextendSize == null) ? 0 : this.autoextendSize.hashCode());
        result = prime * result + ((this.serverVersion == null) ? 0 : this.serverVersion.hashCode());
        result = prime * result + ((this.spaceVersion == null) ? 0 : this.spaceVersion.hashCode());
        result = prime * result + ((this.encryption == null) ? 0 : this.encryption.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbTablespaces (");

        sb.append(space);
        sb.append(", ").append(name);
        sb.append(", ").append(flag);
        sb.append(", ").append(rowFormat);
        sb.append(", ").append(pageSize);
        sb.append(", ").append(zipPageSize);
        sb.append(", ").append(spaceType);
        sb.append(", ").append(fsBlockSize);
        sb.append(", ").append(fileSize);
        sb.append(", ").append(allocatedSize);
        sb.append(", ").append(autoextendSize);
        sb.append(", ").append(serverVersion);
        sb.append(", ").append(spaceVersion);
        sb.append(", ").append(encryption);
        sb.append(", ").append(state);

        sb.append(")");
        return sb.toString();
    }
}
