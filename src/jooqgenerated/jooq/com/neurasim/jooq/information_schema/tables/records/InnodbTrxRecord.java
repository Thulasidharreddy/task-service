/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.information_schema.tables.records;


import com.neurasim.jooq.information_schema.tables.InnodbTrx;

import java.time.LocalDateTime;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTrxRecord extends TableRecordImpl<InnodbTrxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_id</code>.
     */
    public InnodbTrxRecord setTrxId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_id</code>.
     */
    public ULong getTrxId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_state</code>.
     */
    public InnodbTrxRecord setTrxState(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_state</code>.
     */
    public String getTrxState() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_started</code>.
     */
    public InnodbTrxRecord setTrxStarted(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_started</code>.
     */
    public LocalDateTime getTrxStarted() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
     */
    public InnodbTrxRecord setTrxRequestedLockId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_requested_lock_id</code>.
     */
    public String getTrxRequestedLockId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_wait_started</code>.
     */
    public InnodbTrxRecord setTrxWaitStarted(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_wait_started</code>.
     */
    public LocalDateTime getTrxWaitStarted() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_weight</code>.
     */
    public InnodbTrxRecord setTrxWeight(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_weight</code>.
     */
    public ULong getTrxWeight() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
     */
    public InnodbTrxRecord setTrxMysqlThreadId(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_mysql_thread_id</code>.
     */
    public ULong getTrxMysqlThreadId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_query</code>.
     */
    public InnodbTrxRecord setTrxQuery(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_query</code>.
     */
    public String getTrxQuery() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_operation_state</code>.
     */
    public InnodbTrxRecord setTrxOperationState(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_operation_state</code>.
     */
    public String getTrxOperationState() {
        return (String) get(8);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
     */
    public InnodbTrxRecord setTrxTablesInUse(ULong value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_tables_in_use</code>.
     */
    public ULong getTrxTablesInUse() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
     */
    public InnodbTrxRecord setTrxTablesLocked(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_tables_locked</code>.
     */
    public ULong getTrxTablesLocked() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
     */
    public InnodbTrxRecord setTrxLockStructs(ULong value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_lock_structs</code>.
     */
    public ULong getTrxLockStructs() {
        return (ULong) get(11);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
     */
    public InnodbTrxRecord setTrxLockMemoryBytes(ULong value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_lock_memory_bytes</code>.
     */
    public ULong getTrxLockMemoryBytes() {
        return (ULong) get(12);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
     */
    public InnodbTrxRecord setTrxRowsLocked(ULong value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_rows_locked</code>.
     */
    public ULong getTrxRowsLocked() {
        return (ULong) get(13);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
     */
    public InnodbTrxRecord setTrxRowsModified(ULong value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_rows_modified</code>.
     */
    public ULong getTrxRowsModified() {
        return (ULong) get(14);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
     */
    public InnodbTrxRecord setTrxConcurrencyTickets(ULong value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_concurrency_tickets</code>.
     */
    public ULong getTrxConcurrencyTickets() {
        return (ULong) get(15);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
     */
    public InnodbTrxRecord setTrxIsolationLevel(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_isolation_level</code>.
     */
    public String getTrxIsolationLevel() {
        return (String) get(16);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
     */
    public InnodbTrxRecord setTrxUniqueChecks(Integer value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_unique_checks</code>.
     */
    public Integer getTrxUniqueChecks() {
        return (Integer) get(17);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
     */
    public InnodbTrxRecord setTrxForeignKeyChecks(Integer value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_foreign_key_checks</code>.
     */
    public Integer getTrxForeignKeyChecks() {
        return (Integer) get(18);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
     */
    public InnodbTrxRecord setTrxLastForeignKeyError(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_last_foreign_key_error</code>.
     */
    public String getTrxLastForeignKeyError() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
     */
    public InnodbTrxRecord setTrxAdaptiveHashLatched(Integer value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_latched</code>.
     */
    public Integer getTrxAdaptiveHashLatched() {
        return (Integer) get(20);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
     */
    public InnodbTrxRecord setTrxAdaptiveHashTimeout(ULong value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_adaptive_hash_timeout</code>.
     */
    public ULong getTrxAdaptiveHashTimeout() {
        return (ULong) get(21);
    }

    /**
     * Setter for <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
     */
    public InnodbTrxRecord setTrxIsReadOnly(Integer value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>information_schema.INNODB_TRX.trx_is_read_only</code>.
     */
    public Integer getTrxIsReadOnly() {
        return (Integer) get(22);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
     */
    public InnodbTrxRecord setTrxAutocommitNonLocking(Integer value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_autocommit_non_locking</code>.
     */
    public Integer getTrxAutocommitNonLocking() {
        return (Integer) get(23);
    }

    /**
     * Setter for
     * <code>information_schema.INNODB_TRX.trx_schedule_weight</code>.
     */
    public InnodbTrxRecord setTrxScheduleWeight(ULong value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for
     * <code>information_schema.INNODB_TRX.trx_schedule_weight</code>.
     */
    public ULong getTrxScheduleWeight() {
        return (ULong) get(24);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InnodbTrxRecord
     */
    public InnodbTrxRecord() {
        super(InnodbTrx.INNODB_TRX);
    }

    /**
     * Create a detached, initialised InnodbTrxRecord
     */
    public InnodbTrxRecord(ULong trxId, String trxState, LocalDateTime trxStarted, String trxRequestedLockId, LocalDateTime trxWaitStarted, ULong trxWeight, ULong trxMysqlThreadId, String trxQuery, String trxOperationState, ULong trxTablesInUse, ULong trxTablesLocked, ULong trxLockStructs, ULong trxLockMemoryBytes, ULong trxRowsLocked, ULong trxRowsModified, ULong trxConcurrencyTickets, String trxIsolationLevel, Integer trxUniqueChecks, Integer trxForeignKeyChecks, String trxLastForeignKeyError, Integer trxAdaptiveHashLatched, ULong trxAdaptiveHashTimeout, Integer trxIsReadOnly, Integer trxAutocommitNonLocking, ULong trxScheduleWeight) {
        super(InnodbTrx.INNODB_TRX);

        setTrxId(trxId);
        setTrxState(trxState);
        setTrxStarted(trxStarted);
        setTrxRequestedLockId(trxRequestedLockId);
        setTrxWaitStarted(trxWaitStarted);
        setTrxWeight(trxWeight);
        setTrxMysqlThreadId(trxMysqlThreadId);
        setTrxQuery(trxQuery);
        setTrxOperationState(trxOperationState);
        setTrxTablesInUse(trxTablesInUse);
        setTrxTablesLocked(trxTablesLocked);
        setTrxLockStructs(trxLockStructs);
        setTrxLockMemoryBytes(trxLockMemoryBytes);
        setTrxRowsLocked(trxRowsLocked);
        setTrxRowsModified(trxRowsModified);
        setTrxConcurrencyTickets(trxConcurrencyTickets);
        setTrxIsolationLevel(trxIsolationLevel);
        setTrxUniqueChecks(trxUniqueChecks);
        setTrxForeignKeyChecks(trxForeignKeyChecks);
        setTrxLastForeignKeyError(trxLastForeignKeyError);
        setTrxAdaptiveHashLatched(trxAdaptiveHashLatched);
        setTrxAdaptiveHashTimeout(trxAdaptiveHashTimeout);
        setTrxIsReadOnly(trxIsReadOnly);
        setTrxAutocommitNonLocking(trxAutocommitNonLocking);
        setTrxScheduleWeight(trxScheduleWeight);
    }

    /**
     * Create a detached, initialised InnodbTrxRecord
     */
    public InnodbTrxRecord(com.neurasim.jooq.information_schema.tables.pojos.InnodbTrx value) {
        super(InnodbTrx.INNODB_TRX);

        if (value != null) {
            setTrxId(value.getTrxId());
            setTrxState(value.getTrxState());
            setTrxStarted(value.getTrxStarted());
            setTrxRequestedLockId(value.getTrxRequestedLockId());
            setTrxWaitStarted(value.getTrxWaitStarted());
            setTrxWeight(value.getTrxWeight());
            setTrxMysqlThreadId(value.getTrxMysqlThreadId());
            setTrxQuery(value.getTrxQuery());
            setTrxOperationState(value.getTrxOperationState());
            setTrxTablesInUse(value.getTrxTablesInUse());
            setTrxTablesLocked(value.getTrxTablesLocked());
            setTrxLockStructs(value.getTrxLockStructs());
            setTrxLockMemoryBytes(value.getTrxLockMemoryBytes());
            setTrxRowsLocked(value.getTrxRowsLocked());
            setTrxRowsModified(value.getTrxRowsModified());
            setTrxConcurrencyTickets(value.getTrxConcurrencyTickets());
            setTrxIsolationLevel(value.getTrxIsolationLevel());
            setTrxUniqueChecks(value.getTrxUniqueChecks());
            setTrxForeignKeyChecks(value.getTrxForeignKeyChecks());
            setTrxLastForeignKeyError(value.getTrxLastForeignKeyError());
            setTrxAdaptiveHashLatched(value.getTrxAdaptiveHashLatched());
            setTrxAdaptiveHashTimeout(value.getTrxAdaptiveHashTimeout());
            setTrxIsReadOnly(value.getTrxIsReadOnly());
            setTrxAutocommitNonLocking(value.getTrxAutocommitNonLocking());
            setTrxScheduleWeight(value.getTrxScheduleWeight());
        }
    }
}
