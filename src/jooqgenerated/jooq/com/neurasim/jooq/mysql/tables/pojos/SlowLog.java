/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.mysql.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Slow log
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlowLog implements Serializable {

    private static final long serialVersionUID = 1L;

    private final LocalDateTime startTime;
    private final String userHost;
    private final LocalTime queryTime;
    private final LocalTime lockTime;
    private final Integer rowsSent;
    private final Integer rowsExamined;
    private final String db;
    private final Integer lastInsertId;
    private final Integer insertId;
    private final UInteger serverId;
    private final byte[] sqlText;
    private final ULong threadId;

    public SlowLog(SlowLog value) {
        this.startTime = value.startTime;
        this.userHost = value.userHost;
        this.queryTime = value.queryTime;
        this.lockTime = value.lockTime;
        this.rowsSent = value.rowsSent;
        this.rowsExamined = value.rowsExamined;
        this.db = value.db;
        this.lastInsertId = value.lastInsertId;
        this.insertId = value.insertId;
        this.serverId = value.serverId;
        this.sqlText = value.sqlText;
        this.threadId = value.threadId;
    }

    public SlowLog(
        LocalDateTime startTime,
        String userHost,
        LocalTime queryTime,
        LocalTime lockTime,
        Integer rowsSent,
        Integer rowsExamined,
        String db,
        Integer lastInsertId,
        Integer insertId,
        UInteger serverId,
        byte[] sqlText,
        ULong threadId
    ) {
        this.startTime = startTime;
        this.userHost = userHost;
        this.queryTime = queryTime;
        this.lockTime = lockTime;
        this.rowsSent = rowsSent;
        this.rowsExamined = rowsExamined;
        this.db = db;
        this.lastInsertId = lastInsertId;
        this.insertId = insertId;
        this.serverId = serverId;
        this.sqlText = sqlText;
        this.threadId = threadId;
    }

    /**
     * Getter for <code>mysql.slow_log.start_time</code>.
     */
    public LocalDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Getter for <code>mysql.slow_log.user_host</code>.
     */
    public String getUserHost() {
        return this.userHost;
    }

    /**
     * Getter for <code>mysql.slow_log.query_time</code>.
     */
    public LocalTime getQueryTime() {
        return this.queryTime;
    }

    /**
     * Getter for <code>mysql.slow_log.lock_time</code>.
     */
    public LocalTime getLockTime() {
        return this.lockTime;
    }

    /**
     * Getter for <code>mysql.slow_log.rows_sent</code>.
     */
    public Integer getRowsSent() {
        return this.rowsSent;
    }

    /**
     * Getter for <code>mysql.slow_log.rows_examined</code>.
     */
    public Integer getRowsExamined() {
        return this.rowsExamined;
    }

    /**
     * Getter for <code>mysql.slow_log.db</code>.
     */
    public String getDb() {
        return this.db;
    }

    /**
     * Getter for <code>mysql.slow_log.last_insert_id</code>.
     */
    public Integer getLastInsertId() {
        return this.lastInsertId;
    }

    /**
     * Getter for <code>mysql.slow_log.insert_id</code>.
     */
    public Integer getInsertId() {
        return this.insertId;
    }

    /**
     * Getter for <code>mysql.slow_log.server_id</code>.
     */
    public UInteger getServerId() {
        return this.serverId;
    }

    /**
     * Getter for <code>mysql.slow_log.sql_text</code>.
     */
    public byte[] getSqlText() {
        return this.sqlText;
    }

    /**
     * Getter for <code>mysql.slow_log.thread_id</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SlowLog other = (SlowLog) obj;
        if (this.startTime == null) {
            if (other.startTime != null)
                return false;
        }
        else if (!this.startTime.equals(other.startTime))
            return false;
        if (this.userHost == null) {
            if (other.userHost != null)
                return false;
        }
        else if (!this.userHost.equals(other.userHost))
            return false;
        if (this.queryTime == null) {
            if (other.queryTime != null)
                return false;
        }
        else if (!this.queryTime.equals(other.queryTime))
            return false;
        if (this.lockTime == null) {
            if (other.lockTime != null)
                return false;
        }
        else if (!this.lockTime.equals(other.lockTime))
            return false;
        if (this.rowsSent == null) {
            if (other.rowsSent != null)
                return false;
        }
        else if (!this.rowsSent.equals(other.rowsSent))
            return false;
        if (this.rowsExamined == null) {
            if (other.rowsExamined != null)
                return false;
        }
        else if (!this.rowsExamined.equals(other.rowsExamined))
            return false;
        if (this.db == null) {
            if (other.db != null)
                return false;
        }
        else if (!this.db.equals(other.db))
            return false;
        if (this.lastInsertId == null) {
            if (other.lastInsertId != null)
                return false;
        }
        else if (!this.lastInsertId.equals(other.lastInsertId))
            return false;
        if (this.insertId == null) {
            if (other.insertId != null)
                return false;
        }
        else if (!this.insertId.equals(other.insertId))
            return false;
        if (this.serverId == null) {
            if (other.serverId != null)
                return false;
        }
        else if (!this.serverId.equals(other.serverId))
            return false;
        if (this.sqlText == null) {
            if (other.sqlText != null)
                return false;
        }
        else if (!Arrays.equals(this.sqlText, other.sqlText))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.startTime == null) ? 0 : this.startTime.hashCode());
        result = prime * result + ((this.userHost == null) ? 0 : this.userHost.hashCode());
        result = prime * result + ((this.queryTime == null) ? 0 : this.queryTime.hashCode());
        result = prime * result + ((this.lockTime == null) ? 0 : this.lockTime.hashCode());
        result = prime * result + ((this.rowsSent == null) ? 0 : this.rowsSent.hashCode());
        result = prime * result + ((this.rowsExamined == null) ? 0 : this.rowsExamined.hashCode());
        result = prime * result + ((this.db == null) ? 0 : this.db.hashCode());
        result = prime * result + ((this.lastInsertId == null) ? 0 : this.lastInsertId.hashCode());
        result = prime * result + ((this.insertId == null) ? 0 : this.insertId.hashCode());
        result = prime * result + ((this.serverId == null) ? 0 : this.serverId.hashCode());
        result = prime * result + ((this.sqlText == null) ? 0 : Arrays.hashCode(this.sqlText));
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SlowLog (");

        sb.append(startTime);
        sb.append(", ").append(userHost);
        sb.append(", ").append(queryTime);
        sb.append(", ").append(lockTime);
        sb.append(", ").append(rowsSent);
        sb.append(", ").append(rowsExamined);
        sb.append(", ").append(db);
        sb.append(", ").append(lastInsertId);
        sb.append(", ").append(insertId);
        sb.append(", ").append(serverId);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(threadId);

        sb.append(")");
        return sb.toString();
    }
}
