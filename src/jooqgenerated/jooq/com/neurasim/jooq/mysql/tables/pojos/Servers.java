/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.mysql.tables.pojos;


import java.io.Serializable;


/**
 * MySQL Foreign Servers table
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Servers implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String serverName;
    private final String host;
    private final String db;
    private final String username;
    private final String password;
    private final Integer port;
    private final String socket;
    private final String wrapper;
    private final String owner;

    public Servers(Servers value) {
        this.serverName = value.serverName;
        this.host = value.host;
        this.db = value.db;
        this.username = value.username;
        this.password = value.password;
        this.port = value.port;
        this.socket = value.socket;
        this.wrapper = value.wrapper;
        this.owner = value.owner;
    }

    public Servers(
        String serverName,
        String host,
        String db,
        String username,
        String password,
        Integer port,
        String socket,
        String wrapper,
        String owner
    ) {
        this.serverName = serverName;
        this.host = host;
        this.db = db;
        this.username = username;
        this.password = password;
        this.port = port;
        this.socket = socket;
        this.wrapper = wrapper;
        this.owner = owner;
    }

    /**
     * Getter for <code>mysql.servers.Server_name</code>.
     */
    public String getServerName() {
        return this.serverName;
    }

    /**
     * Getter for <code>mysql.servers.Host</code>.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Getter for <code>mysql.servers.Db</code>.
     */
    public String getDb() {
        return this.db;
    }

    /**
     * Getter for <code>mysql.servers.Username</code>.
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Getter for <code>mysql.servers.Password</code>.
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Getter for <code>mysql.servers.Port</code>.
     */
    public Integer getPort() {
        return this.port;
    }

    /**
     * Getter for <code>mysql.servers.Socket</code>.
     */
    public String getSocket() {
        return this.socket;
    }

    /**
     * Getter for <code>mysql.servers.Wrapper</code>.
     */
    public String getWrapper() {
        return this.wrapper;
    }

    /**
     * Getter for <code>mysql.servers.Owner</code>.
     */
    public String getOwner() {
        return this.owner;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Servers other = (Servers) obj;
        if (this.serverName == null) {
            if (other.serverName != null)
                return false;
        }
        else if (!this.serverName.equals(other.serverName))
            return false;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.db == null) {
            if (other.db != null)
                return false;
        }
        else if (!this.db.equals(other.db))
            return false;
        if (this.username == null) {
            if (other.username != null)
                return false;
        }
        else if (!this.username.equals(other.username))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.port == null) {
            if (other.port != null)
                return false;
        }
        else if (!this.port.equals(other.port))
            return false;
        if (this.socket == null) {
            if (other.socket != null)
                return false;
        }
        else if (!this.socket.equals(other.socket))
            return false;
        if (this.wrapper == null) {
            if (other.wrapper != null)
                return false;
        }
        else if (!this.wrapper.equals(other.wrapper))
            return false;
        if (this.owner == null) {
            if (other.owner != null)
                return false;
        }
        else if (!this.owner.equals(other.owner))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.serverName == null) ? 0 : this.serverName.hashCode());
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.db == null) ? 0 : this.db.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.port == null) ? 0 : this.port.hashCode());
        result = prime * result + ((this.socket == null) ? 0 : this.socket.hashCode());
        result = prime * result + ((this.wrapper == null) ? 0 : this.wrapper.hashCode());
        result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Servers (");

        sb.append(serverName);
        sb.append(", ").append(host);
        sb.append(", ").append(db);
        sb.append(", ").append(username);
        sb.append(", ").append(password);
        sb.append(", ").append(port);
        sb.append(", ").append(socket);
        sb.append(", ").append(wrapper);
        sb.append(", ").append(owner);

        sb.append(")");
        return sb.toString();
    }
}
