/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.mysql.tables.pojos;


import com.neurasim.jooq.mysql.enums.UserAccountLocked;
import com.neurasim.jooq.mysql.enums.UserAlterPriv;
import com.neurasim.jooq.mysql.enums.UserAlterRoutinePriv;
import com.neurasim.jooq.mysql.enums.UserCreatePriv;
import com.neurasim.jooq.mysql.enums.UserCreateRolePriv;
import com.neurasim.jooq.mysql.enums.UserCreateRoutinePriv;
import com.neurasim.jooq.mysql.enums.UserCreateTablespacePriv;
import com.neurasim.jooq.mysql.enums.UserCreateTmpTablePriv;
import com.neurasim.jooq.mysql.enums.UserCreateUserPriv;
import com.neurasim.jooq.mysql.enums.UserCreateViewPriv;
import com.neurasim.jooq.mysql.enums.UserDeletePriv;
import com.neurasim.jooq.mysql.enums.UserDropPriv;
import com.neurasim.jooq.mysql.enums.UserDropRolePriv;
import com.neurasim.jooq.mysql.enums.UserEventPriv;
import com.neurasim.jooq.mysql.enums.UserExecutePriv;
import com.neurasim.jooq.mysql.enums.UserFilePriv;
import com.neurasim.jooq.mysql.enums.UserGrantPriv;
import com.neurasim.jooq.mysql.enums.UserIndexPriv;
import com.neurasim.jooq.mysql.enums.UserInsertPriv;
import com.neurasim.jooq.mysql.enums.UserLockTablesPriv;
import com.neurasim.jooq.mysql.enums.UserPasswordExpired;
import com.neurasim.jooq.mysql.enums.UserPasswordRequireCurrent;
import com.neurasim.jooq.mysql.enums.UserProcessPriv;
import com.neurasim.jooq.mysql.enums.UserReferencesPriv;
import com.neurasim.jooq.mysql.enums.UserReloadPriv;
import com.neurasim.jooq.mysql.enums.UserReplClientPriv;
import com.neurasim.jooq.mysql.enums.UserReplSlavePriv;
import com.neurasim.jooq.mysql.enums.UserSelectPriv;
import com.neurasim.jooq.mysql.enums.UserShowDbPriv;
import com.neurasim.jooq.mysql.enums.UserShowViewPriv;
import com.neurasim.jooq.mysql.enums.UserShutdownPriv;
import com.neurasim.jooq.mysql.enums.UserSslType;
import com.neurasim.jooq.mysql.enums.UserSuperPriv;
import com.neurasim.jooq.mysql.enums.UserTriggerPriv;
import com.neurasim.jooq.mysql.enums.UserUpdatePriv;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;

import org.jooq.JSON;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * Users and global privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String host;
    private final String user;
    private final UserSelectPriv selectPriv;
    private final UserInsertPriv insertPriv;
    private final UserUpdatePriv updatePriv;
    private final UserDeletePriv deletePriv;
    private final UserCreatePriv createPriv;
    private final UserDropPriv dropPriv;
    private final UserReloadPriv reloadPriv;
    private final UserShutdownPriv shutdownPriv;
    private final UserProcessPriv processPriv;
    private final UserFilePriv filePriv;
    private final UserGrantPriv grantPriv;
    private final UserReferencesPriv referencesPriv;
    private final UserIndexPriv indexPriv;
    private final UserAlterPriv alterPriv;
    private final UserShowDbPriv showDbPriv;
    private final UserSuperPriv superPriv;
    private final UserCreateTmpTablePriv createTmpTablePriv;
    private final UserLockTablesPriv lockTablesPriv;
    private final UserExecutePriv executePriv;
    private final UserReplSlavePriv replSlavePriv;
    private final UserReplClientPriv replClientPriv;
    private final UserCreateViewPriv createViewPriv;
    private final UserShowViewPriv showViewPriv;
    private final UserCreateRoutinePriv createRoutinePriv;
    private final UserAlterRoutinePriv alterRoutinePriv;
    private final UserCreateUserPriv createUserPriv;
    private final UserEventPriv eventPriv;
    private final UserTriggerPriv triggerPriv;
    private final UserCreateTablespacePriv createTablespacePriv;
    private final UserSslType sslType;
    private final byte[] sslCipher;
    private final byte[] x509Issuer;
    private final byte[] x509Subject;
    private final UInteger maxQuestions;
    private final UInteger maxUpdates;
    private final UInteger maxConnections;
    private final UInteger maxUserConnections;
    private final String plugin;
    private final String authenticationString;
    private final UserPasswordExpired passwordExpired;
    private final LocalDateTime passwordLastChanged;
    private final UShort passwordLifetime;
    private final UserAccountLocked accountLocked;
    private final UserCreateRolePriv createRolePriv;
    private final UserDropRolePriv dropRolePriv;
    private final UShort passwordReuseHistory;
    private final UShort passwordReuseTime;
    private final UserPasswordRequireCurrent passwordRequireCurrent;
    private final JSON userAttributes;

    public User(User value) {
        this.host = value.host;
        this.user = value.user;
        this.selectPriv = value.selectPriv;
        this.insertPriv = value.insertPriv;
        this.updatePriv = value.updatePriv;
        this.deletePriv = value.deletePriv;
        this.createPriv = value.createPriv;
        this.dropPriv = value.dropPriv;
        this.reloadPriv = value.reloadPriv;
        this.shutdownPriv = value.shutdownPriv;
        this.processPriv = value.processPriv;
        this.filePriv = value.filePriv;
        this.grantPriv = value.grantPriv;
        this.referencesPriv = value.referencesPriv;
        this.indexPriv = value.indexPriv;
        this.alterPriv = value.alterPriv;
        this.showDbPriv = value.showDbPriv;
        this.superPriv = value.superPriv;
        this.createTmpTablePriv = value.createTmpTablePriv;
        this.lockTablesPriv = value.lockTablesPriv;
        this.executePriv = value.executePriv;
        this.replSlavePriv = value.replSlavePriv;
        this.replClientPriv = value.replClientPriv;
        this.createViewPriv = value.createViewPriv;
        this.showViewPriv = value.showViewPriv;
        this.createRoutinePriv = value.createRoutinePriv;
        this.alterRoutinePriv = value.alterRoutinePriv;
        this.createUserPriv = value.createUserPriv;
        this.eventPriv = value.eventPriv;
        this.triggerPriv = value.triggerPriv;
        this.createTablespacePriv = value.createTablespacePriv;
        this.sslType = value.sslType;
        this.sslCipher = value.sslCipher;
        this.x509Issuer = value.x509Issuer;
        this.x509Subject = value.x509Subject;
        this.maxQuestions = value.maxQuestions;
        this.maxUpdates = value.maxUpdates;
        this.maxConnections = value.maxConnections;
        this.maxUserConnections = value.maxUserConnections;
        this.plugin = value.plugin;
        this.authenticationString = value.authenticationString;
        this.passwordExpired = value.passwordExpired;
        this.passwordLastChanged = value.passwordLastChanged;
        this.passwordLifetime = value.passwordLifetime;
        this.accountLocked = value.accountLocked;
        this.createRolePriv = value.createRolePriv;
        this.dropRolePriv = value.dropRolePriv;
        this.passwordReuseHistory = value.passwordReuseHistory;
        this.passwordReuseTime = value.passwordReuseTime;
        this.passwordRequireCurrent = value.passwordRequireCurrent;
        this.userAttributes = value.userAttributes;
    }

    public User(
        String host,
        String user,
        UserSelectPriv selectPriv,
        UserInsertPriv insertPriv,
        UserUpdatePriv updatePriv,
        UserDeletePriv deletePriv,
        UserCreatePriv createPriv,
        UserDropPriv dropPriv,
        UserReloadPriv reloadPriv,
        UserShutdownPriv shutdownPriv,
        UserProcessPriv processPriv,
        UserFilePriv filePriv,
        UserGrantPriv grantPriv,
        UserReferencesPriv referencesPriv,
        UserIndexPriv indexPriv,
        UserAlterPriv alterPriv,
        UserShowDbPriv showDbPriv,
        UserSuperPriv superPriv,
        UserCreateTmpTablePriv createTmpTablePriv,
        UserLockTablesPriv lockTablesPriv,
        UserExecutePriv executePriv,
        UserReplSlavePriv replSlavePriv,
        UserReplClientPriv replClientPriv,
        UserCreateViewPriv createViewPriv,
        UserShowViewPriv showViewPriv,
        UserCreateRoutinePriv createRoutinePriv,
        UserAlterRoutinePriv alterRoutinePriv,
        UserCreateUserPriv createUserPriv,
        UserEventPriv eventPriv,
        UserTriggerPriv triggerPriv,
        UserCreateTablespacePriv createTablespacePriv,
        UserSslType sslType,
        byte[] sslCipher,
        byte[] x509Issuer,
        byte[] x509Subject,
        UInteger maxQuestions,
        UInteger maxUpdates,
        UInteger maxConnections,
        UInteger maxUserConnections,
        String plugin,
        String authenticationString,
        UserPasswordExpired passwordExpired,
        LocalDateTime passwordLastChanged,
        UShort passwordLifetime,
        UserAccountLocked accountLocked,
        UserCreateRolePriv createRolePriv,
        UserDropRolePriv dropRolePriv,
        UShort passwordReuseHistory,
        UShort passwordReuseTime,
        UserPasswordRequireCurrent passwordRequireCurrent,
        JSON userAttributes
    ) {
        this.host = host;
        this.user = user;
        this.selectPriv = selectPriv;
        this.insertPriv = insertPriv;
        this.updatePriv = updatePriv;
        this.deletePriv = deletePriv;
        this.createPriv = createPriv;
        this.dropPriv = dropPriv;
        this.reloadPriv = reloadPriv;
        this.shutdownPriv = shutdownPriv;
        this.processPriv = processPriv;
        this.filePriv = filePriv;
        this.grantPriv = grantPriv;
        this.referencesPriv = referencesPriv;
        this.indexPriv = indexPriv;
        this.alterPriv = alterPriv;
        this.showDbPriv = showDbPriv;
        this.superPriv = superPriv;
        this.createTmpTablePriv = createTmpTablePriv;
        this.lockTablesPriv = lockTablesPriv;
        this.executePriv = executePriv;
        this.replSlavePriv = replSlavePriv;
        this.replClientPriv = replClientPriv;
        this.createViewPriv = createViewPriv;
        this.showViewPriv = showViewPriv;
        this.createRoutinePriv = createRoutinePriv;
        this.alterRoutinePriv = alterRoutinePriv;
        this.createUserPriv = createUserPriv;
        this.eventPriv = eventPriv;
        this.triggerPriv = triggerPriv;
        this.createTablespacePriv = createTablespacePriv;
        this.sslType = sslType;
        this.sslCipher = sslCipher;
        this.x509Issuer = x509Issuer;
        this.x509Subject = x509Subject;
        this.maxQuestions = maxQuestions;
        this.maxUpdates = maxUpdates;
        this.maxConnections = maxConnections;
        this.maxUserConnections = maxUserConnections;
        this.plugin = plugin;
        this.authenticationString = authenticationString;
        this.passwordExpired = passwordExpired;
        this.passwordLastChanged = passwordLastChanged;
        this.passwordLifetime = passwordLifetime;
        this.accountLocked = accountLocked;
        this.createRolePriv = createRolePriv;
        this.dropRolePriv = dropRolePriv;
        this.passwordReuseHistory = passwordReuseHistory;
        this.passwordReuseTime = passwordReuseTime;
        this.passwordRequireCurrent = passwordRequireCurrent;
        this.userAttributes = userAttributes;
    }

    /**
     * Getter for <code>mysql.user.Host</code>.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Getter for <code>mysql.user.User</code>.
     */
    public String getUser() {
        return this.user;
    }

    /**
     * Getter for <code>mysql.user.Select_priv</code>.
     */
    public UserSelectPriv getSelectPriv() {
        return this.selectPriv;
    }

    /**
     * Getter for <code>mysql.user.Insert_priv</code>.
     */
    public UserInsertPriv getInsertPriv() {
        return this.insertPriv;
    }

    /**
     * Getter for <code>mysql.user.Update_priv</code>.
     */
    public UserUpdatePriv getUpdatePriv() {
        return this.updatePriv;
    }

    /**
     * Getter for <code>mysql.user.Delete_priv</code>.
     */
    public UserDeletePriv getDeletePriv() {
        return this.deletePriv;
    }

    /**
     * Getter for <code>mysql.user.Create_priv</code>.
     */
    public UserCreatePriv getCreatePriv() {
        return this.createPriv;
    }

    /**
     * Getter for <code>mysql.user.Drop_priv</code>.
     */
    public UserDropPriv getDropPriv() {
        return this.dropPriv;
    }

    /**
     * Getter for <code>mysql.user.Reload_priv</code>.
     */
    public UserReloadPriv getReloadPriv() {
        return this.reloadPriv;
    }

    /**
     * Getter for <code>mysql.user.Shutdown_priv</code>.
     */
    public UserShutdownPriv getShutdownPriv() {
        return this.shutdownPriv;
    }

    /**
     * Getter for <code>mysql.user.Process_priv</code>.
     */
    public UserProcessPriv getProcessPriv() {
        return this.processPriv;
    }

    /**
     * Getter for <code>mysql.user.File_priv</code>.
     */
    public UserFilePriv getFilePriv() {
        return this.filePriv;
    }

    /**
     * Getter for <code>mysql.user.Grant_priv</code>.
     */
    public UserGrantPriv getGrantPriv() {
        return this.grantPriv;
    }

    /**
     * Getter for <code>mysql.user.References_priv</code>.
     */
    public UserReferencesPriv getReferencesPriv() {
        return this.referencesPriv;
    }

    /**
     * Getter for <code>mysql.user.Index_priv</code>.
     */
    public UserIndexPriv getIndexPriv() {
        return this.indexPriv;
    }

    /**
     * Getter for <code>mysql.user.Alter_priv</code>.
     */
    public UserAlterPriv getAlterPriv() {
        return this.alterPriv;
    }

    /**
     * Getter for <code>mysql.user.Show_db_priv</code>.
     */
    public UserShowDbPriv getShowDbPriv() {
        return this.showDbPriv;
    }

    /**
     * Getter for <code>mysql.user.Super_priv</code>.
     */
    public UserSuperPriv getSuperPriv() {
        return this.superPriv;
    }

    /**
     * Getter for <code>mysql.user.Create_tmp_table_priv</code>.
     */
    public UserCreateTmpTablePriv getCreateTmpTablePriv() {
        return this.createTmpTablePriv;
    }

    /**
     * Getter for <code>mysql.user.Lock_tables_priv</code>.
     */
    public UserLockTablesPriv getLockTablesPriv() {
        return this.lockTablesPriv;
    }

    /**
     * Getter for <code>mysql.user.Execute_priv</code>.
     */
    public UserExecutePriv getExecutePriv() {
        return this.executePriv;
    }

    /**
     * Getter for <code>mysql.user.Repl_slave_priv</code>.
     */
    public UserReplSlavePriv getReplSlavePriv() {
        return this.replSlavePriv;
    }

    /**
     * Getter for <code>mysql.user.Repl_client_priv</code>.
     */
    public UserReplClientPriv getReplClientPriv() {
        return this.replClientPriv;
    }

    /**
     * Getter for <code>mysql.user.Create_view_priv</code>.
     */
    public UserCreateViewPriv getCreateViewPriv() {
        return this.createViewPriv;
    }

    /**
     * Getter for <code>mysql.user.Show_view_priv</code>.
     */
    public UserShowViewPriv getShowViewPriv() {
        return this.showViewPriv;
    }

    /**
     * Getter for <code>mysql.user.Create_routine_priv</code>.
     */
    public UserCreateRoutinePriv getCreateRoutinePriv() {
        return this.createRoutinePriv;
    }

    /**
     * Getter for <code>mysql.user.Alter_routine_priv</code>.
     */
    public UserAlterRoutinePriv getAlterRoutinePriv() {
        return this.alterRoutinePriv;
    }

    /**
     * Getter for <code>mysql.user.Create_user_priv</code>.
     */
    public UserCreateUserPriv getCreateUserPriv() {
        return this.createUserPriv;
    }

    /**
     * Getter for <code>mysql.user.Event_priv</code>.
     */
    public UserEventPriv getEventPriv() {
        return this.eventPriv;
    }

    /**
     * Getter for <code>mysql.user.Trigger_priv</code>.
     */
    public UserTriggerPriv getTriggerPriv() {
        return this.triggerPriv;
    }

    /**
     * Getter for <code>mysql.user.Create_tablespace_priv</code>.
     */
    public UserCreateTablespacePriv getCreateTablespacePriv() {
        return this.createTablespacePriv;
    }

    /**
     * Getter for <code>mysql.user.ssl_type</code>.
     */
    public UserSslType getSslType() {
        return this.sslType;
    }

    /**
     * Getter for <code>mysql.user.ssl_cipher</code>.
     */
    public byte[] getSslCipher() {
        return this.sslCipher;
    }

    /**
     * Getter for <code>mysql.user.x509_issuer</code>.
     */
    public byte[] getX509Issuer() {
        return this.x509Issuer;
    }

    /**
     * Getter for <code>mysql.user.x509_subject</code>.
     */
    public byte[] getX509Subject() {
        return this.x509Subject;
    }

    /**
     * Getter for <code>mysql.user.max_questions</code>.
     */
    public UInteger getMaxQuestions() {
        return this.maxQuestions;
    }

    /**
     * Getter for <code>mysql.user.max_updates</code>.
     */
    public UInteger getMaxUpdates() {
        return this.maxUpdates;
    }

    /**
     * Getter for <code>mysql.user.max_connections</code>.
     */
    public UInteger getMaxConnections() {
        return this.maxConnections;
    }

    /**
     * Getter for <code>mysql.user.max_user_connections</code>.
     */
    public UInteger getMaxUserConnections() {
        return this.maxUserConnections;
    }

    /**
     * Getter for <code>mysql.user.plugin</code>.
     */
    public String getPlugin() {
        return this.plugin;
    }

    /**
     * Getter for <code>mysql.user.authentication_string</code>.
     */
    public String getAuthenticationString() {
        return this.authenticationString;
    }

    /**
     * Getter for <code>mysql.user.password_expired</code>.
     */
    public UserPasswordExpired getPasswordExpired() {
        return this.passwordExpired;
    }

    /**
     * Getter for <code>mysql.user.password_last_changed</code>.
     */
    public LocalDateTime getPasswordLastChanged() {
        return this.passwordLastChanged;
    }

    /**
     * Getter for <code>mysql.user.password_lifetime</code>.
     */
    public UShort getPasswordLifetime() {
        return this.passwordLifetime;
    }

    /**
     * Getter for <code>mysql.user.account_locked</code>.
     */
    public UserAccountLocked getAccountLocked() {
        return this.accountLocked;
    }

    /**
     * Getter for <code>mysql.user.Create_role_priv</code>.
     */
    public UserCreateRolePriv getCreateRolePriv() {
        return this.createRolePriv;
    }

    /**
     * Getter for <code>mysql.user.Drop_role_priv</code>.
     */
    public UserDropRolePriv getDropRolePriv() {
        return this.dropRolePriv;
    }

    /**
     * Getter for <code>mysql.user.Password_reuse_history</code>.
     */
    public UShort getPasswordReuseHistory() {
        return this.passwordReuseHistory;
    }

    /**
     * Getter for <code>mysql.user.Password_reuse_time</code>.
     */
    public UShort getPasswordReuseTime() {
        return this.passwordReuseTime;
    }

    /**
     * Getter for <code>mysql.user.Password_require_current</code>.
     */
    public UserPasswordRequireCurrent getPasswordRequireCurrent() {
        return this.passwordRequireCurrent;
    }

    /**
     * Getter for <code>mysql.user.User_attributes</code>.
     */
    public JSON getUserAttributes() {
        return this.userAttributes;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.user == null) {
            if (other.user != null)
                return false;
        }
        else if (!this.user.equals(other.user))
            return false;
        if (this.selectPriv == null) {
            if (other.selectPriv != null)
                return false;
        }
        else if (!this.selectPriv.equals(other.selectPriv))
            return false;
        if (this.insertPriv == null) {
            if (other.insertPriv != null)
                return false;
        }
        else if (!this.insertPriv.equals(other.insertPriv))
            return false;
        if (this.updatePriv == null) {
            if (other.updatePriv != null)
                return false;
        }
        else if (!this.updatePriv.equals(other.updatePriv))
            return false;
        if (this.deletePriv == null) {
            if (other.deletePriv != null)
                return false;
        }
        else if (!this.deletePriv.equals(other.deletePriv))
            return false;
        if (this.createPriv == null) {
            if (other.createPriv != null)
                return false;
        }
        else if (!this.createPriv.equals(other.createPriv))
            return false;
        if (this.dropPriv == null) {
            if (other.dropPriv != null)
                return false;
        }
        else if (!this.dropPriv.equals(other.dropPriv))
            return false;
        if (this.reloadPriv == null) {
            if (other.reloadPriv != null)
                return false;
        }
        else if (!this.reloadPriv.equals(other.reloadPriv))
            return false;
        if (this.shutdownPriv == null) {
            if (other.shutdownPriv != null)
                return false;
        }
        else if (!this.shutdownPriv.equals(other.shutdownPriv))
            return false;
        if (this.processPriv == null) {
            if (other.processPriv != null)
                return false;
        }
        else if (!this.processPriv.equals(other.processPriv))
            return false;
        if (this.filePriv == null) {
            if (other.filePriv != null)
                return false;
        }
        else if (!this.filePriv.equals(other.filePriv))
            return false;
        if (this.grantPriv == null) {
            if (other.grantPriv != null)
                return false;
        }
        else if (!this.grantPriv.equals(other.grantPriv))
            return false;
        if (this.referencesPriv == null) {
            if (other.referencesPriv != null)
                return false;
        }
        else if (!this.referencesPriv.equals(other.referencesPriv))
            return false;
        if (this.indexPriv == null) {
            if (other.indexPriv != null)
                return false;
        }
        else if (!this.indexPriv.equals(other.indexPriv))
            return false;
        if (this.alterPriv == null) {
            if (other.alterPriv != null)
                return false;
        }
        else if (!this.alterPriv.equals(other.alterPriv))
            return false;
        if (this.showDbPriv == null) {
            if (other.showDbPriv != null)
                return false;
        }
        else if (!this.showDbPriv.equals(other.showDbPriv))
            return false;
        if (this.superPriv == null) {
            if (other.superPriv != null)
                return false;
        }
        else if (!this.superPriv.equals(other.superPriv))
            return false;
        if (this.createTmpTablePriv == null) {
            if (other.createTmpTablePriv != null)
                return false;
        }
        else if (!this.createTmpTablePriv.equals(other.createTmpTablePriv))
            return false;
        if (this.lockTablesPriv == null) {
            if (other.lockTablesPriv != null)
                return false;
        }
        else if (!this.lockTablesPriv.equals(other.lockTablesPriv))
            return false;
        if (this.executePriv == null) {
            if (other.executePriv != null)
                return false;
        }
        else if (!this.executePriv.equals(other.executePriv))
            return false;
        if (this.replSlavePriv == null) {
            if (other.replSlavePriv != null)
                return false;
        }
        else if (!this.replSlavePriv.equals(other.replSlavePriv))
            return false;
        if (this.replClientPriv == null) {
            if (other.replClientPriv != null)
                return false;
        }
        else if (!this.replClientPriv.equals(other.replClientPriv))
            return false;
        if (this.createViewPriv == null) {
            if (other.createViewPriv != null)
                return false;
        }
        else if (!this.createViewPriv.equals(other.createViewPriv))
            return false;
        if (this.showViewPriv == null) {
            if (other.showViewPriv != null)
                return false;
        }
        else if (!this.showViewPriv.equals(other.showViewPriv))
            return false;
        if (this.createRoutinePriv == null) {
            if (other.createRoutinePriv != null)
                return false;
        }
        else if (!this.createRoutinePriv.equals(other.createRoutinePriv))
            return false;
        if (this.alterRoutinePriv == null) {
            if (other.alterRoutinePriv != null)
                return false;
        }
        else if (!this.alterRoutinePriv.equals(other.alterRoutinePriv))
            return false;
        if (this.createUserPriv == null) {
            if (other.createUserPriv != null)
                return false;
        }
        else if (!this.createUserPriv.equals(other.createUserPriv))
            return false;
        if (this.eventPriv == null) {
            if (other.eventPriv != null)
                return false;
        }
        else if (!this.eventPriv.equals(other.eventPriv))
            return false;
        if (this.triggerPriv == null) {
            if (other.triggerPriv != null)
                return false;
        }
        else if (!this.triggerPriv.equals(other.triggerPriv))
            return false;
        if (this.createTablespacePriv == null) {
            if (other.createTablespacePriv != null)
                return false;
        }
        else if (!this.createTablespacePriv.equals(other.createTablespacePriv))
            return false;
        if (this.sslType == null) {
            if (other.sslType != null)
                return false;
        }
        else if (!this.sslType.equals(other.sslType))
            return false;
        if (this.sslCipher == null) {
            if (other.sslCipher != null)
                return false;
        }
        else if (!Arrays.equals(this.sslCipher, other.sslCipher))
            return false;
        if (this.x509Issuer == null) {
            if (other.x509Issuer != null)
                return false;
        }
        else if (!Arrays.equals(this.x509Issuer, other.x509Issuer))
            return false;
        if (this.x509Subject == null) {
            if (other.x509Subject != null)
                return false;
        }
        else if (!Arrays.equals(this.x509Subject, other.x509Subject))
            return false;
        if (this.maxQuestions == null) {
            if (other.maxQuestions != null)
                return false;
        }
        else if (!this.maxQuestions.equals(other.maxQuestions))
            return false;
        if (this.maxUpdates == null) {
            if (other.maxUpdates != null)
                return false;
        }
        else if (!this.maxUpdates.equals(other.maxUpdates))
            return false;
        if (this.maxConnections == null) {
            if (other.maxConnections != null)
                return false;
        }
        else if (!this.maxConnections.equals(other.maxConnections))
            return false;
        if (this.maxUserConnections == null) {
            if (other.maxUserConnections != null)
                return false;
        }
        else if (!this.maxUserConnections.equals(other.maxUserConnections))
            return false;
        if (this.plugin == null) {
            if (other.plugin != null)
                return false;
        }
        else if (!this.plugin.equals(other.plugin))
            return false;
        if (this.authenticationString == null) {
            if (other.authenticationString != null)
                return false;
        }
        else if (!this.authenticationString.equals(other.authenticationString))
            return false;
        if (this.passwordExpired == null) {
            if (other.passwordExpired != null)
                return false;
        }
        else if (!this.passwordExpired.equals(other.passwordExpired))
            return false;
        if (this.passwordLastChanged == null) {
            if (other.passwordLastChanged != null)
                return false;
        }
        else if (!this.passwordLastChanged.equals(other.passwordLastChanged))
            return false;
        if (this.passwordLifetime == null) {
            if (other.passwordLifetime != null)
                return false;
        }
        else if (!this.passwordLifetime.equals(other.passwordLifetime))
            return false;
        if (this.accountLocked == null) {
            if (other.accountLocked != null)
                return false;
        }
        else if (!this.accountLocked.equals(other.accountLocked))
            return false;
        if (this.createRolePriv == null) {
            if (other.createRolePriv != null)
                return false;
        }
        else if (!this.createRolePriv.equals(other.createRolePriv))
            return false;
        if (this.dropRolePriv == null) {
            if (other.dropRolePriv != null)
                return false;
        }
        else if (!this.dropRolePriv.equals(other.dropRolePriv))
            return false;
        if (this.passwordReuseHistory == null) {
            if (other.passwordReuseHistory != null)
                return false;
        }
        else if (!this.passwordReuseHistory.equals(other.passwordReuseHistory))
            return false;
        if (this.passwordReuseTime == null) {
            if (other.passwordReuseTime != null)
                return false;
        }
        else if (!this.passwordReuseTime.equals(other.passwordReuseTime))
            return false;
        if (this.passwordRequireCurrent == null) {
            if (other.passwordRequireCurrent != null)
                return false;
        }
        else if (!this.passwordRequireCurrent.equals(other.passwordRequireCurrent))
            return false;
        if (this.userAttributes == null) {
            if (other.userAttributes != null)
                return false;
        }
        else if (!this.userAttributes.equals(other.userAttributes))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.user == null) ? 0 : this.user.hashCode());
        result = prime * result + ((this.selectPriv == null) ? 0 : this.selectPriv.hashCode());
        result = prime * result + ((this.insertPriv == null) ? 0 : this.insertPriv.hashCode());
        result = prime * result + ((this.updatePriv == null) ? 0 : this.updatePriv.hashCode());
        result = prime * result + ((this.deletePriv == null) ? 0 : this.deletePriv.hashCode());
        result = prime * result + ((this.createPriv == null) ? 0 : this.createPriv.hashCode());
        result = prime * result + ((this.dropPriv == null) ? 0 : this.dropPriv.hashCode());
        result = prime * result + ((this.reloadPriv == null) ? 0 : this.reloadPriv.hashCode());
        result = prime * result + ((this.shutdownPriv == null) ? 0 : this.shutdownPriv.hashCode());
        result = prime * result + ((this.processPriv == null) ? 0 : this.processPriv.hashCode());
        result = prime * result + ((this.filePriv == null) ? 0 : this.filePriv.hashCode());
        result = prime * result + ((this.grantPriv == null) ? 0 : this.grantPriv.hashCode());
        result = prime * result + ((this.referencesPriv == null) ? 0 : this.referencesPriv.hashCode());
        result = prime * result + ((this.indexPriv == null) ? 0 : this.indexPriv.hashCode());
        result = prime * result + ((this.alterPriv == null) ? 0 : this.alterPriv.hashCode());
        result = prime * result + ((this.showDbPriv == null) ? 0 : this.showDbPriv.hashCode());
        result = prime * result + ((this.superPriv == null) ? 0 : this.superPriv.hashCode());
        result = prime * result + ((this.createTmpTablePriv == null) ? 0 : this.createTmpTablePriv.hashCode());
        result = prime * result + ((this.lockTablesPriv == null) ? 0 : this.lockTablesPriv.hashCode());
        result = prime * result + ((this.executePriv == null) ? 0 : this.executePriv.hashCode());
        result = prime * result + ((this.replSlavePriv == null) ? 0 : this.replSlavePriv.hashCode());
        result = prime * result + ((this.replClientPriv == null) ? 0 : this.replClientPriv.hashCode());
        result = prime * result + ((this.createViewPriv == null) ? 0 : this.createViewPriv.hashCode());
        result = prime * result + ((this.showViewPriv == null) ? 0 : this.showViewPriv.hashCode());
        result = prime * result + ((this.createRoutinePriv == null) ? 0 : this.createRoutinePriv.hashCode());
        result = prime * result + ((this.alterRoutinePriv == null) ? 0 : this.alterRoutinePriv.hashCode());
        result = prime * result + ((this.createUserPriv == null) ? 0 : this.createUserPriv.hashCode());
        result = prime * result + ((this.eventPriv == null) ? 0 : this.eventPriv.hashCode());
        result = prime * result + ((this.triggerPriv == null) ? 0 : this.triggerPriv.hashCode());
        result = prime * result + ((this.createTablespacePriv == null) ? 0 : this.createTablespacePriv.hashCode());
        result = prime * result + ((this.sslType == null) ? 0 : this.sslType.hashCode());
        result = prime * result + ((this.sslCipher == null) ? 0 : Arrays.hashCode(this.sslCipher));
        result = prime * result + ((this.x509Issuer == null) ? 0 : Arrays.hashCode(this.x509Issuer));
        result = prime * result + ((this.x509Subject == null) ? 0 : Arrays.hashCode(this.x509Subject));
        result = prime * result + ((this.maxQuestions == null) ? 0 : this.maxQuestions.hashCode());
        result = prime * result + ((this.maxUpdates == null) ? 0 : this.maxUpdates.hashCode());
        result = prime * result + ((this.maxConnections == null) ? 0 : this.maxConnections.hashCode());
        result = prime * result + ((this.maxUserConnections == null) ? 0 : this.maxUserConnections.hashCode());
        result = prime * result + ((this.plugin == null) ? 0 : this.plugin.hashCode());
        result = prime * result + ((this.authenticationString == null) ? 0 : this.authenticationString.hashCode());
        result = prime * result + ((this.passwordExpired == null) ? 0 : this.passwordExpired.hashCode());
        result = prime * result + ((this.passwordLastChanged == null) ? 0 : this.passwordLastChanged.hashCode());
        result = prime * result + ((this.passwordLifetime == null) ? 0 : this.passwordLifetime.hashCode());
        result = prime * result + ((this.accountLocked == null) ? 0 : this.accountLocked.hashCode());
        result = prime * result + ((this.createRolePriv == null) ? 0 : this.createRolePriv.hashCode());
        result = prime * result + ((this.dropRolePriv == null) ? 0 : this.dropRolePriv.hashCode());
        result = prime * result + ((this.passwordReuseHistory == null) ? 0 : this.passwordReuseHistory.hashCode());
        result = prime * result + ((this.passwordReuseTime == null) ? 0 : this.passwordReuseTime.hashCode());
        result = prime * result + ((this.passwordRequireCurrent == null) ? 0 : this.passwordRequireCurrent.hashCode());
        result = prime * result + ((this.userAttributes == null) ? 0 : this.userAttributes.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(host);
        sb.append(", ").append(user);
        sb.append(", ").append(selectPriv);
        sb.append(", ").append(insertPriv);
        sb.append(", ").append(updatePriv);
        sb.append(", ").append(deletePriv);
        sb.append(", ").append(createPriv);
        sb.append(", ").append(dropPriv);
        sb.append(", ").append(reloadPriv);
        sb.append(", ").append(shutdownPriv);
        sb.append(", ").append(processPriv);
        sb.append(", ").append(filePriv);
        sb.append(", ").append(grantPriv);
        sb.append(", ").append(referencesPriv);
        sb.append(", ").append(indexPriv);
        sb.append(", ").append(alterPriv);
        sb.append(", ").append(showDbPriv);
        sb.append(", ").append(superPriv);
        sb.append(", ").append(createTmpTablePriv);
        sb.append(", ").append(lockTablesPriv);
        sb.append(", ").append(executePriv);
        sb.append(", ").append(replSlavePriv);
        sb.append(", ").append(replClientPriv);
        sb.append(", ").append(createViewPriv);
        sb.append(", ").append(showViewPriv);
        sb.append(", ").append(createRoutinePriv);
        sb.append(", ").append(alterRoutinePriv);
        sb.append(", ").append(createUserPriv);
        sb.append(", ").append(eventPriv);
        sb.append(", ").append(triggerPriv);
        sb.append(", ").append(createTablespacePriv);
        sb.append(", ").append(sslType);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(maxQuestions);
        sb.append(", ").append(maxUpdates);
        sb.append(", ").append(maxConnections);
        sb.append(", ").append(maxUserConnections);
        sb.append(", ").append(plugin);
        sb.append(", ").append(authenticationString);
        sb.append(", ").append(passwordExpired);
        sb.append(", ").append(passwordLastChanged);
        sb.append(", ").append(passwordLifetime);
        sb.append(", ").append(accountLocked);
        sb.append(", ").append(createRolePriv);
        sb.append(", ").append(dropRolePriv);
        sb.append(", ").append(passwordReuseHistory);
        sb.append(", ").append(passwordReuseTime);
        sb.append(", ").append(passwordRequireCurrent);
        sb.append(", ").append(userAttributes);

        sb.append(")");
        return sb.toString();
    }
}
