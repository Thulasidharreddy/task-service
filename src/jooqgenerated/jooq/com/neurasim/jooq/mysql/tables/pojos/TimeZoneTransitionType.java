/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.mysql.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * Time zone transition types
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZoneTransitionType implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UInteger timeZoneId;
    private final UInteger transitionTypeId;
    private final Integer offset;
    private final UByte isDst;
    private final String abbreviation;

    public TimeZoneTransitionType(TimeZoneTransitionType value) {
        this.timeZoneId = value.timeZoneId;
        this.transitionTypeId = value.transitionTypeId;
        this.offset = value.offset;
        this.isDst = value.isDst;
        this.abbreviation = value.abbreviation;
    }

    public TimeZoneTransitionType(
        UInteger timeZoneId,
        UInteger transitionTypeId,
        Integer offset,
        UByte isDst,
        String abbreviation
    ) {
        this.timeZoneId = timeZoneId;
        this.transitionTypeId = transitionTypeId;
        this.offset = offset;
        this.isDst = isDst;
        this.abbreviation = abbreviation;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Time_zone_id</code>.
     */
    public UInteger getTimeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Getter for
     * <code>mysql.time_zone_transition_type.Transition_type_id</code>.
     */
    public UInteger getTransitionTypeId() {
        return this.transitionTypeId;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Offset</code>.
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Is_DST</code>.
     */
    public UByte getIsDst() {
        return this.isDst;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Abbreviation</code>.
     */
    public String getAbbreviation() {
        return this.abbreviation;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TimeZoneTransitionType other = (TimeZoneTransitionType) obj;
        if (this.timeZoneId == null) {
            if (other.timeZoneId != null)
                return false;
        }
        else if (!this.timeZoneId.equals(other.timeZoneId))
            return false;
        if (this.transitionTypeId == null) {
            if (other.transitionTypeId != null)
                return false;
        }
        else if (!this.transitionTypeId.equals(other.transitionTypeId))
            return false;
        if (this.offset == null) {
            if (other.offset != null)
                return false;
        }
        else if (!this.offset.equals(other.offset))
            return false;
        if (this.isDst == null) {
            if (other.isDst != null)
                return false;
        }
        else if (!this.isDst.equals(other.isDst))
            return false;
        if (this.abbreviation == null) {
            if (other.abbreviation != null)
                return false;
        }
        else if (!this.abbreviation.equals(other.abbreviation))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.timeZoneId == null) ? 0 : this.timeZoneId.hashCode());
        result = prime * result + ((this.transitionTypeId == null) ? 0 : this.transitionTypeId.hashCode());
        result = prime * result + ((this.offset == null) ? 0 : this.offset.hashCode());
        result = prime * result + ((this.isDst == null) ? 0 : this.isDst.hashCode());
        result = prime * result + ((this.abbreviation == null) ? 0 : this.abbreviation.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TimeZoneTransitionType (");

        sb.append(timeZoneId);
        sb.append(", ").append(transitionTypeId);
        sb.append(", ").append(offset);
        sb.append(", ").append(isDst);
        sb.append(", ").append(abbreviation);

        sb.append(")");
        return sb.toString();
    }
}
