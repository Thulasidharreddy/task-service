/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationGroupMemberStats implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String channelName;
    private final String viewId;
    private final String memberId;
    private final ULong countTransactionsInQueue;
    private final ULong countTransactionsChecked;
    private final ULong countConflictsDetected;
    private final ULong countTransactionsRowsValidating;
    private final String transactionsCommittedAllMembers;
    private final String lastConflictFreeTransaction;
    private final ULong countTransactionsRemoteInApplierQueue;
    private final ULong countTransactionsRemoteApplied;
    private final ULong countTransactionsLocalProposed;
    private final ULong countTransactionsLocalRollback;

    public ReplicationGroupMemberStats(ReplicationGroupMemberStats value) {
        this.channelName = value.channelName;
        this.viewId = value.viewId;
        this.memberId = value.memberId;
        this.countTransactionsInQueue = value.countTransactionsInQueue;
        this.countTransactionsChecked = value.countTransactionsChecked;
        this.countConflictsDetected = value.countConflictsDetected;
        this.countTransactionsRowsValidating = value.countTransactionsRowsValidating;
        this.transactionsCommittedAllMembers = value.transactionsCommittedAllMembers;
        this.lastConflictFreeTransaction = value.lastConflictFreeTransaction;
        this.countTransactionsRemoteInApplierQueue = value.countTransactionsRemoteInApplierQueue;
        this.countTransactionsRemoteApplied = value.countTransactionsRemoteApplied;
        this.countTransactionsLocalProposed = value.countTransactionsLocalProposed;
        this.countTransactionsLocalRollback = value.countTransactionsLocalRollback;
    }

    public ReplicationGroupMemberStats(
        String channelName,
        String viewId,
        String memberId,
        ULong countTransactionsInQueue,
        ULong countTransactionsChecked,
        ULong countConflictsDetected,
        ULong countTransactionsRowsValidating,
        String transactionsCommittedAllMembers,
        String lastConflictFreeTransaction,
        ULong countTransactionsRemoteInApplierQueue,
        ULong countTransactionsRemoteApplied,
        ULong countTransactionsLocalProposed,
        ULong countTransactionsLocalRollback
    ) {
        this.channelName = channelName;
        this.viewId = viewId;
        this.memberId = memberId;
        this.countTransactionsInQueue = countTransactionsInQueue;
        this.countTransactionsChecked = countTransactionsChecked;
        this.countConflictsDetected = countConflictsDetected;
        this.countTransactionsRowsValidating = countTransactionsRowsValidating;
        this.transactionsCommittedAllMembers = transactionsCommittedAllMembers;
        this.lastConflictFreeTransaction = lastConflictFreeTransaction;
        this.countTransactionsRemoteInApplierQueue = countTransactionsRemoteInApplierQueue;
        this.countTransactionsRemoteApplied = countTransactionsRemoteApplied;
        this.countTransactionsLocalProposed = countTransactionsLocalProposed;
        this.countTransactionsLocalRollback = countTransactionsLocalRollback;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.CHANNEL_NAME</code>.
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.VIEW_ID</code>.
     */
    public String getViewId() {
        return this.viewId;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.MEMBER_ID</code>.
     */
    public String getMemberId() {
        return this.memberId;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_IN_QUEUE</code>.
     */
    public ULong getCountTransactionsInQueue() {
        return this.countTransactionsInQueue;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_CHECKED</code>.
     */
    public ULong getCountTransactionsChecked() {
        return this.countTransactionsChecked;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_CONFLICTS_DETECTED</code>.
     */
    public ULong getCountConflictsDetected() {
        return this.countConflictsDetected;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_ROWS_VALIDATING</code>.
     */
    public ULong getCountTransactionsRowsValidating() {
        return this.countTransactionsRowsValidating;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.TRANSACTIONS_COMMITTED_ALL_MEMBERS</code>.
     */
    public String getTransactionsCommittedAllMembers() {
        return this.transactionsCommittedAllMembers;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.LAST_CONFLICT_FREE_TRANSACTION</code>.
     */
    public String getLastConflictFreeTransaction() {
        return this.lastConflictFreeTransaction;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE</code>.
     */
    public ULong getCountTransactionsRemoteInApplierQueue() {
        return this.countTransactionsRemoteInApplierQueue;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_REMOTE_APPLIED</code>.
     */
    public ULong getCountTransactionsRemoteApplied() {
        return this.countTransactionsRemoteApplied;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_LOCAL_PROPOSED</code>.
     */
    public ULong getCountTransactionsLocalProposed() {
        return this.countTransactionsLocalProposed;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_group_member_stats.COUNT_TRANSACTIONS_LOCAL_ROLLBACK</code>.
     */
    public ULong getCountTransactionsLocalRollback() {
        return this.countTransactionsLocalRollback;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ReplicationGroupMemberStats other = (ReplicationGroupMemberStats) obj;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        if (this.viewId == null) {
            if (other.viewId != null)
                return false;
        }
        else if (!this.viewId.equals(other.viewId))
            return false;
        if (this.memberId == null) {
            if (other.memberId != null)
                return false;
        }
        else if (!this.memberId.equals(other.memberId))
            return false;
        if (this.countTransactionsInQueue == null) {
            if (other.countTransactionsInQueue != null)
                return false;
        }
        else if (!this.countTransactionsInQueue.equals(other.countTransactionsInQueue))
            return false;
        if (this.countTransactionsChecked == null) {
            if (other.countTransactionsChecked != null)
                return false;
        }
        else if (!this.countTransactionsChecked.equals(other.countTransactionsChecked))
            return false;
        if (this.countConflictsDetected == null) {
            if (other.countConflictsDetected != null)
                return false;
        }
        else if (!this.countConflictsDetected.equals(other.countConflictsDetected))
            return false;
        if (this.countTransactionsRowsValidating == null) {
            if (other.countTransactionsRowsValidating != null)
                return false;
        }
        else if (!this.countTransactionsRowsValidating.equals(other.countTransactionsRowsValidating))
            return false;
        if (this.transactionsCommittedAllMembers == null) {
            if (other.transactionsCommittedAllMembers != null)
                return false;
        }
        else if (!this.transactionsCommittedAllMembers.equals(other.transactionsCommittedAllMembers))
            return false;
        if (this.lastConflictFreeTransaction == null) {
            if (other.lastConflictFreeTransaction != null)
                return false;
        }
        else if (!this.lastConflictFreeTransaction.equals(other.lastConflictFreeTransaction))
            return false;
        if (this.countTransactionsRemoteInApplierQueue == null) {
            if (other.countTransactionsRemoteInApplierQueue != null)
                return false;
        }
        else if (!this.countTransactionsRemoteInApplierQueue.equals(other.countTransactionsRemoteInApplierQueue))
            return false;
        if (this.countTransactionsRemoteApplied == null) {
            if (other.countTransactionsRemoteApplied != null)
                return false;
        }
        else if (!this.countTransactionsRemoteApplied.equals(other.countTransactionsRemoteApplied))
            return false;
        if (this.countTransactionsLocalProposed == null) {
            if (other.countTransactionsLocalProposed != null)
                return false;
        }
        else if (!this.countTransactionsLocalProposed.equals(other.countTransactionsLocalProposed))
            return false;
        if (this.countTransactionsLocalRollback == null) {
            if (other.countTransactionsLocalRollback != null)
                return false;
        }
        else if (!this.countTransactionsLocalRollback.equals(other.countTransactionsLocalRollback))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        result = prime * result + ((this.viewId == null) ? 0 : this.viewId.hashCode());
        result = prime * result + ((this.memberId == null) ? 0 : this.memberId.hashCode());
        result = prime * result + ((this.countTransactionsInQueue == null) ? 0 : this.countTransactionsInQueue.hashCode());
        result = prime * result + ((this.countTransactionsChecked == null) ? 0 : this.countTransactionsChecked.hashCode());
        result = prime * result + ((this.countConflictsDetected == null) ? 0 : this.countConflictsDetected.hashCode());
        result = prime * result + ((this.countTransactionsRowsValidating == null) ? 0 : this.countTransactionsRowsValidating.hashCode());
        result = prime * result + ((this.transactionsCommittedAllMembers == null) ? 0 : this.transactionsCommittedAllMembers.hashCode());
        result = prime * result + ((this.lastConflictFreeTransaction == null) ? 0 : this.lastConflictFreeTransaction.hashCode());
        result = prime * result + ((this.countTransactionsRemoteInApplierQueue == null) ? 0 : this.countTransactionsRemoteInApplierQueue.hashCode());
        result = prime * result + ((this.countTransactionsRemoteApplied == null) ? 0 : this.countTransactionsRemoteApplied.hashCode());
        result = prime * result + ((this.countTransactionsLocalProposed == null) ? 0 : this.countTransactionsLocalProposed.hashCode());
        result = prime * result + ((this.countTransactionsLocalRollback == null) ? 0 : this.countTransactionsLocalRollback.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReplicationGroupMemberStats (");

        sb.append(channelName);
        sb.append(", ").append(viewId);
        sb.append(", ").append(memberId);
        sb.append(", ").append(countTransactionsInQueue);
        sb.append(", ").append(countTransactionsChecked);
        sb.append(", ").append(countConflictsDetected);
        sb.append(", ").append(countTransactionsRowsValidating);
        sb.append(", ").append(transactionsCommittedAllMembers);
        sb.append(", ").append(lastConflictFreeTransaction);
        sb.append(", ").append(countTransactionsRemoteInApplierQueue);
        sb.append(", ").append(countTransactionsRemoteApplied);
        sb.append(", ").append(countTransactionsLocalProposed);
        sb.append(", ").append(countTransactionsLocalRollback);

        sb.append(")");
        return sb.toString();
    }
}
