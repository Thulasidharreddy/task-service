/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.EventsStatementsCurrentExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.EventsStatementsCurrentNestingEventType;

import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsCurrent implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong threadId;
    private final ULong eventId;
    private final ULong endEventId;
    private final String eventName;
    private final String source;
    private final ULong timerStart;
    private final ULong timerEnd;
    private final ULong timerWait;
    private final ULong lockTime;
    private final String sqlText;
    private final String digest;
    private final String digestText;
    private final String currentSchema;
    private final String objectType;
    private final String objectSchema;
    private final String objectName;
    private final ULong objectInstanceBegin;
    private final Integer mysqlErrno;
    private final String returnedSqlstate;
    private final String messageText;
    private final ULong errors;
    private final ULong warnings;
    private final ULong rowsAffected;
    private final ULong rowsSent;
    private final ULong rowsExamined;
    private final ULong createdTmpDiskTables;
    private final ULong createdTmpTables;
    private final ULong selectFullJoin;
    private final ULong selectFullRangeJoin;
    private final ULong selectRange;
    private final ULong selectRangeCheck;
    private final ULong selectScan;
    private final ULong sortMergePasses;
    private final ULong sortRange;
    private final ULong sortRows;
    private final ULong sortScan;
    private final ULong noIndexUsed;
    private final ULong noGoodIndexUsed;
    private final ULong nestingEventId;
    private final EventsStatementsCurrentNestingEventType nestingEventType;
    private final Integer nestingEventLevel;
    private final ULong statementId;
    private final ULong cpuTime;
    private final ULong maxControlledMemory;
    private final ULong maxTotalMemory;
    private final EventsStatementsCurrentExecutionEngine executionEngine;

    public EventsStatementsCurrent(EventsStatementsCurrent value) {
        this.threadId = value.threadId;
        this.eventId = value.eventId;
        this.endEventId = value.endEventId;
        this.eventName = value.eventName;
        this.source = value.source;
        this.timerStart = value.timerStart;
        this.timerEnd = value.timerEnd;
        this.timerWait = value.timerWait;
        this.lockTime = value.lockTime;
        this.sqlText = value.sqlText;
        this.digest = value.digest;
        this.digestText = value.digestText;
        this.currentSchema = value.currentSchema;
        this.objectType = value.objectType;
        this.objectSchema = value.objectSchema;
        this.objectName = value.objectName;
        this.objectInstanceBegin = value.objectInstanceBegin;
        this.mysqlErrno = value.mysqlErrno;
        this.returnedSqlstate = value.returnedSqlstate;
        this.messageText = value.messageText;
        this.errors = value.errors;
        this.warnings = value.warnings;
        this.rowsAffected = value.rowsAffected;
        this.rowsSent = value.rowsSent;
        this.rowsExamined = value.rowsExamined;
        this.createdTmpDiskTables = value.createdTmpDiskTables;
        this.createdTmpTables = value.createdTmpTables;
        this.selectFullJoin = value.selectFullJoin;
        this.selectFullRangeJoin = value.selectFullRangeJoin;
        this.selectRange = value.selectRange;
        this.selectRangeCheck = value.selectRangeCheck;
        this.selectScan = value.selectScan;
        this.sortMergePasses = value.sortMergePasses;
        this.sortRange = value.sortRange;
        this.sortRows = value.sortRows;
        this.sortScan = value.sortScan;
        this.noIndexUsed = value.noIndexUsed;
        this.noGoodIndexUsed = value.noGoodIndexUsed;
        this.nestingEventId = value.nestingEventId;
        this.nestingEventType = value.nestingEventType;
        this.nestingEventLevel = value.nestingEventLevel;
        this.statementId = value.statementId;
        this.cpuTime = value.cpuTime;
        this.maxControlledMemory = value.maxControlledMemory;
        this.maxTotalMemory = value.maxTotalMemory;
        this.executionEngine = value.executionEngine;
    }

    public EventsStatementsCurrent(
        ULong threadId,
        ULong eventId,
        ULong endEventId,
        String eventName,
        String source,
        ULong timerStart,
        ULong timerEnd,
        ULong timerWait,
        ULong lockTime,
        String sqlText,
        String digest,
        String digestText,
        String currentSchema,
        String objectType,
        String objectSchema,
        String objectName,
        ULong objectInstanceBegin,
        Integer mysqlErrno,
        String returnedSqlstate,
        String messageText,
        ULong errors,
        ULong warnings,
        ULong rowsAffected,
        ULong rowsSent,
        ULong rowsExamined,
        ULong createdTmpDiskTables,
        ULong createdTmpTables,
        ULong selectFullJoin,
        ULong selectFullRangeJoin,
        ULong selectRange,
        ULong selectRangeCheck,
        ULong selectScan,
        ULong sortMergePasses,
        ULong sortRange,
        ULong sortRows,
        ULong sortScan,
        ULong noIndexUsed,
        ULong noGoodIndexUsed,
        ULong nestingEventId,
        EventsStatementsCurrentNestingEventType nestingEventType,
        Integer nestingEventLevel,
        ULong statementId,
        ULong cpuTime,
        ULong maxControlledMemory,
        ULong maxTotalMemory,
        EventsStatementsCurrentExecutionEngine executionEngine
    ) {
        this.threadId = threadId;
        this.eventId = eventId;
        this.endEventId = endEventId;
        this.eventName = eventName;
        this.source = source;
        this.timerStart = timerStart;
        this.timerEnd = timerEnd;
        this.timerWait = timerWait;
        this.lockTime = lockTime;
        this.sqlText = sqlText;
        this.digest = digest;
        this.digestText = digestText;
        this.currentSchema = currentSchema;
        this.objectType = objectType;
        this.objectSchema = objectSchema;
        this.objectName = objectName;
        this.objectInstanceBegin = objectInstanceBegin;
        this.mysqlErrno = mysqlErrno;
        this.returnedSqlstate = returnedSqlstate;
        this.messageText = messageText;
        this.errors = errors;
        this.warnings = warnings;
        this.rowsAffected = rowsAffected;
        this.rowsSent = rowsSent;
        this.rowsExamined = rowsExamined;
        this.createdTmpDiskTables = createdTmpDiskTables;
        this.createdTmpTables = createdTmpTables;
        this.selectFullJoin = selectFullJoin;
        this.selectFullRangeJoin = selectFullRangeJoin;
        this.selectRange = selectRange;
        this.selectRangeCheck = selectRangeCheck;
        this.selectScan = selectScan;
        this.sortMergePasses = sortMergePasses;
        this.sortRange = sortRange;
        this.sortRows = sortRows;
        this.sortScan = sortScan;
        this.noIndexUsed = noIndexUsed;
        this.noGoodIndexUsed = noGoodIndexUsed;
        this.nestingEventId = nestingEventId;
        this.nestingEventType = nestingEventType;
        this.nestingEventLevel = nestingEventLevel;
        this.statementId = statementId;
        this.cpuTime = cpuTime;
        this.maxControlledMemory = maxControlledMemory;
        this.maxTotalMemory = maxTotalMemory;
        this.executionEngine = executionEngine;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EVENT_ID</code>.
     */
    public ULong getEventId() {
        return this.eventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.END_EVENT_ID</code>.
     */
    public ULong getEndEventId() {
        return this.endEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EVENT_NAME</code>.
     */
    public String getEventName() {
        return this.eventName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SOURCE</code>.
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_START</code>.
     */
    public ULong getTimerStart() {
        return this.timerStart;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_END</code>.
     */
    public ULong getTimerEnd() {
        return this.timerEnd;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_WAIT</code>.
     */
    public ULong getTimerWait() {
        return this.timerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.LOCK_TIME</code>.
     */
    public ULong getLockTime() {
        return this.lockTime;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SQL_TEXT</code>.
     */
    public String getSqlText() {
        return this.sqlText;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.DIGEST</code>.
     */
    public String getDigest() {
        return this.digest;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.DIGEST_TEXT</code>.
     */
    public String getDigestText() {
        return this.digestText;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CURRENT_SCHEMA</code>.
     */
    public String getCurrentSchema() {
        return this.currentSchema;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_TYPE</code>.
     */
    public String getObjectType() {
        return this.objectType;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return this.objectSchema;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return this.objectName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return this.objectInstanceBegin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MYSQL_ERRNO</code>.
     */
    public Integer getMysqlErrno() {
        return this.mysqlErrno;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.RETURNED_SQLSTATE</code>.
     */
    public String getReturnedSqlstate() {
        return this.returnedSqlstate;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MESSAGE_TEXT</code>.
     */
    public String getMessageText() {
        return this.messageText;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ERRORS</code>.
     */
    public ULong getErrors() {
        return this.errors;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.WARNINGS</code>.
     */
    public ULong getWarnings() {
        return this.warnings;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_AFFECTED</code>.
     */
    public ULong getRowsAffected() {
        return this.rowsAffected;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_SENT</code>.
     */
    public ULong getRowsSent() {
        return this.rowsSent;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_EXAMINED</code>.
     */
    public ULong getRowsExamined() {
        return this.rowsExamined;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_DISK_TABLES</code>.
     */
    public ULong getCreatedTmpDiskTables() {
        return this.createdTmpDiskTables;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_TABLES</code>.
     */
    public ULong getCreatedTmpTables() {
        return this.createdTmpTables;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_JOIN</code>.
     */
    public ULong getSelectFullJoin() {
        return this.selectFullJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_RANGE_JOIN</code>.
     */
    public ULong getSelectFullRangeJoin() {
        return this.selectFullRangeJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE</code>.
     */
    public ULong getSelectRange() {
        return this.selectRange;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE_CHECK</code>.
     */
    public ULong getSelectRangeCheck() {
        return this.selectRangeCheck;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_SCAN</code>.
     */
    public ULong getSelectScan() {
        return this.selectScan;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_MERGE_PASSES</code>.
     */
    public ULong getSortMergePasses() {
        return this.sortMergePasses;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_RANGE</code>.
     */
    public ULong getSortRange() {
        return this.sortRange;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_ROWS</code>.
     */
    public ULong getSortRows() {
        return this.sortRows;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_SCAN</code>.
     */
    public ULong getSortScan() {
        return this.sortScan;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NO_INDEX_USED</code>.
     */
    public ULong getNoIndexUsed() {
        return this.noIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NO_GOOD_INDEX_USED</code>.
     */
    public ULong getNoGoodIndexUsed() {
        return this.noGoodIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_ID</code>.
     */
    public ULong getNestingEventId() {
        return this.nestingEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_TYPE</code>.
     */
    public EventsStatementsCurrentNestingEventType getNestingEventType() {
        return this.nestingEventType;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_LEVEL</code>.
     */
    public Integer getNestingEventLevel() {
        return this.nestingEventLevel;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.STATEMENT_ID</code>.
     */
    public ULong getStatementId() {
        return this.statementId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CPU_TIME</code>.
     */
    public ULong getCpuTime() {
        return this.cpuTime;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return this.maxControlledMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return this.maxTotalMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EXECUTION_ENGINE</code>.
     */
    public EventsStatementsCurrentExecutionEngine getExecutionEngine() {
        return this.executionEngine;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final EventsStatementsCurrent other = (EventsStatementsCurrent) obj;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.eventId == null) {
            if (other.eventId != null)
                return false;
        }
        else if (!this.eventId.equals(other.eventId))
            return false;
        if (this.endEventId == null) {
            if (other.endEventId != null)
                return false;
        }
        else if (!this.endEventId.equals(other.endEventId))
            return false;
        if (this.eventName == null) {
            if (other.eventName != null)
                return false;
        }
        else if (!this.eventName.equals(other.eventName))
            return false;
        if (this.source == null) {
            if (other.source != null)
                return false;
        }
        else if (!this.source.equals(other.source))
            return false;
        if (this.timerStart == null) {
            if (other.timerStart != null)
                return false;
        }
        else if (!this.timerStart.equals(other.timerStart))
            return false;
        if (this.timerEnd == null) {
            if (other.timerEnd != null)
                return false;
        }
        else if (!this.timerEnd.equals(other.timerEnd))
            return false;
        if (this.timerWait == null) {
            if (other.timerWait != null)
                return false;
        }
        else if (!this.timerWait.equals(other.timerWait))
            return false;
        if (this.lockTime == null) {
            if (other.lockTime != null)
                return false;
        }
        else if (!this.lockTime.equals(other.lockTime))
            return false;
        if (this.sqlText == null) {
            if (other.sqlText != null)
                return false;
        }
        else if (!this.sqlText.equals(other.sqlText))
            return false;
        if (this.digest == null) {
            if (other.digest != null)
                return false;
        }
        else if (!this.digest.equals(other.digest))
            return false;
        if (this.digestText == null) {
            if (other.digestText != null)
                return false;
        }
        else if (!this.digestText.equals(other.digestText))
            return false;
        if (this.currentSchema == null) {
            if (other.currentSchema != null)
                return false;
        }
        else if (!this.currentSchema.equals(other.currentSchema))
            return false;
        if (this.objectType == null) {
            if (other.objectType != null)
                return false;
        }
        else if (!this.objectType.equals(other.objectType))
            return false;
        if (this.objectSchema == null) {
            if (other.objectSchema != null)
                return false;
        }
        else if (!this.objectSchema.equals(other.objectSchema))
            return false;
        if (this.objectName == null) {
            if (other.objectName != null)
                return false;
        }
        else if (!this.objectName.equals(other.objectName))
            return false;
        if (this.objectInstanceBegin == null) {
            if (other.objectInstanceBegin != null)
                return false;
        }
        else if (!this.objectInstanceBegin.equals(other.objectInstanceBegin))
            return false;
        if (this.mysqlErrno == null) {
            if (other.mysqlErrno != null)
                return false;
        }
        else if (!this.mysqlErrno.equals(other.mysqlErrno))
            return false;
        if (this.returnedSqlstate == null) {
            if (other.returnedSqlstate != null)
                return false;
        }
        else if (!this.returnedSqlstate.equals(other.returnedSqlstate))
            return false;
        if (this.messageText == null) {
            if (other.messageText != null)
                return false;
        }
        else if (!this.messageText.equals(other.messageText))
            return false;
        if (this.errors == null) {
            if (other.errors != null)
                return false;
        }
        else if (!this.errors.equals(other.errors))
            return false;
        if (this.warnings == null) {
            if (other.warnings != null)
                return false;
        }
        else if (!this.warnings.equals(other.warnings))
            return false;
        if (this.rowsAffected == null) {
            if (other.rowsAffected != null)
                return false;
        }
        else if (!this.rowsAffected.equals(other.rowsAffected))
            return false;
        if (this.rowsSent == null) {
            if (other.rowsSent != null)
                return false;
        }
        else if (!this.rowsSent.equals(other.rowsSent))
            return false;
        if (this.rowsExamined == null) {
            if (other.rowsExamined != null)
                return false;
        }
        else if (!this.rowsExamined.equals(other.rowsExamined))
            return false;
        if (this.createdTmpDiskTables == null) {
            if (other.createdTmpDiskTables != null)
                return false;
        }
        else if (!this.createdTmpDiskTables.equals(other.createdTmpDiskTables))
            return false;
        if (this.createdTmpTables == null) {
            if (other.createdTmpTables != null)
                return false;
        }
        else if (!this.createdTmpTables.equals(other.createdTmpTables))
            return false;
        if (this.selectFullJoin == null) {
            if (other.selectFullJoin != null)
                return false;
        }
        else if (!this.selectFullJoin.equals(other.selectFullJoin))
            return false;
        if (this.selectFullRangeJoin == null) {
            if (other.selectFullRangeJoin != null)
                return false;
        }
        else if (!this.selectFullRangeJoin.equals(other.selectFullRangeJoin))
            return false;
        if (this.selectRange == null) {
            if (other.selectRange != null)
                return false;
        }
        else if (!this.selectRange.equals(other.selectRange))
            return false;
        if (this.selectRangeCheck == null) {
            if (other.selectRangeCheck != null)
                return false;
        }
        else if (!this.selectRangeCheck.equals(other.selectRangeCheck))
            return false;
        if (this.selectScan == null) {
            if (other.selectScan != null)
                return false;
        }
        else if (!this.selectScan.equals(other.selectScan))
            return false;
        if (this.sortMergePasses == null) {
            if (other.sortMergePasses != null)
                return false;
        }
        else if (!this.sortMergePasses.equals(other.sortMergePasses))
            return false;
        if (this.sortRange == null) {
            if (other.sortRange != null)
                return false;
        }
        else if (!this.sortRange.equals(other.sortRange))
            return false;
        if (this.sortRows == null) {
            if (other.sortRows != null)
                return false;
        }
        else if (!this.sortRows.equals(other.sortRows))
            return false;
        if (this.sortScan == null) {
            if (other.sortScan != null)
                return false;
        }
        else if (!this.sortScan.equals(other.sortScan))
            return false;
        if (this.noIndexUsed == null) {
            if (other.noIndexUsed != null)
                return false;
        }
        else if (!this.noIndexUsed.equals(other.noIndexUsed))
            return false;
        if (this.noGoodIndexUsed == null) {
            if (other.noGoodIndexUsed != null)
                return false;
        }
        else if (!this.noGoodIndexUsed.equals(other.noGoodIndexUsed))
            return false;
        if (this.nestingEventId == null) {
            if (other.nestingEventId != null)
                return false;
        }
        else if (!this.nestingEventId.equals(other.nestingEventId))
            return false;
        if (this.nestingEventType == null) {
            if (other.nestingEventType != null)
                return false;
        }
        else if (!this.nestingEventType.equals(other.nestingEventType))
            return false;
        if (this.nestingEventLevel == null) {
            if (other.nestingEventLevel != null)
                return false;
        }
        else if (!this.nestingEventLevel.equals(other.nestingEventLevel))
            return false;
        if (this.statementId == null) {
            if (other.statementId != null)
                return false;
        }
        else if (!this.statementId.equals(other.statementId))
            return false;
        if (this.cpuTime == null) {
            if (other.cpuTime != null)
                return false;
        }
        else if (!this.cpuTime.equals(other.cpuTime))
            return false;
        if (this.maxControlledMemory == null) {
            if (other.maxControlledMemory != null)
                return false;
        }
        else if (!this.maxControlledMemory.equals(other.maxControlledMemory))
            return false;
        if (this.maxTotalMemory == null) {
            if (other.maxTotalMemory != null)
                return false;
        }
        else if (!this.maxTotalMemory.equals(other.maxTotalMemory))
            return false;
        if (this.executionEngine == null) {
            if (other.executionEngine != null)
                return false;
        }
        else if (!this.executionEngine.equals(other.executionEngine))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.eventId == null) ? 0 : this.eventId.hashCode());
        result = prime * result + ((this.endEventId == null) ? 0 : this.endEventId.hashCode());
        result = prime * result + ((this.eventName == null) ? 0 : this.eventName.hashCode());
        result = prime * result + ((this.source == null) ? 0 : this.source.hashCode());
        result = prime * result + ((this.timerStart == null) ? 0 : this.timerStart.hashCode());
        result = prime * result + ((this.timerEnd == null) ? 0 : this.timerEnd.hashCode());
        result = prime * result + ((this.timerWait == null) ? 0 : this.timerWait.hashCode());
        result = prime * result + ((this.lockTime == null) ? 0 : this.lockTime.hashCode());
        result = prime * result + ((this.sqlText == null) ? 0 : this.sqlText.hashCode());
        result = prime * result + ((this.digest == null) ? 0 : this.digest.hashCode());
        result = prime * result + ((this.digestText == null) ? 0 : this.digestText.hashCode());
        result = prime * result + ((this.currentSchema == null) ? 0 : this.currentSchema.hashCode());
        result = prime * result + ((this.objectType == null) ? 0 : this.objectType.hashCode());
        result = prime * result + ((this.objectSchema == null) ? 0 : this.objectSchema.hashCode());
        result = prime * result + ((this.objectName == null) ? 0 : this.objectName.hashCode());
        result = prime * result + ((this.objectInstanceBegin == null) ? 0 : this.objectInstanceBegin.hashCode());
        result = prime * result + ((this.mysqlErrno == null) ? 0 : this.mysqlErrno.hashCode());
        result = prime * result + ((this.returnedSqlstate == null) ? 0 : this.returnedSqlstate.hashCode());
        result = prime * result + ((this.messageText == null) ? 0 : this.messageText.hashCode());
        result = prime * result + ((this.errors == null) ? 0 : this.errors.hashCode());
        result = prime * result + ((this.warnings == null) ? 0 : this.warnings.hashCode());
        result = prime * result + ((this.rowsAffected == null) ? 0 : this.rowsAffected.hashCode());
        result = prime * result + ((this.rowsSent == null) ? 0 : this.rowsSent.hashCode());
        result = prime * result + ((this.rowsExamined == null) ? 0 : this.rowsExamined.hashCode());
        result = prime * result + ((this.createdTmpDiskTables == null) ? 0 : this.createdTmpDiskTables.hashCode());
        result = prime * result + ((this.createdTmpTables == null) ? 0 : this.createdTmpTables.hashCode());
        result = prime * result + ((this.selectFullJoin == null) ? 0 : this.selectFullJoin.hashCode());
        result = prime * result + ((this.selectFullRangeJoin == null) ? 0 : this.selectFullRangeJoin.hashCode());
        result = prime * result + ((this.selectRange == null) ? 0 : this.selectRange.hashCode());
        result = prime * result + ((this.selectRangeCheck == null) ? 0 : this.selectRangeCheck.hashCode());
        result = prime * result + ((this.selectScan == null) ? 0 : this.selectScan.hashCode());
        result = prime * result + ((this.sortMergePasses == null) ? 0 : this.sortMergePasses.hashCode());
        result = prime * result + ((this.sortRange == null) ? 0 : this.sortRange.hashCode());
        result = prime * result + ((this.sortRows == null) ? 0 : this.sortRows.hashCode());
        result = prime * result + ((this.sortScan == null) ? 0 : this.sortScan.hashCode());
        result = prime * result + ((this.noIndexUsed == null) ? 0 : this.noIndexUsed.hashCode());
        result = prime * result + ((this.noGoodIndexUsed == null) ? 0 : this.noGoodIndexUsed.hashCode());
        result = prime * result + ((this.nestingEventId == null) ? 0 : this.nestingEventId.hashCode());
        result = prime * result + ((this.nestingEventType == null) ? 0 : this.nestingEventType.hashCode());
        result = prime * result + ((this.nestingEventLevel == null) ? 0 : this.nestingEventLevel.hashCode());
        result = prime * result + ((this.statementId == null) ? 0 : this.statementId.hashCode());
        result = prime * result + ((this.cpuTime == null) ? 0 : this.cpuTime.hashCode());
        result = prime * result + ((this.maxControlledMemory == null) ? 0 : this.maxControlledMemory.hashCode());
        result = prime * result + ((this.maxTotalMemory == null) ? 0 : this.maxTotalMemory.hashCode());
        result = prime * result + ((this.executionEngine == null) ? 0 : this.executionEngine.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EventsStatementsCurrent (");

        sb.append(threadId);
        sb.append(", ").append(eventId);
        sb.append(", ").append(endEventId);
        sb.append(", ").append(eventName);
        sb.append(", ").append(source);
        sb.append(", ").append(timerStart);
        sb.append(", ").append(timerEnd);
        sb.append(", ").append(timerWait);
        sb.append(", ").append(lockTime);
        sb.append(", ").append(sqlText);
        sb.append(", ").append(digest);
        sb.append(", ").append(digestText);
        sb.append(", ").append(currentSchema);
        sb.append(", ").append(objectType);
        sb.append(", ").append(objectSchema);
        sb.append(", ").append(objectName);
        sb.append(", ").append(objectInstanceBegin);
        sb.append(", ").append(mysqlErrno);
        sb.append(", ").append(returnedSqlstate);
        sb.append(", ").append(messageText);
        sb.append(", ").append(errors);
        sb.append(", ").append(warnings);
        sb.append(", ").append(rowsAffected);
        sb.append(", ").append(rowsSent);
        sb.append(", ").append(rowsExamined);
        sb.append(", ").append(createdTmpDiskTables);
        sb.append(", ").append(createdTmpTables);
        sb.append(", ").append(selectFullJoin);
        sb.append(", ").append(selectFullRangeJoin);
        sb.append(", ").append(selectRange);
        sb.append(", ").append(selectRangeCheck);
        sb.append(", ").append(selectScan);
        sb.append(", ").append(sortMergePasses);
        sb.append(", ").append(sortRange);
        sb.append(", ").append(sortRows);
        sb.append(", ").append(sortScan);
        sb.append(", ").append(noIndexUsed);
        sb.append(", ").append(noGoodIndexUsed);
        sb.append(", ").append(nestingEventId);
        sb.append(", ").append(nestingEventType);
        sb.append(", ").append(nestingEventLevel);
        sb.append(", ").append(statementId);
        sb.append(", ").append(cpuTime);
        sb.append(", ").append(maxControlledMemory);
        sb.append(", ").append(maxTotalMemory);
        sb.append(", ").append(executionEngine);

        sb.append(")");
        return sb.toString();
    }
}
