/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables;


import com.neurasim.jooq.performance_schema.PerformanceSchema;
import com.neurasim.jooq.performance_schema.tables.records.GlobalVariableAttributesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GlobalVariableAttributes extends TableImpl<GlobalVariableAttributesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.global_variable_attributes</code>
     */
    public static final GlobalVariableAttributes GLOBAL_VARIABLE_ATTRIBUTES = new GlobalVariableAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GlobalVariableAttributesRecord> getRecordType() {
        return GlobalVariableAttributesRecord.class;
    }

    /**
     * The column
     * <code>performance_schema.global_variable_attributes.VARIABLE_NAME</code>.
     */
    public final TableField<GlobalVariableAttributesRecord, String> VARIABLE_NAME = createField(DSL.name("VARIABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.global_variable_attributes.ATTR_NAME</code>.
     */
    public final TableField<GlobalVariableAttributesRecord, String> ATTR_NAME = createField(DSL.name("ATTR_NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.global_variable_attributes.ATTR_VALUE</code>.
     */
    public final TableField<GlobalVariableAttributesRecord, String> ATTR_VALUE = createField(DSL.name("ATTR_VALUE"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    private GlobalVariableAttributes(Name alias, Table<GlobalVariableAttributesRecord> aliased) {
        this(alias, aliased, null);
    }

    private GlobalVariableAttributes(Name alias, Table<GlobalVariableAttributesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>performance_schema.global_variable_attributes</code> table
     * reference
     */
    public GlobalVariableAttributes(String alias) {
        this(DSL.name(alias), GLOBAL_VARIABLE_ATTRIBUTES);
    }

    /**
     * Create an aliased
     * <code>performance_schema.global_variable_attributes</code> table
     * reference
     */
    public GlobalVariableAttributes(Name alias) {
        this(alias, GLOBAL_VARIABLE_ATTRIBUTES);
    }

    /**
     * Create a <code>performance_schema.global_variable_attributes</code> table
     * reference
     */
    public GlobalVariableAttributes() {
        this(DSL.name("global_variable_attributes"), null);
    }

    public <O extends Record> GlobalVariableAttributes(Table<O> child, ForeignKey<O, GlobalVariableAttributesRecord> key) {
        super(child, key, GLOBAL_VARIABLE_ATTRIBUTES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public GlobalVariableAttributes as(String alias) {
        return new GlobalVariableAttributes(DSL.name(alias), this);
    }

    @Override
    public GlobalVariableAttributes as(Name alias) {
        return new GlobalVariableAttributes(alias, this);
    }

    @Override
    public GlobalVariableAttributes as(Table<?> alias) {
        return new GlobalVariableAttributes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalVariableAttributes rename(String name) {
        return new GlobalVariableAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalVariableAttributes rename(Name name) {
        return new GlobalVariableAttributes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalVariableAttributes rename(Table<?> name) {
        return new GlobalVariableAttributes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
