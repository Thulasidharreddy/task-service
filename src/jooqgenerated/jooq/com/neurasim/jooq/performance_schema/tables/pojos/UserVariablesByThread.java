/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserVariablesByThread implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong threadId;
    private final String variableName;
    private final byte[] variableValue;

    public UserVariablesByThread(UserVariablesByThread value) {
        this.threadId = value.threadId;
        this.variableName = value.variableName;
        this.variableValue = value.variableValue;
    }

    public UserVariablesByThread(
        ULong threadId,
        String variableName,
        byte[] variableValue
    ) {
        this.threadId = threadId;
        this.variableName = variableName;
        this.variableValue = variableValue;
    }

    /**
     * Getter for
     * <code>performance_schema.user_variables_by_thread.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for
     * <code>performance_schema.user_variables_by_thread.VARIABLE_NAME</code>.
     */
    public String getVariableName() {
        return this.variableName;
    }

    /**
     * Getter for
     * <code>performance_schema.user_variables_by_thread.VARIABLE_VALUE</code>.
     */
    public byte[] getVariableValue() {
        return this.variableValue;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserVariablesByThread other = (UserVariablesByThread) obj;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.variableName == null) {
            if (other.variableName != null)
                return false;
        }
        else if (!this.variableName.equals(other.variableName))
            return false;
        if (this.variableValue == null) {
            if (other.variableValue != null)
                return false;
        }
        else if (!Arrays.equals(this.variableValue, other.variableValue))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.variableName == null) ? 0 : this.variableName.hashCode());
        result = prime * result + ((this.variableValue == null) ? 0 : Arrays.hashCode(this.variableValue));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserVariablesByThread (");

        sb.append(threadId);
        sb.append(", ").append(variableName);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }
}
