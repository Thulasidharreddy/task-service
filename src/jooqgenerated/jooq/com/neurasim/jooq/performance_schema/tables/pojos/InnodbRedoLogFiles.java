/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbRedoLogFiles implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long fileId;
    private final String fileName;
    private final Long startLsn;
    private final Long endLsn;
    private final Long sizeInBytes;
    private final Byte isFull;
    private final Integer consumerLevel;

    public InnodbRedoLogFiles(InnodbRedoLogFiles value) {
        this.fileId = value.fileId;
        this.fileName = value.fileName;
        this.startLsn = value.startLsn;
        this.endLsn = value.endLsn;
        this.sizeInBytes = value.sizeInBytes;
        this.isFull = value.isFull;
        this.consumerLevel = value.consumerLevel;
    }

    public InnodbRedoLogFiles(
        Long fileId,
        String fileName,
        Long startLsn,
        Long endLsn,
        Long sizeInBytes,
        Byte isFull,
        Integer consumerLevel
    ) {
        this.fileId = fileId;
        this.fileName = fileName;
        this.startLsn = startLsn;
        this.endLsn = endLsn;
        this.sizeInBytes = sizeInBytes;
        this.isFull = isFull;
        this.consumerLevel = consumerLevel;
    }

    /**
     * Getter for <code>performance_schema.innodb_redo_log_files.FILE_ID</code>.
     * Id of the file.
     */
    public Long getFileId() {
        return this.fileId;
    }

    /**
     * Getter for
     * <code>performance_schema.innodb_redo_log_files.FILE_NAME</code>. Path to
     * the file.
     */
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Getter for
     * <code>performance_schema.innodb_redo_log_files.START_LSN</code>. LSN of
     * the first block in the file.
     */
    public Long getStartLsn() {
        return this.startLsn;
    }

    /**
     * Getter for <code>performance_schema.innodb_redo_log_files.END_LSN</code>.
     * LSN after the last block in the file.
     */
    public Long getEndLsn() {
        return this.endLsn;
    }

    /**
     * Getter for
     * <code>performance_schema.innodb_redo_log_files.SIZE_IN_BYTES</code>. Size
     * of the file (in bytes).
     */
    public Long getSizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * Getter for <code>performance_schema.innodb_redo_log_files.IS_FULL</code>.
     * 1 iff file has no free space inside.
     */
    public Byte getIsFull() {
        return this.isFull;
    }

    /**
     * Getter for
     * <code>performance_schema.innodb_redo_log_files.CONSUMER_LEVEL</code>. All
     * redo log consumers registered on smaller levels than this value, have
     * already consumed this file.
     */
    public Integer getConsumerLevel() {
        return this.consumerLevel;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final InnodbRedoLogFiles other = (InnodbRedoLogFiles) obj;
        if (this.fileId == null) {
            if (other.fileId != null)
                return false;
        }
        else if (!this.fileId.equals(other.fileId))
            return false;
        if (this.fileName == null) {
            if (other.fileName != null)
                return false;
        }
        else if (!this.fileName.equals(other.fileName))
            return false;
        if (this.startLsn == null) {
            if (other.startLsn != null)
                return false;
        }
        else if (!this.startLsn.equals(other.startLsn))
            return false;
        if (this.endLsn == null) {
            if (other.endLsn != null)
                return false;
        }
        else if (!this.endLsn.equals(other.endLsn))
            return false;
        if (this.sizeInBytes == null) {
            if (other.sizeInBytes != null)
                return false;
        }
        else if (!this.sizeInBytes.equals(other.sizeInBytes))
            return false;
        if (this.isFull == null) {
            if (other.isFull != null)
                return false;
        }
        else if (!this.isFull.equals(other.isFull))
            return false;
        if (this.consumerLevel == null) {
            if (other.consumerLevel != null)
                return false;
        }
        else if (!this.consumerLevel.equals(other.consumerLevel))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.fileId == null) ? 0 : this.fileId.hashCode());
        result = prime * result + ((this.fileName == null) ? 0 : this.fileName.hashCode());
        result = prime * result + ((this.startLsn == null) ? 0 : this.startLsn.hashCode());
        result = prime * result + ((this.endLsn == null) ? 0 : this.endLsn.hashCode());
        result = prime * result + ((this.sizeInBytes == null) ? 0 : this.sizeInBytes.hashCode());
        result = prime * result + ((this.isFull == null) ? 0 : this.isFull.hashCode());
        result = prime * result + ((this.consumerLevel == null) ? 0 : this.consumerLevel.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbRedoLogFiles (");

        sb.append(fileId);
        sb.append(", ").append(fileName);
        sb.append(", ").append(startLsn);
        sb.append(", ").append(endLsn);
        sb.append(", ").append(sizeInBytes);
        sb.append(", ").append(isFull);
        sb.append(", ").append(consumerLevel);

        sb.append(")");
        return sb.toString();
    }
}
