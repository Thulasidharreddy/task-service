/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.PreparedStatementsInstancesExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.PreparedStatementsInstancesOwnerObjectType;

import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreparedStatementsInstances implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong objectInstanceBegin;
    private final ULong statementId;
    private final String statementName;
    private final String sqlText;
    private final ULong ownerThreadId;
    private final ULong ownerEventId;
    private final PreparedStatementsInstancesOwnerObjectType ownerObjectType;
    private final String ownerObjectSchema;
    private final String ownerObjectName;
    private final PreparedStatementsInstancesExecutionEngine executionEngine;
    private final ULong timerPrepare;
    private final ULong countReprepare;
    private final ULong countExecute;
    private final ULong sumTimerExecute;
    private final ULong minTimerExecute;
    private final ULong avgTimerExecute;
    private final ULong maxTimerExecute;
    private final ULong sumLockTime;
    private final ULong sumErrors;
    private final ULong sumWarnings;
    private final ULong sumRowsAffected;
    private final ULong sumRowsSent;
    private final ULong sumRowsExamined;
    private final ULong sumCreatedTmpDiskTables;
    private final ULong sumCreatedTmpTables;
    private final ULong sumSelectFullJoin;
    private final ULong sumSelectFullRangeJoin;
    private final ULong sumSelectRange;
    private final ULong sumSelectRangeCheck;
    private final ULong sumSelectScan;
    private final ULong sumSortMergePasses;
    private final ULong sumSortRange;
    private final ULong sumSortRows;
    private final ULong sumSortScan;
    private final ULong sumNoIndexUsed;
    private final ULong sumNoGoodIndexUsed;
    private final ULong sumCpuTime;
    private final ULong maxControlledMemory;
    private final ULong maxTotalMemory;
    private final ULong countSecondary;

    public PreparedStatementsInstances(PreparedStatementsInstances value) {
        this.objectInstanceBegin = value.objectInstanceBegin;
        this.statementId = value.statementId;
        this.statementName = value.statementName;
        this.sqlText = value.sqlText;
        this.ownerThreadId = value.ownerThreadId;
        this.ownerEventId = value.ownerEventId;
        this.ownerObjectType = value.ownerObjectType;
        this.ownerObjectSchema = value.ownerObjectSchema;
        this.ownerObjectName = value.ownerObjectName;
        this.executionEngine = value.executionEngine;
        this.timerPrepare = value.timerPrepare;
        this.countReprepare = value.countReprepare;
        this.countExecute = value.countExecute;
        this.sumTimerExecute = value.sumTimerExecute;
        this.minTimerExecute = value.minTimerExecute;
        this.avgTimerExecute = value.avgTimerExecute;
        this.maxTimerExecute = value.maxTimerExecute;
        this.sumLockTime = value.sumLockTime;
        this.sumErrors = value.sumErrors;
        this.sumWarnings = value.sumWarnings;
        this.sumRowsAffected = value.sumRowsAffected;
        this.sumRowsSent = value.sumRowsSent;
        this.sumRowsExamined = value.sumRowsExamined;
        this.sumCreatedTmpDiskTables = value.sumCreatedTmpDiskTables;
        this.sumCreatedTmpTables = value.sumCreatedTmpTables;
        this.sumSelectFullJoin = value.sumSelectFullJoin;
        this.sumSelectFullRangeJoin = value.sumSelectFullRangeJoin;
        this.sumSelectRange = value.sumSelectRange;
        this.sumSelectRangeCheck = value.sumSelectRangeCheck;
        this.sumSelectScan = value.sumSelectScan;
        this.sumSortMergePasses = value.sumSortMergePasses;
        this.sumSortRange = value.sumSortRange;
        this.sumSortRows = value.sumSortRows;
        this.sumSortScan = value.sumSortScan;
        this.sumNoIndexUsed = value.sumNoIndexUsed;
        this.sumNoGoodIndexUsed = value.sumNoGoodIndexUsed;
        this.sumCpuTime = value.sumCpuTime;
        this.maxControlledMemory = value.maxControlledMemory;
        this.maxTotalMemory = value.maxTotalMemory;
        this.countSecondary = value.countSecondary;
    }

    public PreparedStatementsInstances(
        ULong objectInstanceBegin,
        ULong statementId,
        String statementName,
        String sqlText,
        ULong ownerThreadId,
        ULong ownerEventId,
        PreparedStatementsInstancesOwnerObjectType ownerObjectType,
        String ownerObjectSchema,
        String ownerObjectName,
        PreparedStatementsInstancesExecutionEngine executionEngine,
        ULong timerPrepare,
        ULong countReprepare,
        ULong countExecute,
        ULong sumTimerExecute,
        ULong minTimerExecute,
        ULong avgTimerExecute,
        ULong maxTimerExecute,
        ULong sumLockTime,
        ULong sumErrors,
        ULong sumWarnings,
        ULong sumRowsAffected,
        ULong sumRowsSent,
        ULong sumRowsExamined,
        ULong sumCreatedTmpDiskTables,
        ULong sumCreatedTmpTables,
        ULong sumSelectFullJoin,
        ULong sumSelectFullRangeJoin,
        ULong sumSelectRange,
        ULong sumSelectRangeCheck,
        ULong sumSelectScan,
        ULong sumSortMergePasses,
        ULong sumSortRange,
        ULong sumSortRows,
        ULong sumSortScan,
        ULong sumNoIndexUsed,
        ULong sumNoGoodIndexUsed,
        ULong sumCpuTime,
        ULong maxControlledMemory,
        ULong maxTotalMemory,
        ULong countSecondary
    ) {
        this.objectInstanceBegin = objectInstanceBegin;
        this.statementId = statementId;
        this.statementName = statementName;
        this.sqlText = sqlText;
        this.ownerThreadId = ownerThreadId;
        this.ownerEventId = ownerEventId;
        this.ownerObjectType = ownerObjectType;
        this.ownerObjectSchema = ownerObjectSchema;
        this.ownerObjectName = ownerObjectName;
        this.executionEngine = executionEngine;
        this.timerPrepare = timerPrepare;
        this.countReprepare = countReprepare;
        this.countExecute = countExecute;
        this.sumTimerExecute = sumTimerExecute;
        this.minTimerExecute = minTimerExecute;
        this.avgTimerExecute = avgTimerExecute;
        this.maxTimerExecute = maxTimerExecute;
        this.sumLockTime = sumLockTime;
        this.sumErrors = sumErrors;
        this.sumWarnings = sumWarnings;
        this.sumRowsAffected = sumRowsAffected;
        this.sumRowsSent = sumRowsSent;
        this.sumRowsExamined = sumRowsExamined;
        this.sumCreatedTmpDiskTables = sumCreatedTmpDiskTables;
        this.sumCreatedTmpTables = sumCreatedTmpTables;
        this.sumSelectFullJoin = sumSelectFullJoin;
        this.sumSelectFullRangeJoin = sumSelectFullRangeJoin;
        this.sumSelectRange = sumSelectRange;
        this.sumSelectRangeCheck = sumSelectRangeCheck;
        this.sumSelectScan = sumSelectScan;
        this.sumSortMergePasses = sumSortMergePasses;
        this.sumSortRange = sumSortRange;
        this.sumSortRows = sumSortRows;
        this.sumSortScan = sumSortScan;
        this.sumNoIndexUsed = sumNoIndexUsed;
        this.sumNoGoodIndexUsed = sumNoGoodIndexUsed;
        this.sumCpuTime = sumCpuTime;
        this.maxControlledMemory = maxControlledMemory;
        this.maxTotalMemory = maxTotalMemory;
        this.countSecondary = countSecondary;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return this.objectInstanceBegin;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.STATEMENT_ID</code>.
     */
    public ULong getStatementId() {
        return this.statementId;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.STATEMENT_NAME</code>.
     */
    public String getStatementName() {
        return this.statementName;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SQL_TEXT</code>.
     */
    public String getSqlText() {
        return this.sqlText;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OWNER_THREAD_ID</code>.
     */
    public ULong getOwnerThreadId() {
        return this.ownerThreadId;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OWNER_EVENT_ID</code>.
     */
    public ULong getOwnerEventId() {
        return this.ownerEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_TYPE</code>.
     */
    public PreparedStatementsInstancesOwnerObjectType getOwnerObjectType() {
        return this.ownerObjectType;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_SCHEMA</code>.
     */
    public String getOwnerObjectSchema() {
        return this.ownerObjectSchema;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.OWNER_OBJECT_NAME</code>.
     */
    public String getOwnerObjectName() {
        return this.ownerObjectName;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.EXECUTION_ENGINE</code>.
     */
    public PreparedStatementsInstancesExecutionEngine getExecutionEngine() {
        return this.executionEngine;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.TIMER_PREPARE</code>.
     */
    public ULong getTimerPrepare() {
        return this.timerPrepare;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.COUNT_REPREPARE</code>.
     */
    public ULong getCountReprepare() {
        return this.countReprepare;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.COUNT_EXECUTE</code>.
     */
    public ULong getCountExecute() {
        return this.countExecute;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_TIMER_EXECUTE</code>.
     */
    public ULong getSumTimerExecute() {
        return this.sumTimerExecute;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.MIN_TIMER_EXECUTE</code>.
     */
    public ULong getMinTimerExecute() {
        return this.minTimerExecute;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.AVG_TIMER_EXECUTE</code>.
     */
    public ULong getAvgTimerExecute() {
        return this.avgTimerExecute;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.MAX_TIMER_EXECUTE</code>.
     */
    public ULong getMaxTimerExecute() {
        return this.maxTimerExecute;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_LOCK_TIME</code>.
     */
    public ULong getSumLockTime() {
        return this.sumLockTime;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_ERRORS</code>.
     */
    public ULong getSumErrors() {
        return this.sumErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_WARNINGS</code>.
     */
    public ULong getSumWarnings() {
        return this.sumWarnings;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_AFFECTED</code>.
     */
    public ULong getSumRowsAffected() {
        return this.sumRowsAffected;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_SENT</code>.
     */
    public ULong getSumRowsSent() {
        return this.sumRowsSent;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_ROWS_EXAMINED</code>.
     */
    public ULong getSumRowsExamined() {
        return this.sumRowsExamined;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_CREATED_TMP_DISK_TABLES</code>.
     */
    public ULong getSumCreatedTmpDiskTables() {
        return this.sumCreatedTmpDiskTables;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_CREATED_TMP_TABLES</code>.
     */
    public ULong getSumCreatedTmpTables() {
        return this.sumCreatedTmpTables;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_FULL_JOIN</code>.
     */
    public ULong getSumSelectFullJoin() {
        return this.sumSelectFullJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_FULL_RANGE_JOIN</code>.
     */
    public ULong getSumSelectFullRangeJoin() {
        return this.sumSelectFullRangeJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_RANGE</code>.
     */
    public ULong getSumSelectRange() {
        return this.sumSelectRange;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_RANGE_CHECK</code>.
     */
    public ULong getSumSelectRangeCheck() {
        return this.sumSelectRangeCheck;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SELECT_SCAN</code>.
     */
    public ULong getSumSelectScan() {
        return this.sumSelectScan;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_MERGE_PASSES</code>.
     */
    public ULong getSumSortMergePasses() {
        return this.sumSortMergePasses;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_RANGE</code>.
     */
    public ULong getSumSortRange() {
        return this.sumSortRange;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_ROWS</code>.
     */
    public ULong getSumSortRows() {
        return this.sumSortRows;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_SORT_SCAN</code>.
     */
    public ULong getSumSortScan() {
        return this.sumSortScan;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_NO_INDEX_USED</code>.
     */
    public ULong getSumNoIndexUsed() {
        return this.sumNoIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_NO_GOOD_INDEX_USED</code>.
     */
    public ULong getSumNoGoodIndexUsed() {
        return this.sumNoGoodIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.SUM_CPU_TIME</code>.
     */
    public ULong getSumCpuTime() {
        return this.sumCpuTime;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return this.maxControlledMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return this.maxTotalMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.prepared_statements_instances.COUNT_SECONDARY</code>.
     */
    public ULong getCountSecondary() {
        return this.countSecondary;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PreparedStatementsInstances other = (PreparedStatementsInstances) obj;
        if (this.objectInstanceBegin == null) {
            if (other.objectInstanceBegin != null)
                return false;
        }
        else if (!this.objectInstanceBegin.equals(other.objectInstanceBegin))
            return false;
        if (this.statementId == null) {
            if (other.statementId != null)
                return false;
        }
        else if (!this.statementId.equals(other.statementId))
            return false;
        if (this.statementName == null) {
            if (other.statementName != null)
                return false;
        }
        else if (!this.statementName.equals(other.statementName))
            return false;
        if (this.sqlText == null) {
            if (other.sqlText != null)
                return false;
        }
        else if (!this.sqlText.equals(other.sqlText))
            return false;
        if (this.ownerThreadId == null) {
            if (other.ownerThreadId != null)
                return false;
        }
        else if (!this.ownerThreadId.equals(other.ownerThreadId))
            return false;
        if (this.ownerEventId == null) {
            if (other.ownerEventId != null)
                return false;
        }
        else if (!this.ownerEventId.equals(other.ownerEventId))
            return false;
        if (this.ownerObjectType == null) {
            if (other.ownerObjectType != null)
                return false;
        }
        else if (!this.ownerObjectType.equals(other.ownerObjectType))
            return false;
        if (this.ownerObjectSchema == null) {
            if (other.ownerObjectSchema != null)
                return false;
        }
        else if (!this.ownerObjectSchema.equals(other.ownerObjectSchema))
            return false;
        if (this.ownerObjectName == null) {
            if (other.ownerObjectName != null)
                return false;
        }
        else if (!this.ownerObjectName.equals(other.ownerObjectName))
            return false;
        if (this.executionEngine == null) {
            if (other.executionEngine != null)
                return false;
        }
        else if (!this.executionEngine.equals(other.executionEngine))
            return false;
        if (this.timerPrepare == null) {
            if (other.timerPrepare != null)
                return false;
        }
        else if (!this.timerPrepare.equals(other.timerPrepare))
            return false;
        if (this.countReprepare == null) {
            if (other.countReprepare != null)
                return false;
        }
        else if (!this.countReprepare.equals(other.countReprepare))
            return false;
        if (this.countExecute == null) {
            if (other.countExecute != null)
                return false;
        }
        else if (!this.countExecute.equals(other.countExecute))
            return false;
        if (this.sumTimerExecute == null) {
            if (other.sumTimerExecute != null)
                return false;
        }
        else if (!this.sumTimerExecute.equals(other.sumTimerExecute))
            return false;
        if (this.minTimerExecute == null) {
            if (other.minTimerExecute != null)
                return false;
        }
        else if (!this.minTimerExecute.equals(other.minTimerExecute))
            return false;
        if (this.avgTimerExecute == null) {
            if (other.avgTimerExecute != null)
                return false;
        }
        else if (!this.avgTimerExecute.equals(other.avgTimerExecute))
            return false;
        if (this.maxTimerExecute == null) {
            if (other.maxTimerExecute != null)
                return false;
        }
        else if (!this.maxTimerExecute.equals(other.maxTimerExecute))
            return false;
        if (this.sumLockTime == null) {
            if (other.sumLockTime != null)
                return false;
        }
        else if (!this.sumLockTime.equals(other.sumLockTime))
            return false;
        if (this.sumErrors == null) {
            if (other.sumErrors != null)
                return false;
        }
        else if (!this.sumErrors.equals(other.sumErrors))
            return false;
        if (this.sumWarnings == null) {
            if (other.sumWarnings != null)
                return false;
        }
        else if (!this.sumWarnings.equals(other.sumWarnings))
            return false;
        if (this.sumRowsAffected == null) {
            if (other.sumRowsAffected != null)
                return false;
        }
        else if (!this.sumRowsAffected.equals(other.sumRowsAffected))
            return false;
        if (this.sumRowsSent == null) {
            if (other.sumRowsSent != null)
                return false;
        }
        else if (!this.sumRowsSent.equals(other.sumRowsSent))
            return false;
        if (this.sumRowsExamined == null) {
            if (other.sumRowsExamined != null)
                return false;
        }
        else if (!this.sumRowsExamined.equals(other.sumRowsExamined))
            return false;
        if (this.sumCreatedTmpDiskTables == null) {
            if (other.sumCreatedTmpDiskTables != null)
                return false;
        }
        else if (!this.sumCreatedTmpDiskTables.equals(other.sumCreatedTmpDiskTables))
            return false;
        if (this.sumCreatedTmpTables == null) {
            if (other.sumCreatedTmpTables != null)
                return false;
        }
        else if (!this.sumCreatedTmpTables.equals(other.sumCreatedTmpTables))
            return false;
        if (this.sumSelectFullJoin == null) {
            if (other.sumSelectFullJoin != null)
                return false;
        }
        else if (!this.sumSelectFullJoin.equals(other.sumSelectFullJoin))
            return false;
        if (this.sumSelectFullRangeJoin == null) {
            if (other.sumSelectFullRangeJoin != null)
                return false;
        }
        else if (!this.sumSelectFullRangeJoin.equals(other.sumSelectFullRangeJoin))
            return false;
        if (this.sumSelectRange == null) {
            if (other.sumSelectRange != null)
                return false;
        }
        else if (!this.sumSelectRange.equals(other.sumSelectRange))
            return false;
        if (this.sumSelectRangeCheck == null) {
            if (other.sumSelectRangeCheck != null)
                return false;
        }
        else if (!this.sumSelectRangeCheck.equals(other.sumSelectRangeCheck))
            return false;
        if (this.sumSelectScan == null) {
            if (other.sumSelectScan != null)
                return false;
        }
        else if (!this.sumSelectScan.equals(other.sumSelectScan))
            return false;
        if (this.sumSortMergePasses == null) {
            if (other.sumSortMergePasses != null)
                return false;
        }
        else if (!this.sumSortMergePasses.equals(other.sumSortMergePasses))
            return false;
        if (this.sumSortRange == null) {
            if (other.sumSortRange != null)
                return false;
        }
        else if (!this.sumSortRange.equals(other.sumSortRange))
            return false;
        if (this.sumSortRows == null) {
            if (other.sumSortRows != null)
                return false;
        }
        else if (!this.sumSortRows.equals(other.sumSortRows))
            return false;
        if (this.sumSortScan == null) {
            if (other.sumSortScan != null)
                return false;
        }
        else if (!this.sumSortScan.equals(other.sumSortScan))
            return false;
        if (this.sumNoIndexUsed == null) {
            if (other.sumNoIndexUsed != null)
                return false;
        }
        else if (!this.sumNoIndexUsed.equals(other.sumNoIndexUsed))
            return false;
        if (this.sumNoGoodIndexUsed == null) {
            if (other.sumNoGoodIndexUsed != null)
                return false;
        }
        else if (!this.sumNoGoodIndexUsed.equals(other.sumNoGoodIndexUsed))
            return false;
        if (this.sumCpuTime == null) {
            if (other.sumCpuTime != null)
                return false;
        }
        else if (!this.sumCpuTime.equals(other.sumCpuTime))
            return false;
        if (this.maxControlledMemory == null) {
            if (other.maxControlledMemory != null)
                return false;
        }
        else if (!this.maxControlledMemory.equals(other.maxControlledMemory))
            return false;
        if (this.maxTotalMemory == null) {
            if (other.maxTotalMemory != null)
                return false;
        }
        else if (!this.maxTotalMemory.equals(other.maxTotalMemory))
            return false;
        if (this.countSecondary == null) {
            if (other.countSecondary != null)
                return false;
        }
        else if (!this.countSecondary.equals(other.countSecondary))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.objectInstanceBegin == null) ? 0 : this.objectInstanceBegin.hashCode());
        result = prime * result + ((this.statementId == null) ? 0 : this.statementId.hashCode());
        result = prime * result + ((this.statementName == null) ? 0 : this.statementName.hashCode());
        result = prime * result + ((this.sqlText == null) ? 0 : this.sqlText.hashCode());
        result = prime * result + ((this.ownerThreadId == null) ? 0 : this.ownerThreadId.hashCode());
        result = prime * result + ((this.ownerEventId == null) ? 0 : this.ownerEventId.hashCode());
        result = prime * result + ((this.ownerObjectType == null) ? 0 : this.ownerObjectType.hashCode());
        result = prime * result + ((this.ownerObjectSchema == null) ? 0 : this.ownerObjectSchema.hashCode());
        result = prime * result + ((this.ownerObjectName == null) ? 0 : this.ownerObjectName.hashCode());
        result = prime * result + ((this.executionEngine == null) ? 0 : this.executionEngine.hashCode());
        result = prime * result + ((this.timerPrepare == null) ? 0 : this.timerPrepare.hashCode());
        result = prime * result + ((this.countReprepare == null) ? 0 : this.countReprepare.hashCode());
        result = prime * result + ((this.countExecute == null) ? 0 : this.countExecute.hashCode());
        result = prime * result + ((this.sumTimerExecute == null) ? 0 : this.sumTimerExecute.hashCode());
        result = prime * result + ((this.minTimerExecute == null) ? 0 : this.minTimerExecute.hashCode());
        result = prime * result + ((this.avgTimerExecute == null) ? 0 : this.avgTimerExecute.hashCode());
        result = prime * result + ((this.maxTimerExecute == null) ? 0 : this.maxTimerExecute.hashCode());
        result = prime * result + ((this.sumLockTime == null) ? 0 : this.sumLockTime.hashCode());
        result = prime * result + ((this.sumErrors == null) ? 0 : this.sumErrors.hashCode());
        result = prime * result + ((this.sumWarnings == null) ? 0 : this.sumWarnings.hashCode());
        result = prime * result + ((this.sumRowsAffected == null) ? 0 : this.sumRowsAffected.hashCode());
        result = prime * result + ((this.sumRowsSent == null) ? 0 : this.sumRowsSent.hashCode());
        result = prime * result + ((this.sumRowsExamined == null) ? 0 : this.sumRowsExamined.hashCode());
        result = prime * result + ((this.sumCreatedTmpDiskTables == null) ? 0 : this.sumCreatedTmpDiskTables.hashCode());
        result = prime * result + ((this.sumCreatedTmpTables == null) ? 0 : this.sumCreatedTmpTables.hashCode());
        result = prime * result + ((this.sumSelectFullJoin == null) ? 0 : this.sumSelectFullJoin.hashCode());
        result = prime * result + ((this.sumSelectFullRangeJoin == null) ? 0 : this.sumSelectFullRangeJoin.hashCode());
        result = prime * result + ((this.sumSelectRange == null) ? 0 : this.sumSelectRange.hashCode());
        result = prime * result + ((this.sumSelectRangeCheck == null) ? 0 : this.sumSelectRangeCheck.hashCode());
        result = prime * result + ((this.sumSelectScan == null) ? 0 : this.sumSelectScan.hashCode());
        result = prime * result + ((this.sumSortMergePasses == null) ? 0 : this.sumSortMergePasses.hashCode());
        result = prime * result + ((this.sumSortRange == null) ? 0 : this.sumSortRange.hashCode());
        result = prime * result + ((this.sumSortRows == null) ? 0 : this.sumSortRows.hashCode());
        result = prime * result + ((this.sumSortScan == null) ? 0 : this.sumSortScan.hashCode());
        result = prime * result + ((this.sumNoIndexUsed == null) ? 0 : this.sumNoIndexUsed.hashCode());
        result = prime * result + ((this.sumNoGoodIndexUsed == null) ? 0 : this.sumNoGoodIndexUsed.hashCode());
        result = prime * result + ((this.sumCpuTime == null) ? 0 : this.sumCpuTime.hashCode());
        result = prime * result + ((this.maxControlledMemory == null) ? 0 : this.maxControlledMemory.hashCode());
        result = prime * result + ((this.maxTotalMemory == null) ? 0 : this.maxTotalMemory.hashCode());
        result = prime * result + ((this.countSecondary == null) ? 0 : this.countSecondary.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PreparedStatementsInstances (");

        sb.append(objectInstanceBegin);
        sb.append(", ").append(statementId);
        sb.append(", ").append(statementName);
        sb.append(", ").append(sqlText);
        sb.append(", ").append(ownerThreadId);
        sb.append(", ").append(ownerEventId);
        sb.append(", ").append(ownerObjectType);
        sb.append(", ").append(ownerObjectSchema);
        sb.append(", ").append(ownerObjectName);
        sb.append(", ").append(executionEngine);
        sb.append(", ").append(timerPrepare);
        sb.append(", ").append(countReprepare);
        sb.append(", ").append(countExecute);
        sb.append(", ").append(sumTimerExecute);
        sb.append(", ").append(minTimerExecute);
        sb.append(", ").append(avgTimerExecute);
        sb.append(", ").append(maxTimerExecute);
        sb.append(", ").append(sumLockTime);
        sb.append(", ").append(sumErrors);
        sb.append(", ").append(sumWarnings);
        sb.append(", ").append(sumRowsAffected);
        sb.append(", ").append(sumRowsSent);
        sb.append(", ").append(sumRowsExamined);
        sb.append(", ").append(sumCreatedTmpDiskTables);
        sb.append(", ").append(sumCreatedTmpTables);
        sb.append(", ").append(sumSelectFullJoin);
        sb.append(", ").append(sumSelectFullRangeJoin);
        sb.append(", ").append(sumSelectRange);
        sb.append(", ").append(sumSelectRangeCheck);
        sb.append(", ").append(sumSelectScan);
        sb.append(", ").append(sumSortMergePasses);
        sb.append(", ").append(sumSortRange);
        sb.append(", ").append(sumSortRows);
        sb.append(", ").append(sumSortScan);
        sb.append(", ").append(sumNoIndexUsed);
        sb.append(", ").append(sumNoGoodIndexUsed);
        sb.append(", ").append(sumCpuTime);
        sb.append(", ").append(maxControlledMemory);
        sb.append(", ").append(maxTotalMemory);
        sb.append(", ").append(countSecondary);

        sb.append(")");
        return sb.toString();
    }
}
