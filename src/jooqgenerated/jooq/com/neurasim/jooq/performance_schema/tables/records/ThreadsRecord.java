/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.enums.ThreadsExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.ThreadsHistory;
import com.neurasim.jooq.performance_schema.enums.ThreadsInstrumented;
import com.neurasim.jooq.performance_schema.enums.ThreadsTelemetryActive;
import com.neurasim.jooq.performance_schema.tables.Threads;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ThreadsRecord extends UpdatableRecordImpl<ThreadsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>performance_schema.threads.THREAD_ID</code>.
     */
    public ThreadsRecord setThreadId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>performance_schema.threads.NAME</code>.
     */
    public ThreadsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>performance_schema.threads.TYPE</code>.
     */
    public ThreadsRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.TYPE</code>.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    public ThreadsRecord setProcesslistId(ULong value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    public ULong getProcesslistId() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    public ThreadsRecord setProcesslistUser(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    public String getProcesslistUser() {
        return (String) get(4);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    public ThreadsRecord setProcesslistHost(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    public String getProcesslistHost() {
        return (String) get(5);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    public ThreadsRecord setProcesslistDb(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    public String getProcesslistDb() {
        return (String) get(6);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    public ThreadsRecord setProcesslistCommand(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    public String getProcesslistCommand() {
        return (String) get(7);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    public ThreadsRecord setProcesslistTime(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    public Long getProcesslistTime() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    public ThreadsRecord setProcesslistState(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    public String getProcesslistState() {
        return (String) get(9);
    }

    /**
     * Setter for <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    public ThreadsRecord setProcesslistInfo(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    public String getProcesslistInfo() {
        return (String) get(10);
    }

    /**
     * Setter for <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    public ThreadsRecord setParentThreadId(ULong value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    public ULong getParentThreadId() {
        return (ULong) get(11);
    }

    /**
     * Setter for <code>performance_schema.threads.ROLE</code>.
     */
    public ThreadsRecord setRole(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.ROLE</code>.
     */
    public String getRole() {
        return (String) get(12);
    }

    /**
     * Setter for <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    public ThreadsRecord setInstrumented(ThreadsInstrumented value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    public ThreadsInstrumented getInstrumented() {
        return (ThreadsInstrumented) get(13);
    }

    /**
     * Setter for <code>performance_schema.threads.HISTORY</code>.
     */
    public ThreadsRecord setHistory(ThreadsHistory value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.HISTORY</code>.
     */
    public ThreadsHistory getHistory() {
        return (ThreadsHistory) get(14);
    }

    /**
     * Setter for <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    public ThreadsRecord setConnectionType(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    public String getConnectionType() {
        return (String) get(15);
    }

    /**
     * Setter for <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    public ThreadsRecord setThreadOsId(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    public ULong getThreadOsId() {
        return (ULong) get(16);
    }

    /**
     * Setter for <code>performance_schema.threads.RESOURCE_GROUP</code>.
     */
    public ThreadsRecord setResourceGroup(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.RESOURCE_GROUP</code>.
     */
    public String getResourceGroup() {
        return (String) get(17);
    }

    /**
     * Setter for <code>performance_schema.threads.EXECUTION_ENGINE</code>.
     */
    public ThreadsRecord setExecutionEngine(ThreadsExecutionEngine value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.EXECUTION_ENGINE</code>.
     */
    public ThreadsExecutionEngine getExecutionEngine() {
        return (ThreadsExecutionEngine) get(18);
    }

    /**
     * Setter for <code>performance_schema.threads.CONTROLLED_MEMORY</code>.
     */
    public ThreadsRecord setControlledMemory(ULong value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.CONTROLLED_MEMORY</code>.
     */
    public ULong getControlledMemory() {
        return (ULong) get(19);
    }

    /**
     * Setter for <code>performance_schema.threads.MAX_CONTROLLED_MEMORY</code>.
     */
    public ThreadsRecord setMaxControlledMemory(ULong value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return (ULong) get(20);
    }

    /**
     * Setter for <code>performance_schema.threads.TOTAL_MEMORY</code>.
     */
    public ThreadsRecord setTotalMemory(ULong value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.TOTAL_MEMORY</code>.
     */
    public ULong getTotalMemory() {
        return (ULong) get(21);
    }

    /**
     * Setter for <code>performance_schema.threads.MAX_TOTAL_MEMORY</code>.
     */
    public ThreadsRecord setMaxTotalMemory(ULong value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return (ULong) get(22);
    }

    /**
     * Setter for <code>performance_schema.threads.TELEMETRY_ACTIVE</code>.
     */
    public ThreadsRecord setTelemetryActive(ThreadsTelemetryActive value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.threads.TELEMETRY_ACTIVE</code>.
     */
    public ThreadsTelemetryActive getTelemetryActive() {
        return (ThreadsTelemetryActive) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ThreadsRecord
     */
    public ThreadsRecord() {
        super(Threads.THREADS);
    }

    /**
     * Create a detached, initialised ThreadsRecord
     */
    public ThreadsRecord(ULong threadId, String name, String type, ULong processlistId, String processlistUser, String processlistHost, String processlistDb, String processlistCommand, Long processlistTime, String processlistState, String processlistInfo, ULong parentThreadId, String role, ThreadsInstrumented instrumented, ThreadsHistory history, String connectionType, ULong threadOsId, String resourceGroup, ThreadsExecutionEngine executionEngine, ULong controlledMemory, ULong maxControlledMemory, ULong totalMemory, ULong maxTotalMemory, ThreadsTelemetryActive telemetryActive) {
        super(Threads.THREADS);

        setThreadId(threadId);
        setName(name);
        setType(type);
        setProcesslistId(processlistId);
        setProcesslistUser(processlistUser);
        setProcesslistHost(processlistHost);
        setProcesslistDb(processlistDb);
        setProcesslistCommand(processlistCommand);
        setProcesslistTime(processlistTime);
        setProcesslistState(processlistState);
        setProcesslistInfo(processlistInfo);
        setParentThreadId(parentThreadId);
        setRole(role);
        setInstrumented(instrumented);
        setHistory(history);
        setConnectionType(connectionType);
        setThreadOsId(threadOsId);
        setResourceGroup(resourceGroup);
        setExecutionEngine(executionEngine);
        setControlledMemory(controlledMemory);
        setMaxControlledMemory(maxControlledMemory);
        setTotalMemory(totalMemory);
        setMaxTotalMemory(maxTotalMemory);
        setTelemetryActive(telemetryActive);
    }

    /**
     * Create a detached, initialised ThreadsRecord
     */
    public ThreadsRecord(com.neurasim.jooq.performance_schema.tables.pojos.Threads value) {
        super(Threads.THREADS);

        if (value != null) {
            setThreadId(value.getThreadId());
            setName(value.getName());
            setType(value.getType());
            setProcesslistId(value.getProcesslistId());
            setProcesslistUser(value.getProcesslistUser());
            setProcesslistHost(value.getProcesslistHost());
            setProcesslistDb(value.getProcesslistDb());
            setProcesslistCommand(value.getProcesslistCommand());
            setProcesslistTime(value.getProcesslistTime());
            setProcesslistState(value.getProcesslistState());
            setProcesslistInfo(value.getProcesslistInfo());
            setParentThreadId(value.getParentThreadId());
            setRole(value.getRole());
            setInstrumented(value.getInstrumented());
            setHistory(value.getHistory());
            setConnectionType(value.getConnectionType());
            setThreadOsId(value.getThreadOsId());
            setResourceGroup(value.getResourceGroup());
            setExecutionEngine(value.getExecutionEngine());
            setControlledMemory(value.getControlledMemory());
            setMaxControlledMemory(value.getMaxControlledMemory());
            setTotalMemory(value.getTotalMemory());
            setMaxTotalMemory(value.getMaxTotalMemory());
            setTelemetryActive(value.getTelemetryActive());
        }
    }
}
