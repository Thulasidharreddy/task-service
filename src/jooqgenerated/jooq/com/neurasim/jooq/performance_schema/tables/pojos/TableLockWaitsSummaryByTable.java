/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableLockWaitsSummaryByTable implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String objectType;
    private final String objectSchema;
    private final String objectName;
    private final ULong countStar;
    private final ULong sumTimerWait;
    private final ULong minTimerWait;
    private final ULong avgTimerWait;
    private final ULong maxTimerWait;
    private final ULong countRead;
    private final ULong sumTimerRead;
    private final ULong minTimerRead;
    private final ULong avgTimerRead;
    private final ULong maxTimerRead;
    private final ULong countWrite;
    private final ULong sumTimerWrite;
    private final ULong minTimerWrite;
    private final ULong avgTimerWrite;
    private final ULong maxTimerWrite;
    private final ULong countReadNormal;
    private final ULong sumTimerReadNormal;
    private final ULong minTimerReadNormal;
    private final ULong avgTimerReadNormal;
    private final ULong maxTimerReadNormal;
    private final ULong countReadWithSharedLocks;
    private final ULong sumTimerReadWithSharedLocks;
    private final ULong minTimerReadWithSharedLocks;
    private final ULong avgTimerReadWithSharedLocks;
    private final ULong maxTimerReadWithSharedLocks;
    private final ULong countReadHighPriority;
    private final ULong sumTimerReadHighPriority;
    private final ULong minTimerReadHighPriority;
    private final ULong avgTimerReadHighPriority;
    private final ULong maxTimerReadHighPriority;
    private final ULong countReadNoInsert;
    private final ULong sumTimerReadNoInsert;
    private final ULong minTimerReadNoInsert;
    private final ULong avgTimerReadNoInsert;
    private final ULong maxTimerReadNoInsert;
    private final ULong countReadExternal;
    private final ULong sumTimerReadExternal;
    private final ULong minTimerReadExternal;
    private final ULong avgTimerReadExternal;
    private final ULong maxTimerReadExternal;
    private final ULong countWriteAllowWrite;
    private final ULong sumTimerWriteAllowWrite;
    private final ULong minTimerWriteAllowWrite;
    private final ULong avgTimerWriteAllowWrite;
    private final ULong maxTimerWriteAllowWrite;
    private final ULong countWriteConcurrentInsert;
    private final ULong sumTimerWriteConcurrentInsert;
    private final ULong minTimerWriteConcurrentInsert;
    private final ULong avgTimerWriteConcurrentInsert;
    private final ULong maxTimerWriteConcurrentInsert;
    private final ULong countWriteLowPriority;
    private final ULong sumTimerWriteLowPriority;
    private final ULong minTimerWriteLowPriority;
    private final ULong avgTimerWriteLowPriority;
    private final ULong maxTimerWriteLowPriority;
    private final ULong countWriteNormal;
    private final ULong sumTimerWriteNormal;
    private final ULong minTimerWriteNormal;
    private final ULong avgTimerWriteNormal;
    private final ULong maxTimerWriteNormal;
    private final ULong countWriteExternal;
    private final ULong sumTimerWriteExternal;
    private final ULong minTimerWriteExternal;
    private final ULong avgTimerWriteExternal;
    private final ULong maxTimerWriteExternal;

    public TableLockWaitsSummaryByTable(TableLockWaitsSummaryByTable value) {
        this.objectType = value.objectType;
        this.objectSchema = value.objectSchema;
        this.objectName = value.objectName;
        this.countStar = value.countStar;
        this.sumTimerWait = value.sumTimerWait;
        this.minTimerWait = value.minTimerWait;
        this.avgTimerWait = value.avgTimerWait;
        this.maxTimerWait = value.maxTimerWait;
        this.countRead = value.countRead;
        this.sumTimerRead = value.sumTimerRead;
        this.minTimerRead = value.minTimerRead;
        this.avgTimerRead = value.avgTimerRead;
        this.maxTimerRead = value.maxTimerRead;
        this.countWrite = value.countWrite;
        this.sumTimerWrite = value.sumTimerWrite;
        this.minTimerWrite = value.minTimerWrite;
        this.avgTimerWrite = value.avgTimerWrite;
        this.maxTimerWrite = value.maxTimerWrite;
        this.countReadNormal = value.countReadNormal;
        this.sumTimerReadNormal = value.sumTimerReadNormal;
        this.minTimerReadNormal = value.minTimerReadNormal;
        this.avgTimerReadNormal = value.avgTimerReadNormal;
        this.maxTimerReadNormal = value.maxTimerReadNormal;
        this.countReadWithSharedLocks = value.countReadWithSharedLocks;
        this.sumTimerReadWithSharedLocks = value.sumTimerReadWithSharedLocks;
        this.minTimerReadWithSharedLocks = value.minTimerReadWithSharedLocks;
        this.avgTimerReadWithSharedLocks = value.avgTimerReadWithSharedLocks;
        this.maxTimerReadWithSharedLocks = value.maxTimerReadWithSharedLocks;
        this.countReadHighPriority = value.countReadHighPriority;
        this.sumTimerReadHighPriority = value.sumTimerReadHighPriority;
        this.minTimerReadHighPriority = value.minTimerReadHighPriority;
        this.avgTimerReadHighPriority = value.avgTimerReadHighPriority;
        this.maxTimerReadHighPriority = value.maxTimerReadHighPriority;
        this.countReadNoInsert = value.countReadNoInsert;
        this.sumTimerReadNoInsert = value.sumTimerReadNoInsert;
        this.minTimerReadNoInsert = value.minTimerReadNoInsert;
        this.avgTimerReadNoInsert = value.avgTimerReadNoInsert;
        this.maxTimerReadNoInsert = value.maxTimerReadNoInsert;
        this.countReadExternal = value.countReadExternal;
        this.sumTimerReadExternal = value.sumTimerReadExternal;
        this.minTimerReadExternal = value.minTimerReadExternal;
        this.avgTimerReadExternal = value.avgTimerReadExternal;
        this.maxTimerReadExternal = value.maxTimerReadExternal;
        this.countWriteAllowWrite = value.countWriteAllowWrite;
        this.sumTimerWriteAllowWrite = value.sumTimerWriteAllowWrite;
        this.minTimerWriteAllowWrite = value.minTimerWriteAllowWrite;
        this.avgTimerWriteAllowWrite = value.avgTimerWriteAllowWrite;
        this.maxTimerWriteAllowWrite = value.maxTimerWriteAllowWrite;
        this.countWriteConcurrentInsert = value.countWriteConcurrentInsert;
        this.sumTimerWriteConcurrentInsert = value.sumTimerWriteConcurrentInsert;
        this.minTimerWriteConcurrentInsert = value.minTimerWriteConcurrentInsert;
        this.avgTimerWriteConcurrentInsert = value.avgTimerWriteConcurrentInsert;
        this.maxTimerWriteConcurrentInsert = value.maxTimerWriteConcurrentInsert;
        this.countWriteLowPriority = value.countWriteLowPriority;
        this.sumTimerWriteLowPriority = value.sumTimerWriteLowPriority;
        this.minTimerWriteLowPriority = value.minTimerWriteLowPriority;
        this.avgTimerWriteLowPriority = value.avgTimerWriteLowPriority;
        this.maxTimerWriteLowPriority = value.maxTimerWriteLowPriority;
        this.countWriteNormal = value.countWriteNormal;
        this.sumTimerWriteNormal = value.sumTimerWriteNormal;
        this.minTimerWriteNormal = value.minTimerWriteNormal;
        this.avgTimerWriteNormal = value.avgTimerWriteNormal;
        this.maxTimerWriteNormal = value.maxTimerWriteNormal;
        this.countWriteExternal = value.countWriteExternal;
        this.sumTimerWriteExternal = value.sumTimerWriteExternal;
        this.minTimerWriteExternal = value.minTimerWriteExternal;
        this.avgTimerWriteExternal = value.avgTimerWriteExternal;
        this.maxTimerWriteExternal = value.maxTimerWriteExternal;
    }

    public TableLockWaitsSummaryByTable(
        String objectType,
        String objectSchema,
        String objectName,
        ULong countStar,
        ULong sumTimerWait,
        ULong minTimerWait,
        ULong avgTimerWait,
        ULong maxTimerWait,
        ULong countRead,
        ULong sumTimerRead,
        ULong minTimerRead,
        ULong avgTimerRead,
        ULong maxTimerRead,
        ULong countWrite,
        ULong sumTimerWrite,
        ULong minTimerWrite,
        ULong avgTimerWrite,
        ULong maxTimerWrite,
        ULong countReadNormal,
        ULong sumTimerReadNormal,
        ULong minTimerReadNormal,
        ULong avgTimerReadNormal,
        ULong maxTimerReadNormal,
        ULong countReadWithSharedLocks,
        ULong sumTimerReadWithSharedLocks,
        ULong minTimerReadWithSharedLocks,
        ULong avgTimerReadWithSharedLocks,
        ULong maxTimerReadWithSharedLocks,
        ULong countReadHighPriority,
        ULong sumTimerReadHighPriority,
        ULong minTimerReadHighPriority,
        ULong avgTimerReadHighPriority,
        ULong maxTimerReadHighPriority,
        ULong countReadNoInsert,
        ULong sumTimerReadNoInsert,
        ULong minTimerReadNoInsert,
        ULong avgTimerReadNoInsert,
        ULong maxTimerReadNoInsert,
        ULong countReadExternal,
        ULong sumTimerReadExternal,
        ULong minTimerReadExternal,
        ULong avgTimerReadExternal,
        ULong maxTimerReadExternal,
        ULong countWriteAllowWrite,
        ULong sumTimerWriteAllowWrite,
        ULong minTimerWriteAllowWrite,
        ULong avgTimerWriteAllowWrite,
        ULong maxTimerWriteAllowWrite,
        ULong countWriteConcurrentInsert,
        ULong sumTimerWriteConcurrentInsert,
        ULong minTimerWriteConcurrentInsert,
        ULong avgTimerWriteConcurrentInsert,
        ULong maxTimerWriteConcurrentInsert,
        ULong countWriteLowPriority,
        ULong sumTimerWriteLowPriority,
        ULong minTimerWriteLowPriority,
        ULong avgTimerWriteLowPriority,
        ULong maxTimerWriteLowPriority,
        ULong countWriteNormal,
        ULong sumTimerWriteNormal,
        ULong minTimerWriteNormal,
        ULong avgTimerWriteNormal,
        ULong maxTimerWriteNormal,
        ULong countWriteExternal,
        ULong sumTimerWriteExternal,
        ULong minTimerWriteExternal,
        ULong avgTimerWriteExternal,
        ULong maxTimerWriteExternal
    ) {
        this.objectType = objectType;
        this.objectSchema = objectSchema;
        this.objectName = objectName;
        this.countStar = countStar;
        this.sumTimerWait = sumTimerWait;
        this.minTimerWait = minTimerWait;
        this.avgTimerWait = avgTimerWait;
        this.maxTimerWait = maxTimerWait;
        this.countRead = countRead;
        this.sumTimerRead = sumTimerRead;
        this.minTimerRead = minTimerRead;
        this.avgTimerRead = avgTimerRead;
        this.maxTimerRead = maxTimerRead;
        this.countWrite = countWrite;
        this.sumTimerWrite = sumTimerWrite;
        this.minTimerWrite = minTimerWrite;
        this.avgTimerWrite = avgTimerWrite;
        this.maxTimerWrite = maxTimerWrite;
        this.countReadNormal = countReadNormal;
        this.sumTimerReadNormal = sumTimerReadNormal;
        this.minTimerReadNormal = minTimerReadNormal;
        this.avgTimerReadNormal = avgTimerReadNormal;
        this.maxTimerReadNormal = maxTimerReadNormal;
        this.countReadWithSharedLocks = countReadWithSharedLocks;
        this.sumTimerReadWithSharedLocks = sumTimerReadWithSharedLocks;
        this.minTimerReadWithSharedLocks = minTimerReadWithSharedLocks;
        this.avgTimerReadWithSharedLocks = avgTimerReadWithSharedLocks;
        this.maxTimerReadWithSharedLocks = maxTimerReadWithSharedLocks;
        this.countReadHighPriority = countReadHighPriority;
        this.sumTimerReadHighPriority = sumTimerReadHighPriority;
        this.minTimerReadHighPriority = minTimerReadHighPriority;
        this.avgTimerReadHighPriority = avgTimerReadHighPriority;
        this.maxTimerReadHighPriority = maxTimerReadHighPriority;
        this.countReadNoInsert = countReadNoInsert;
        this.sumTimerReadNoInsert = sumTimerReadNoInsert;
        this.minTimerReadNoInsert = minTimerReadNoInsert;
        this.avgTimerReadNoInsert = avgTimerReadNoInsert;
        this.maxTimerReadNoInsert = maxTimerReadNoInsert;
        this.countReadExternal = countReadExternal;
        this.sumTimerReadExternal = sumTimerReadExternal;
        this.minTimerReadExternal = minTimerReadExternal;
        this.avgTimerReadExternal = avgTimerReadExternal;
        this.maxTimerReadExternal = maxTimerReadExternal;
        this.countWriteAllowWrite = countWriteAllowWrite;
        this.sumTimerWriteAllowWrite = sumTimerWriteAllowWrite;
        this.minTimerWriteAllowWrite = minTimerWriteAllowWrite;
        this.avgTimerWriteAllowWrite = avgTimerWriteAllowWrite;
        this.maxTimerWriteAllowWrite = maxTimerWriteAllowWrite;
        this.countWriteConcurrentInsert = countWriteConcurrentInsert;
        this.sumTimerWriteConcurrentInsert = sumTimerWriteConcurrentInsert;
        this.minTimerWriteConcurrentInsert = minTimerWriteConcurrentInsert;
        this.avgTimerWriteConcurrentInsert = avgTimerWriteConcurrentInsert;
        this.maxTimerWriteConcurrentInsert = maxTimerWriteConcurrentInsert;
        this.countWriteLowPriority = countWriteLowPriority;
        this.sumTimerWriteLowPriority = sumTimerWriteLowPriority;
        this.minTimerWriteLowPriority = minTimerWriteLowPriority;
        this.avgTimerWriteLowPriority = avgTimerWriteLowPriority;
        this.maxTimerWriteLowPriority = maxTimerWriteLowPriority;
        this.countWriteNormal = countWriteNormal;
        this.sumTimerWriteNormal = sumTimerWriteNormal;
        this.minTimerWriteNormal = minTimerWriteNormal;
        this.avgTimerWriteNormal = avgTimerWriteNormal;
        this.maxTimerWriteNormal = maxTimerWriteNormal;
        this.countWriteExternal = countWriteExternal;
        this.sumTimerWriteExternal = sumTimerWriteExternal;
        this.minTimerWriteExternal = minTimerWriteExternal;
        this.avgTimerWriteExternal = avgTimerWriteExternal;
        this.maxTimerWriteExternal = maxTimerWriteExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.OBJECT_TYPE</code>.
     */
    public String getObjectType() {
        return this.objectType;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return this.objectSchema;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return this.objectName;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_STAR</code>.
     */
    public ULong getCountStar() {
        return this.countStar;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WAIT</code>.
     */
    public ULong getSumTimerWait() {
        return this.sumTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WAIT</code>.
     */
    public ULong getMinTimerWait() {
        return this.minTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WAIT</code>.
     */
    public ULong getAvgTimerWait() {
        return this.avgTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WAIT</code>.
     */
    public ULong getMaxTimerWait() {
        return this.maxTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ</code>.
     */
    public ULong getCountRead() {
        return this.countRead;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ</code>.
     */
    public ULong getSumTimerRead() {
        return this.sumTimerRead;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ</code>.
     */
    public ULong getMinTimerRead() {
        return this.minTimerRead;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ</code>.
     */
    public ULong getAvgTimerRead() {
        return this.avgTimerRead;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ</code>.
     */
    public ULong getMaxTimerRead() {
        return this.maxTimerRead;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE</code>.
     */
    public ULong getCountWrite() {
        return this.countWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE</code>.
     */
    public ULong getSumTimerWrite() {
        return this.sumTimerWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE</code>.
     */
    public ULong getMinTimerWrite() {
        return this.minTimerWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE</code>.
     */
    public ULong getAvgTimerWrite() {
        return this.avgTimerWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE</code>.
     */
    public ULong getMaxTimerWrite() {
        return this.maxTimerWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ_NORMAL</code>.
     */
    public ULong getCountReadNormal() {
        return this.countReadNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ_NORMAL</code>.
     */
    public ULong getSumTimerReadNormal() {
        return this.sumTimerReadNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ_NORMAL</code>.
     */
    public ULong getMinTimerReadNormal() {
        return this.minTimerReadNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ_NORMAL</code>.
     */
    public ULong getAvgTimerReadNormal() {
        return this.avgTimerReadNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ_NORMAL</code>.
     */
    public ULong getMaxTimerReadNormal() {
        return this.maxTimerReadNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ_WITH_SHARED_LOCKS</code>.
     */
    public ULong getCountReadWithSharedLocks() {
        return this.countReadWithSharedLocks;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ_WITH_SHARED_LOCKS</code>.
     */
    public ULong getSumTimerReadWithSharedLocks() {
        return this.sumTimerReadWithSharedLocks;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ_WITH_SHARED_LOCKS</code>.
     */
    public ULong getMinTimerReadWithSharedLocks() {
        return this.minTimerReadWithSharedLocks;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ_WITH_SHARED_LOCKS</code>.
     */
    public ULong getAvgTimerReadWithSharedLocks() {
        return this.avgTimerReadWithSharedLocks;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ_WITH_SHARED_LOCKS</code>.
     */
    public ULong getMaxTimerReadWithSharedLocks() {
        return this.maxTimerReadWithSharedLocks;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ_HIGH_PRIORITY</code>.
     */
    public ULong getCountReadHighPriority() {
        return this.countReadHighPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ_HIGH_PRIORITY</code>.
     */
    public ULong getSumTimerReadHighPriority() {
        return this.sumTimerReadHighPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ_HIGH_PRIORITY</code>.
     */
    public ULong getMinTimerReadHighPriority() {
        return this.minTimerReadHighPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ_HIGH_PRIORITY</code>.
     */
    public ULong getAvgTimerReadHighPriority() {
        return this.avgTimerReadHighPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ_HIGH_PRIORITY</code>.
     */
    public ULong getMaxTimerReadHighPriority() {
        return this.maxTimerReadHighPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ_NO_INSERT</code>.
     */
    public ULong getCountReadNoInsert() {
        return this.countReadNoInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ_NO_INSERT</code>.
     */
    public ULong getSumTimerReadNoInsert() {
        return this.sumTimerReadNoInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ_NO_INSERT</code>.
     */
    public ULong getMinTimerReadNoInsert() {
        return this.minTimerReadNoInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ_NO_INSERT</code>.
     */
    public ULong getAvgTimerReadNoInsert() {
        return this.avgTimerReadNoInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ_NO_INSERT</code>.
     */
    public ULong getMaxTimerReadNoInsert() {
        return this.maxTimerReadNoInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_READ_EXTERNAL</code>.
     */
    public ULong getCountReadExternal() {
        return this.countReadExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_READ_EXTERNAL</code>.
     */
    public ULong getSumTimerReadExternal() {
        return this.sumTimerReadExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_READ_EXTERNAL</code>.
     */
    public ULong getMinTimerReadExternal() {
        return this.minTimerReadExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_READ_EXTERNAL</code>.
     */
    public ULong getAvgTimerReadExternal() {
        return this.avgTimerReadExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_READ_EXTERNAL</code>.
     */
    public ULong getMaxTimerReadExternal() {
        return this.maxTimerReadExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE_ALLOW_WRITE</code>.
     */
    public ULong getCountWriteAllowWrite() {
        return this.countWriteAllowWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE_ALLOW_WRITE</code>.
     */
    public ULong getSumTimerWriteAllowWrite() {
        return this.sumTimerWriteAllowWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE_ALLOW_WRITE</code>.
     */
    public ULong getMinTimerWriteAllowWrite() {
        return this.minTimerWriteAllowWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE_ALLOW_WRITE</code>.
     */
    public ULong getAvgTimerWriteAllowWrite() {
        return this.avgTimerWriteAllowWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE_ALLOW_WRITE</code>.
     */
    public ULong getMaxTimerWriteAllowWrite() {
        return this.maxTimerWriteAllowWrite;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE_CONCURRENT_INSERT</code>.
     */
    public ULong getCountWriteConcurrentInsert() {
        return this.countWriteConcurrentInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE_CONCURRENT_INSERT</code>.
     */
    public ULong getSumTimerWriteConcurrentInsert() {
        return this.sumTimerWriteConcurrentInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE_CONCURRENT_INSERT</code>.
     */
    public ULong getMinTimerWriteConcurrentInsert() {
        return this.minTimerWriteConcurrentInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE_CONCURRENT_INSERT</code>.
     */
    public ULong getAvgTimerWriteConcurrentInsert() {
        return this.avgTimerWriteConcurrentInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE_CONCURRENT_INSERT</code>.
     */
    public ULong getMaxTimerWriteConcurrentInsert() {
        return this.maxTimerWriteConcurrentInsert;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE_LOW_PRIORITY</code>.
     */
    public ULong getCountWriteLowPriority() {
        return this.countWriteLowPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE_LOW_PRIORITY</code>.
     */
    public ULong getSumTimerWriteLowPriority() {
        return this.sumTimerWriteLowPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE_LOW_PRIORITY</code>.
     */
    public ULong getMinTimerWriteLowPriority() {
        return this.minTimerWriteLowPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE_LOW_PRIORITY</code>.
     */
    public ULong getAvgTimerWriteLowPriority() {
        return this.avgTimerWriteLowPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE_LOW_PRIORITY</code>.
     */
    public ULong getMaxTimerWriteLowPriority() {
        return this.maxTimerWriteLowPriority;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE_NORMAL</code>.
     */
    public ULong getCountWriteNormal() {
        return this.countWriteNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE_NORMAL</code>.
     */
    public ULong getSumTimerWriteNormal() {
        return this.sumTimerWriteNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE_NORMAL</code>.
     */
    public ULong getMinTimerWriteNormal() {
        return this.minTimerWriteNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE_NORMAL</code>.
     */
    public ULong getAvgTimerWriteNormal() {
        return this.avgTimerWriteNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE_NORMAL</code>.
     */
    public ULong getMaxTimerWriteNormal() {
        return this.maxTimerWriteNormal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.COUNT_WRITE_EXTERNAL</code>.
     */
    public ULong getCountWriteExternal() {
        return this.countWriteExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.SUM_TIMER_WRITE_EXTERNAL</code>.
     */
    public ULong getSumTimerWriteExternal() {
        return this.sumTimerWriteExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MIN_TIMER_WRITE_EXTERNAL</code>.
     */
    public ULong getMinTimerWriteExternal() {
        return this.minTimerWriteExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.AVG_TIMER_WRITE_EXTERNAL</code>.
     */
    public ULong getAvgTimerWriteExternal() {
        return this.avgTimerWriteExternal;
    }

    /**
     * Getter for
     * <code>performance_schema.table_lock_waits_summary_by_table.MAX_TIMER_WRITE_EXTERNAL</code>.
     */
    public ULong getMaxTimerWriteExternal() {
        return this.maxTimerWriteExternal;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TableLockWaitsSummaryByTable other = (TableLockWaitsSummaryByTable) obj;
        if (this.objectType == null) {
            if (other.objectType != null)
                return false;
        }
        else if (!this.objectType.equals(other.objectType))
            return false;
        if (this.objectSchema == null) {
            if (other.objectSchema != null)
                return false;
        }
        else if (!this.objectSchema.equals(other.objectSchema))
            return false;
        if (this.objectName == null) {
            if (other.objectName != null)
                return false;
        }
        else if (!this.objectName.equals(other.objectName))
            return false;
        if (this.countStar == null) {
            if (other.countStar != null)
                return false;
        }
        else if (!this.countStar.equals(other.countStar))
            return false;
        if (this.sumTimerWait == null) {
            if (other.sumTimerWait != null)
                return false;
        }
        else if (!this.sumTimerWait.equals(other.sumTimerWait))
            return false;
        if (this.minTimerWait == null) {
            if (other.minTimerWait != null)
                return false;
        }
        else if (!this.minTimerWait.equals(other.minTimerWait))
            return false;
        if (this.avgTimerWait == null) {
            if (other.avgTimerWait != null)
                return false;
        }
        else if (!this.avgTimerWait.equals(other.avgTimerWait))
            return false;
        if (this.maxTimerWait == null) {
            if (other.maxTimerWait != null)
                return false;
        }
        else if (!this.maxTimerWait.equals(other.maxTimerWait))
            return false;
        if (this.countRead == null) {
            if (other.countRead != null)
                return false;
        }
        else if (!this.countRead.equals(other.countRead))
            return false;
        if (this.sumTimerRead == null) {
            if (other.sumTimerRead != null)
                return false;
        }
        else if (!this.sumTimerRead.equals(other.sumTimerRead))
            return false;
        if (this.minTimerRead == null) {
            if (other.minTimerRead != null)
                return false;
        }
        else if (!this.minTimerRead.equals(other.minTimerRead))
            return false;
        if (this.avgTimerRead == null) {
            if (other.avgTimerRead != null)
                return false;
        }
        else if (!this.avgTimerRead.equals(other.avgTimerRead))
            return false;
        if (this.maxTimerRead == null) {
            if (other.maxTimerRead != null)
                return false;
        }
        else if (!this.maxTimerRead.equals(other.maxTimerRead))
            return false;
        if (this.countWrite == null) {
            if (other.countWrite != null)
                return false;
        }
        else if (!this.countWrite.equals(other.countWrite))
            return false;
        if (this.sumTimerWrite == null) {
            if (other.sumTimerWrite != null)
                return false;
        }
        else if (!this.sumTimerWrite.equals(other.sumTimerWrite))
            return false;
        if (this.minTimerWrite == null) {
            if (other.minTimerWrite != null)
                return false;
        }
        else if (!this.minTimerWrite.equals(other.minTimerWrite))
            return false;
        if (this.avgTimerWrite == null) {
            if (other.avgTimerWrite != null)
                return false;
        }
        else if (!this.avgTimerWrite.equals(other.avgTimerWrite))
            return false;
        if (this.maxTimerWrite == null) {
            if (other.maxTimerWrite != null)
                return false;
        }
        else if (!this.maxTimerWrite.equals(other.maxTimerWrite))
            return false;
        if (this.countReadNormal == null) {
            if (other.countReadNormal != null)
                return false;
        }
        else if (!this.countReadNormal.equals(other.countReadNormal))
            return false;
        if (this.sumTimerReadNormal == null) {
            if (other.sumTimerReadNormal != null)
                return false;
        }
        else if (!this.sumTimerReadNormal.equals(other.sumTimerReadNormal))
            return false;
        if (this.minTimerReadNormal == null) {
            if (other.minTimerReadNormal != null)
                return false;
        }
        else if (!this.minTimerReadNormal.equals(other.minTimerReadNormal))
            return false;
        if (this.avgTimerReadNormal == null) {
            if (other.avgTimerReadNormal != null)
                return false;
        }
        else if (!this.avgTimerReadNormal.equals(other.avgTimerReadNormal))
            return false;
        if (this.maxTimerReadNormal == null) {
            if (other.maxTimerReadNormal != null)
                return false;
        }
        else if (!this.maxTimerReadNormal.equals(other.maxTimerReadNormal))
            return false;
        if (this.countReadWithSharedLocks == null) {
            if (other.countReadWithSharedLocks != null)
                return false;
        }
        else if (!this.countReadWithSharedLocks.equals(other.countReadWithSharedLocks))
            return false;
        if (this.sumTimerReadWithSharedLocks == null) {
            if (other.sumTimerReadWithSharedLocks != null)
                return false;
        }
        else if (!this.sumTimerReadWithSharedLocks.equals(other.sumTimerReadWithSharedLocks))
            return false;
        if (this.minTimerReadWithSharedLocks == null) {
            if (other.minTimerReadWithSharedLocks != null)
                return false;
        }
        else if (!this.minTimerReadWithSharedLocks.equals(other.minTimerReadWithSharedLocks))
            return false;
        if (this.avgTimerReadWithSharedLocks == null) {
            if (other.avgTimerReadWithSharedLocks != null)
                return false;
        }
        else if (!this.avgTimerReadWithSharedLocks.equals(other.avgTimerReadWithSharedLocks))
            return false;
        if (this.maxTimerReadWithSharedLocks == null) {
            if (other.maxTimerReadWithSharedLocks != null)
                return false;
        }
        else if (!this.maxTimerReadWithSharedLocks.equals(other.maxTimerReadWithSharedLocks))
            return false;
        if (this.countReadHighPriority == null) {
            if (other.countReadHighPriority != null)
                return false;
        }
        else if (!this.countReadHighPriority.equals(other.countReadHighPriority))
            return false;
        if (this.sumTimerReadHighPriority == null) {
            if (other.sumTimerReadHighPriority != null)
                return false;
        }
        else if (!this.sumTimerReadHighPriority.equals(other.sumTimerReadHighPriority))
            return false;
        if (this.minTimerReadHighPriority == null) {
            if (other.minTimerReadHighPriority != null)
                return false;
        }
        else if (!this.minTimerReadHighPriority.equals(other.minTimerReadHighPriority))
            return false;
        if (this.avgTimerReadHighPriority == null) {
            if (other.avgTimerReadHighPriority != null)
                return false;
        }
        else if (!this.avgTimerReadHighPriority.equals(other.avgTimerReadHighPriority))
            return false;
        if (this.maxTimerReadHighPriority == null) {
            if (other.maxTimerReadHighPriority != null)
                return false;
        }
        else if (!this.maxTimerReadHighPriority.equals(other.maxTimerReadHighPriority))
            return false;
        if (this.countReadNoInsert == null) {
            if (other.countReadNoInsert != null)
                return false;
        }
        else if (!this.countReadNoInsert.equals(other.countReadNoInsert))
            return false;
        if (this.sumTimerReadNoInsert == null) {
            if (other.sumTimerReadNoInsert != null)
                return false;
        }
        else if (!this.sumTimerReadNoInsert.equals(other.sumTimerReadNoInsert))
            return false;
        if (this.minTimerReadNoInsert == null) {
            if (other.minTimerReadNoInsert != null)
                return false;
        }
        else if (!this.minTimerReadNoInsert.equals(other.minTimerReadNoInsert))
            return false;
        if (this.avgTimerReadNoInsert == null) {
            if (other.avgTimerReadNoInsert != null)
                return false;
        }
        else if (!this.avgTimerReadNoInsert.equals(other.avgTimerReadNoInsert))
            return false;
        if (this.maxTimerReadNoInsert == null) {
            if (other.maxTimerReadNoInsert != null)
                return false;
        }
        else if (!this.maxTimerReadNoInsert.equals(other.maxTimerReadNoInsert))
            return false;
        if (this.countReadExternal == null) {
            if (other.countReadExternal != null)
                return false;
        }
        else if (!this.countReadExternal.equals(other.countReadExternal))
            return false;
        if (this.sumTimerReadExternal == null) {
            if (other.sumTimerReadExternal != null)
                return false;
        }
        else if (!this.sumTimerReadExternal.equals(other.sumTimerReadExternal))
            return false;
        if (this.minTimerReadExternal == null) {
            if (other.minTimerReadExternal != null)
                return false;
        }
        else if (!this.minTimerReadExternal.equals(other.minTimerReadExternal))
            return false;
        if (this.avgTimerReadExternal == null) {
            if (other.avgTimerReadExternal != null)
                return false;
        }
        else if (!this.avgTimerReadExternal.equals(other.avgTimerReadExternal))
            return false;
        if (this.maxTimerReadExternal == null) {
            if (other.maxTimerReadExternal != null)
                return false;
        }
        else if (!this.maxTimerReadExternal.equals(other.maxTimerReadExternal))
            return false;
        if (this.countWriteAllowWrite == null) {
            if (other.countWriteAllowWrite != null)
                return false;
        }
        else if (!this.countWriteAllowWrite.equals(other.countWriteAllowWrite))
            return false;
        if (this.sumTimerWriteAllowWrite == null) {
            if (other.sumTimerWriteAllowWrite != null)
                return false;
        }
        else if (!this.sumTimerWriteAllowWrite.equals(other.sumTimerWriteAllowWrite))
            return false;
        if (this.minTimerWriteAllowWrite == null) {
            if (other.minTimerWriteAllowWrite != null)
                return false;
        }
        else if (!this.minTimerWriteAllowWrite.equals(other.minTimerWriteAllowWrite))
            return false;
        if (this.avgTimerWriteAllowWrite == null) {
            if (other.avgTimerWriteAllowWrite != null)
                return false;
        }
        else if (!this.avgTimerWriteAllowWrite.equals(other.avgTimerWriteAllowWrite))
            return false;
        if (this.maxTimerWriteAllowWrite == null) {
            if (other.maxTimerWriteAllowWrite != null)
                return false;
        }
        else if (!this.maxTimerWriteAllowWrite.equals(other.maxTimerWriteAllowWrite))
            return false;
        if (this.countWriteConcurrentInsert == null) {
            if (other.countWriteConcurrentInsert != null)
                return false;
        }
        else if (!this.countWriteConcurrentInsert.equals(other.countWriteConcurrentInsert))
            return false;
        if (this.sumTimerWriteConcurrentInsert == null) {
            if (other.sumTimerWriteConcurrentInsert != null)
                return false;
        }
        else if (!this.sumTimerWriteConcurrentInsert.equals(other.sumTimerWriteConcurrentInsert))
            return false;
        if (this.minTimerWriteConcurrentInsert == null) {
            if (other.minTimerWriteConcurrentInsert != null)
                return false;
        }
        else if (!this.minTimerWriteConcurrentInsert.equals(other.minTimerWriteConcurrentInsert))
            return false;
        if (this.avgTimerWriteConcurrentInsert == null) {
            if (other.avgTimerWriteConcurrentInsert != null)
                return false;
        }
        else if (!this.avgTimerWriteConcurrentInsert.equals(other.avgTimerWriteConcurrentInsert))
            return false;
        if (this.maxTimerWriteConcurrentInsert == null) {
            if (other.maxTimerWriteConcurrentInsert != null)
                return false;
        }
        else if (!this.maxTimerWriteConcurrentInsert.equals(other.maxTimerWriteConcurrentInsert))
            return false;
        if (this.countWriteLowPriority == null) {
            if (other.countWriteLowPriority != null)
                return false;
        }
        else if (!this.countWriteLowPriority.equals(other.countWriteLowPriority))
            return false;
        if (this.sumTimerWriteLowPriority == null) {
            if (other.sumTimerWriteLowPriority != null)
                return false;
        }
        else if (!this.sumTimerWriteLowPriority.equals(other.sumTimerWriteLowPriority))
            return false;
        if (this.minTimerWriteLowPriority == null) {
            if (other.minTimerWriteLowPriority != null)
                return false;
        }
        else if (!this.minTimerWriteLowPriority.equals(other.minTimerWriteLowPriority))
            return false;
        if (this.avgTimerWriteLowPriority == null) {
            if (other.avgTimerWriteLowPriority != null)
                return false;
        }
        else if (!this.avgTimerWriteLowPriority.equals(other.avgTimerWriteLowPriority))
            return false;
        if (this.maxTimerWriteLowPriority == null) {
            if (other.maxTimerWriteLowPriority != null)
                return false;
        }
        else if (!this.maxTimerWriteLowPriority.equals(other.maxTimerWriteLowPriority))
            return false;
        if (this.countWriteNormal == null) {
            if (other.countWriteNormal != null)
                return false;
        }
        else if (!this.countWriteNormal.equals(other.countWriteNormal))
            return false;
        if (this.sumTimerWriteNormal == null) {
            if (other.sumTimerWriteNormal != null)
                return false;
        }
        else if (!this.sumTimerWriteNormal.equals(other.sumTimerWriteNormal))
            return false;
        if (this.minTimerWriteNormal == null) {
            if (other.minTimerWriteNormal != null)
                return false;
        }
        else if (!this.minTimerWriteNormal.equals(other.minTimerWriteNormal))
            return false;
        if (this.avgTimerWriteNormal == null) {
            if (other.avgTimerWriteNormal != null)
                return false;
        }
        else if (!this.avgTimerWriteNormal.equals(other.avgTimerWriteNormal))
            return false;
        if (this.maxTimerWriteNormal == null) {
            if (other.maxTimerWriteNormal != null)
                return false;
        }
        else if (!this.maxTimerWriteNormal.equals(other.maxTimerWriteNormal))
            return false;
        if (this.countWriteExternal == null) {
            if (other.countWriteExternal != null)
                return false;
        }
        else if (!this.countWriteExternal.equals(other.countWriteExternal))
            return false;
        if (this.sumTimerWriteExternal == null) {
            if (other.sumTimerWriteExternal != null)
                return false;
        }
        else if (!this.sumTimerWriteExternal.equals(other.sumTimerWriteExternal))
            return false;
        if (this.minTimerWriteExternal == null) {
            if (other.minTimerWriteExternal != null)
                return false;
        }
        else if (!this.minTimerWriteExternal.equals(other.minTimerWriteExternal))
            return false;
        if (this.avgTimerWriteExternal == null) {
            if (other.avgTimerWriteExternal != null)
                return false;
        }
        else if (!this.avgTimerWriteExternal.equals(other.avgTimerWriteExternal))
            return false;
        if (this.maxTimerWriteExternal == null) {
            if (other.maxTimerWriteExternal != null)
                return false;
        }
        else if (!this.maxTimerWriteExternal.equals(other.maxTimerWriteExternal))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.objectType == null) ? 0 : this.objectType.hashCode());
        result = prime * result + ((this.objectSchema == null) ? 0 : this.objectSchema.hashCode());
        result = prime * result + ((this.objectName == null) ? 0 : this.objectName.hashCode());
        result = prime * result + ((this.countStar == null) ? 0 : this.countStar.hashCode());
        result = prime * result + ((this.sumTimerWait == null) ? 0 : this.sumTimerWait.hashCode());
        result = prime * result + ((this.minTimerWait == null) ? 0 : this.minTimerWait.hashCode());
        result = prime * result + ((this.avgTimerWait == null) ? 0 : this.avgTimerWait.hashCode());
        result = prime * result + ((this.maxTimerWait == null) ? 0 : this.maxTimerWait.hashCode());
        result = prime * result + ((this.countRead == null) ? 0 : this.countRead.hashCode());
        result = prime * result + ((this.sumTimerRead == null) ? 0 : this.sumTimerRead.hashCode());
        result = prime * result + ((this.minTimerRead == null) ? 0 : this.minTimerRead.hashCode());
        result = prime * result + ((this.avgTimerRead == null) ? 0 : this.avgTimerRead.hashCode());
        result = prime * result + ((this.maxTimerRead == null) ? 0 : this.maxTimerRead.hashCode());
        result = prime * result + ((this.countWrite == null) ? 0 : this.countWrite.hashCode());
        result = prime * result + ((this.sumTimerWrite == null) ? 0 : this.sumTimerWrite.hashCode());
        result = prime * result + ((this.minTimerWrite == null) ? 0 : this.minTimerWrite.hashCode());
        result = prime * result + ((this.avgTimerWrite == null) ? 0 : this.avgTimerWrite.hashCode());
        result = prime * result + ((this.maxTimerWrite == null) ? 0 : this.maxTimerWrite.hashCode());
        result = prime * result + ((this.countReadNormal == null) ? 0 : this.countReadNormal.hashCode());
        result = prime * result + ((this.sumTimerReadNormal == null) ? 0 : this.sumTimerReadNormal.hashCode());
        result = prime * result + ((this.minTimerReadNormal == null) ? 0 : this.minTimerReadNormal.hashCode());
        result = prime * result + ((this.avgTimerReadNormal == null) ? 0 : this.avgTimerReadNormal.hashCode());
        result = prime * result + ((this.maxTimerReadNormal == null) ? 0 : this.maxTimerReadNormal.hashCode());
        result = prime * result + ((this.countReadWithSharedLocks == null) ? 0 : this.countReadWithSharedLocks.hashCode());
        result = prime * result + ((this.sumTimerReadWithSharedLocks == null) ? 0 : this.sumTimerReadWithSharedLocks.hashCode());
        result = prime * result + ((this.minTimerReadWithSharedLocks == null) ? 0 : this.minTimerReadWithSharedLocks.hashCode());
        result = prime * result + ((this.avgTimerReadWithSharedLocks == null) ? 0 : this.avgTimerReadWithSharedLocks.hashCode());
        result = prime * result + ((this.maxTimerReadWithSharedLocks == null) ? 0 : this.maxTimerReadWithSharedLocks.hashCode());
        result = prime * result + ((this.countReadHighPriority == null) ? 0 : this.countReadHighPriority.hashCode());
        result = prime * result + ((this.sumTimerReadHighPriority == null) ? 0 : this.sumTimerReadHighPriority.hashCode());
        result = prime * result + ((this.minTimerReadHighPriority == null) ? 0 : this.minTimerReadHighPriority.hashCode());
        result = prime * result + ((this.avgTimerReadHighPriority == null) ? 0 : this.avgTimerReadHighPriority.hashCode());
        result = prime * result + ((this.maxTimerReadHighPriority == null) ? 0 : this.maxTimerReadHighPriority.hashCode());
        result = prime * result + ((this.countReadNoInsert == null) ? 0 : this.countReadNoInsert.hashCode());
        result = prime * result + ((this.sumTimerReadNoInsert == null) ? 0 : this.sumTimerReadNoInsert.hashCode());
        result = prime * result + ((this.minTimerReadNoInsert == null) ? 0 : this.minTimerReadNoInsert.hashCode());
        result = prime * result + ((this.avgTimerReadNoInsert == null) ? 0 : this.avgTimerReadNoInsert.hashCode());
        result = prime * result + ((this.maxTimerReadNoInsert == null) ? 0 : this.maxTimerReadNoInsert.hashCode());
        result = prime * result + ((this.countReadExternal == null) ? 0 : this.countReadExternal.hashCode());
        result = prime * result + ((this.sumTimerReadExternal == null) ? 0 : this.sumTimerReadExternal.hashCode());
        result = prime * result + ((this.minTimerReadExternal == null) ? 0 : this.minTimerReadExternal.hashCode());
        result = prime * result + ((this.avgTimerReadExternal == null) ? 0 : this.avgTimerReadExternal.hashCode());
        result = prime * result + ((this.maxTimerReadExternal == null) ? 0 : this.maxTimerReadExternal.hashCode());
        result = prime * result + ((this.countWriteAllowWrite == null) ? 0 : this.countWriteAllowWrite.hashCode());
        result = prime * result + ((this.sumTimerWriteAllowWrite == null) ? 0 : this.sumTimerWriteAllowWrite.hashCode());
        result = prime * result + ((this.minTimerWriteAllowWrite == null) ? 0 : this.minTimerWriteAllowWrite.hashCode());
        result = prime * result + ((this.avgTimerWriteAllowWrite == null) ? 0 : this.avgTimerWriteAllowWrite.hashCode());
        result = prime * result + ((this.maxTimerWriteAllowWrite == null) ? 0 : this.maxTimerWriteAllowWrite.hashCode());
        result = prime * result + ((this.countWriteConcurrentInsert == null) ? 0 : this.countWriteConcurrentInsert.hashCode());
        result = prime * result + ((this.sumTimerWriteConcurrentInsert == null) ? 0 : this.sumTimerWriteConcurrentInsert.hashCode());
        result = prime * result + ((this.minTimerWriteConcurrentInsert == null) ? 0 : this.minTimerWriteConcurrentInsert.hashCode());
        result = prime * result + ((this.avgTimerWriteConcurrentInsert == null) ? 0 : this.avgTimerWriteConcurrentInsert.hashCode());
        result = prime * result + ((this.maxTimerWriteConcurrentInsert == null) ? 0 : this.maxTimerWriteConcurrentInsert.hashCode());
        result = prime * result + ((this.countWriteLowPriority == null) ? 0 : this.countWriteLowPriority.hashCode());
        result = prime * result + ((this.sumTimerWriteLowPriority == null) ? 0 : this.sumTimerWriteLowPriority.hashCode());
        result = prime * result + ((this.minTimerWriteLowPriority == null) ? 0 : this.minTimerWriteLowPriority.hashCode());
        result = prime * result + ((this.avgTimerWriteLowPriority == null) ? 0 : this.avgTimerWriteLowPriority.hashCode());
        result = prime * result + ((this.maxTimerWriteLowPriority == null) ? 0 : this.maxTimerWriteLowPriority.hashCode());
        result = prime * result + ((this.countWriteNormal == null) ? 0 : this.countWriteNormal.hashCode());
        result = prime * result + ((this.sumTimerWriteNormal == null) ? 0 : this.sumTimerWriteNormal.hashCode());
        result = prime * result + ((this.minTimerWriteNormal == null) ? 0 : this.minTimerWriteNormal.hashCode());
        result = prime * result + ((this.avgTimerWriteNormal == null) ? 0 : this.avgTimerWriteNormal.hashCode());
        result = prime * result + ((this.maxTimerWriteNormal == null) ? 0 : this.maxTimerWriteNormal.hashCode());
        result = prime * result + ((this.countWriteExternal == null) ? 0 : this.countWriteExternal.hashCode());
        result = prime * result + ((this.sumTimerWriteExternal == null) ? 0 : this.sumTimerWriteExternal.hashCode());
        result = prime * result + ((this.minTimerWriteExternal == null) ? 0 : this.minTimerWriteExternal.hashCode());
        result = prime * result + ((this.avgTimerWriteExternal == null) ? 0 : this.avgTimerWriteExternal.hashCode());
        result = prime * result + ((this.maxTimerWriteExternal == null) ? 0 : this.maxTimerWriteExternal.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TableLockWaitsSummaryByTable (");

        sb.append(objectType);
        sb.append(", ").append(objectSchema);
        sb.append(", ").append(objectName);
        sb.append(", ").append(countStar);
        sb.append(", ").append(sumTimerWait);
        sb.append(", ").append(minTimerWait);
        sb.append(", ").append(avgTimerWait);
        sb.append(", ").append(maxTimerWait);
        sb.append(", ").append(countRead);
        sb.append(", ").append(sumTimerRead);
        sb.append(", ").append(minTimerRead);
        sb.append(", ").append(avgTimerRead);
        sb.append(", ").append(maxTimerRead);
        sb.append(", ").append(countWrite);
        sb.append(", ").append(sumTimerWrite);
        sb.append(", ").append(minTimerWrite);
        sb.append(", ").append(avgTimerWrite);
        sb.append(", ").append(maxTimerWrite);
        sb.append(", ").append(countReadNormal);
        sb.append(", ").append(sumTimerReadNormal);
        sb.append(", ").append(minTimerReadNormal);
        sb.append(", ").append(avgTimerReadNormal);
        sb.append(", ").append(maxTimerReadNormal);
        sb.append(", ").append(countReadWithSharedLocks);
        sb.append(", ").append(sumTimerReadWithSharedLocks);
        sb.append(", ").append(minTimerReadWithSharedLocks);
        sb.append(", ").append(avgTimerReadWithSharedLocks);
        sb.append(", ").append(maxTimerReadWithSharedLocks);
        sb.append(", ").append(countReadHighPriority);
        sb.append(", ").append(sumTimerReadHighPriority);
        sb.append(", ").append(minTimerReadHighPriority);
        sb.append(", ").append(avgTimerReadHighPriority);
        sb.append(", ").append(maxTimerReadHighPriority);
        sb.append(", ").append(countReadNoInsert);
        sb.append(", ").append(sumTimerReadNoInsert);
        sb.append(", ").append(minTimerReadNoInsert);
        sb.append(", ").append(avgTimerReadNoInsert);
        sb.append(", ").append(maxTimerReadNoInsert);
        sb.append(", ").append(countReadExternal);
        sb.append(", ").append(sumTimerReadExternal);
        sb.append(", ").append(minTimerReadExternal);
        sb.append(", ").append(avgTimerReadExternal);
        sb.append(", ").append(maxTimerReadExternal);
        sb.append(", ").append(countWriteAllowWrite);
        sb.append(", ").append(sumTimerWriteAllowWrite);
        sb.append(", ").append(minTimerWriteAllowWrite);
        sb.append(", ").append(avgTimerWriteAllowWrite);
        sb.append(", ").append(maxTimerWriteAllowWrite);
        sb.append(", ").append(countWriteConcurrentInsert);
        sb.append(", ").append(sumTimerWriteConcurrentInsert);
        sb.append(", ").append(minTimerWriteConcurrentInsert);
        sb.append(", ").append(avgTimerWriteConcurrentInsert);
        sb.append(", ").append(maxTimerWriteConcurrentInsert);
        sb.append(", ").append(countWriteLowPriority);
        sb.append(", ").append(sumTimerWriteLowPriority);
        sb.append(", ").append(minTimerWriteLowPriority);
        sb.append(", ").append(avgTimerWriteLowPriority);
        sb.append(", ").append(maxTimerWriteLowPriority);
        sb.append(", ").append(countWriteNormal);
        sb.append(", ").append(sumTimerWriteNormal);
        sb.append(", ").append(minTimerWriteNormal);
        sb.append(", ").append(avgTimerWriteNormal);
        sb.append(", ").append(maxTimerWriteNormal);
        sb.append(", ").append(countWriteExternal);
        sb.append(", ").append(sumTimerWriteExternal);
        sb.append(", ").append(minTimerWriteExternal);
        sb.append(", ").append(avgTimerWriteExternal);
        sb.append(", ").append(maxTimerWriteExternal);

        sb.append(")");
        return sb.toString();
    }
}
