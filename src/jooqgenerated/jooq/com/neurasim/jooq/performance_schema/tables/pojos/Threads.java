/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.ThreadsExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.ThreadsHistory;
import com.neurasim.jooq.performance_schema.enums.ThreadsInstrumented;
import com.neurasim.jooq.performance_schema.enums.ThreadsTelemetryActive;

import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Threads implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong threadId;
    private final String name;
    private final String type;
    private final ULong processlistId;
    private final String processlistUser;
    private final String processlistHost;
    private final String processlistDb;
    private final String processlistCommand;
    private final Long processlistTime;
    private final String processlistState;
    private final String processlistInfo;
    private final ULong parentThreadId;
    private final String role;
    private final ThreadsInstrumented instrumented;
    private final ThreadsHistory history;
    private final String connectionType;
    private final ULong threadOsId;
    private final String resourceGroup;
    private final ThreadsExecutionEngine executionEngine;
    private final ULong controlledMemory;
    private final ULong maxControlledMemory;
    private final ULong totalMemory;
    private final ULong maxTotalMemory;
    private final ThreadsTelemetryActive telemetryActive;

    public Threads(Threads value) {
        this.threadId = value.threadId;
        this.name = value.name;
        this.type = value.type;
        this.processlistId = value.processlistId;
        this.processlistUser = value.processlistUser;
        this.processlistHost = value.processlistHost;
        this.processlistDb = value.processlistDb;
        this.processlistCommand = value.processlistCommand;
        this.processlistTime = value.processlistTime;
        this.processlistState = value.processlistState;
        this.processlistInfo = value.processlistInfo;
        this.parentThreadId = value.parentThreadId;
        this.role = value.role;
        this.instrumented = value.instrumented;
        this.history = value.history;
        this.connectionType = value.connectionType;
        this.threadOsId = value.threadOsId;
        this.resourceGroup = value.resourceGroup;
        this.executionEngine = value.executionEngine;
        this.controlledMemory = value.controlledMemory;
        this.maxControlledMemory = value.maxControlledMemory;
        this.totalMemory = value.totalMemory;
        this.maxTotalMemory = value.maxTotalMemory;
        this.telemetryActive = value.telemetryActive;
    }

    public Threads(
        ULong threadId,
        String name,
        String type,
        ULong processlistId,
        String processlistUser,
        String processlistHost,
        String processlistDb,
        String processlistCommand,
        Long processlistTime,
        String processlistState,
        String processlistInfo,
        ULong parentThreadId,
        String role,
        ThreadsInstrumented instrumented,
        ThreadsHistory history,
        String connectionType,
        ULong threadOsId,
        String resourceGroup,
        ThreadsExecutionEngine executionEngine,
        ULong controlledMemory,
        ULong maxControlledMemory,
        ULong totalMemory,
        ULong maxTotalMemory,
        ThreadsTelemetryActive telemetryActive
    ) {
        this.threadId = threadId;
        this.name = name;
        this.type = type;
        this.processlistId = processlistId;
        this.processlistUser = processlistUser;
        this.processlistHost = processlistHost;
        this.processlistDb = processlistDb;
        this.processlistCommand = processlistCommand;
        this.processlistTime = processlistTime;
        this.processlistState = processlistState;
        this.processlistInfo = processlistInfo;
        this.parentThreadId = parentThreadId;
        this.role = role;
        this.instrumented = instrumented;
        this.history = history;
        this.connectionType = connectionType;
        this.threadOsId = threadOsId;
        this.resourceGroup = resourceGroup;
        this.executionEngine = executionEngine;
        this.controlledMemory = controlledMemory;
        this.maxControlledMemory = maxControlledMemory;
        this.totalMemory = totalMemory;
        this.maxTotalMemory = maxTotalMemory;
        this.telemetryActive = telemetryActive;
    }

    /**
     * Getter for <code>performance_schema.threads.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for <code>performance_schema.threads.NAME</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>performance_schema.threads.TYPE</code>.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_ID</code>.
     */
    public ULong getProcesslistId() {
        return this.processlistId;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_USER</code>.
     */
    public String getProcesslistUser() {
        return this.processlistUser;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_HOST</code>.
     */
    public String getProcesslistHost() {
        return this.processlistHost;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_DB</code>.
     */
    public String getProcesslistDb() {
        return this.processlistDb;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_COMMAND</code>.
     */
    public String getProcesslistCommand() {
        return this.processlistCommand;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_TIME</code>.
     */
    public Long getProcesslistTime() {
        return this.processlistTime;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_STATE</code>.
     */
    public String getProcesslistState() {
        return this.processlistState;
    }

    /**
     * Getter for <code>performance_schema.threads.PROCESSLIST_INFO</code>.
     */
    public String getProcesslistInfo() {
        return this.processlistInfo;
    }

    /**
     * Getter for <code>performance_schema.threads.PARENT_THREAD_ID</code>.
     */
    public ULong getParentThreadId() {
        return this.parentThreadId;
    }

    /**
     * Getter for <code>performance_schema.threads.ROLE</code>.
     */
    public String getRole() {
        return this.role;
    }

    /**
     * Getter for <code>performance_schema.threads.INSTRUMENTED</code>.
     */
    public ThreadsInstrumented getInstrumented() {
        return this.instrumented;
    }

    /**
     * Getter for <code>performance_schema.threads.HISTORY</code>.
     */
    public ThreadsHistory getHistory() {
        return this.history;
    }

    /**
     * Getter for <code>performance_schema.threads.CONNECTION_TYPE</code>.
     */
    public String getConnectionType() {
        return this.connectionType;
    }

    /**
     * Getter for <code>performance_schema.threads.THREAD_OS_ID</code>.
     */
    public ULong getThreadOsId() {
        return this.threadOsId;
    }

    /**
     * Getter for <code>performance_schema.threads.RESOURCE_GROUP</code>.
     */
    public String getResourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Getter for <code>performance_schema.threads.EXECUTION_ENGINE</code>.
     */
    public ThreadsExecutionEngine getExecutionEngine() {
        return this.executionEngine;
    }

    /**
     * Getter for <code>performance_schema.threads.CONTROLLED_MEMORY</code>.
     */
    public ULong getControlledMemory() {
        return this.controlledMemory;
    }

    /**
     * Getter for <code>performance_schema.threads.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return this.maxControlledMemory;
    }

    /**
     * Getter for <code>performance_schema.threads.TOTAL_MEMORY</code>.
     */
    public ULong getTotalMemory() {
        return this.totalMemory;
    }

    /**
     * Getter for <code>performance_schema.threads.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return this.maxTotalMemory;
    }

    /**
     * Getter for <code>performance_schema.threads.TELEMETRY_ACTIVE</code>.
     */
    public ThreadsTelemetryActive getTelemetryActive() {
        return this.telemetryActive;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Threads other = (Threads) obj;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.processlistId == null) {
            if (other.processlistId != null)
                return false;
        }
        else if (!this.processlistId.equals(other.processlistId))
            return false;
        if (this.processlistUser == null) {
            if (other.processlistUser != null)
                return false;
        }
        else if (!this.processlistUser.equals(other.processlistUser))
            return false;
        if (this.processlistHost == null) {
            if (other.processlistHost != null)
                return false;
        }
        else if (!this.processlistHost.equals(other.processlistHost))
            return false;
        if (this.processlistDb == null) {
            if (other.processlistDb != null)
                return false;
        }
        else if (!this.processlistDb.equals(other.processlistDb))
            return false;
        if (this.processlistCommand == null) {
            if (other.processlistCommand != null)
                return false;
        }
        else if (!this.processlistCommand.equals(other.processlistCommand))
            return false;
        if (this.processlistTime == null) {
            if (other.processlistTime != null)
                return false;
        }
        else if (!this.processlistTime.equals(other.processlistTime))
            return false;
        if (this.processlistState == null) {
            if (other.processlistState != null)
                return false;
        }
        else if (!this.processlistState.equals(other.processlistState))
            return false;
        if (this.processlistInfo == null) {
            if (other.processlistInfo != null)
                return false;
        }
        else if (!this.processlistInfo.equals(other.processlistInfo))
            return false;
        if (this.parentThreadId == null) {
            if (other.parentThreadId != null)
                return false;
        }
        else if (!this.parentThreadId.equals(other.parentThreadId))
            return false;
        if (this.role == null) {
            if (other.role != null)
                return false;
        }
        else if (!this.role.equals(other.role))
            return false;
        if (this.instrumented == null) {
            if (other.instrumented != null)
                return false;
        }
        else if (!this.instrumented.equals(other.instrumented))
            return false;
        if (this.history == null) {
            if (other.history != null)
                return false;
        }
        else if (!this.history.equals(other.history))
            return false;
        if (this.connectionType == null) {
            if (other.connectionType != null)
                return false;
        }
        else if (!this.connectionType.equals(other.connectionType))
            return false;
        if (this.threadOsId == null) {
            if (other.threadOsId != null)
                return false;
        }
        else if (!this.threadOsId.equals(other.threadOsId))
            return false;
        if (this.resourceGroup == null) {
            if (other.resourceGroup != null)
                return false;
        }
        else if (!this.resourceGroup.equals(other.resourceGroup))
            return false;
        if (this.executionEngine == null) {
            if (other.executionEngine != null)
                return false;
        }
        else if (!this.executionEngine.equals(other.executionEngine))
            return false;
        if (this.controlledMemory == null) {
            if (other.controlledMemory != null)
                return false;
        }
        else if (!this.controlledMemory.equals(other.controlledMemory))
            return false;
        if (this.maxControlledMemory == null) {
            if (other.maxControlledMemory != null)
                return false;
        }
        else if (!this.maxControlledMemory.equals(other.maxControlledMemory))
            return false;
        if (this.totalMemory == null) {
            if (other.totalMemory != null)
                return false;
        }
        else if (!this.totalMemory.equals(other.totalMemory))
            return false;
        if (this.maxTotalMemory == null) {
            if (other.maxTotalMemory != null)
                return false;
        }
        else if (!this.maxTotalMemory.equals(other.maxTotalMemory))
            return false;
        if (this.telemetryActive == null) {
            if (other.telemetryActive != null)
                return false;
        }
        else if (!this.telemetryActive.equals(other.telemetryActive))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.processlistId == null) ? 0 : this.processlistId.hashCode());
        result = prime * result + ((this.processlistUser == null) ? 0 : this.processlistUser.hashCode());
        result = prime * result + ((this.processlistHost == null) ? 0 : this.processlistHost.hashCode());
        result = prime * result + ((this.processlistDb == null) ? 0 : this.processlistDb.hashCode());
        result = prime * result + ((this.processlistCommand == null) ? 0 : this.processlistCommand.hashCode());
        result = prime * result + ((this.processlistTime == null) ? 0 : this.processlistTime.hashCode());
        result = prime * result + ((this.processlistState == null) ? 0 : this.processlistState.hashCode());
        result = prime * result + ((this.processlistInfo == null) ? 0 : this.processlistInfo.hashCode());
        result = prime * result + ((this.parentThreadId == null) ? 0 : this.parentThreadId.hashCode());
        result = prime * result + ((this.role == null) ? 0 : this.role.hashCode());
        result = prime * result + ((this.instrumented == null) ? 0 : this.instrumented.hashCode());
        result = prime * result + ((this.history == null) ? 0 : this.history.hashCode());
        result = prime * result + ((this.connectionType == null) ? 0 : this.connectionType.hashCode());
        result = prime * result + ((this.threadOsId == null) ? 0 : this.threadOsId.hashCode());
        result = prime * result + ((this.resourceGroup == null) ? 0 : this.resourceGroup.hashCode());
        result = prime * result + ((this.executionEngine == null) ? 0 : this.executionEngine.hashCode());
        result = prime * result + ((this.controlledMemory == null) ? 0 : this.controlledMemory.hashCode());
        result = prime * result + ((this.maxControlledMemory == null) ? 0 : this.maxControlledMemory.hashCode());
        result = prime * result + ((this.totalMemory == null) ? 0 : this.totalMemory.hashCode());
        result = prime * result + ((this.maxTotalMemory == null) ? 0 : this.maxTotalMemory.hashCode());
        result = prime * result + ((this.telemetryActive == null) ? 0 : this.telemetryActive.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Threads (");

        sb.append(threadId);
        sb.append(", ").append(name);
        sb.append(", ").append(type);
        sb.append(", ").append(processlistId);
        sb.append(", ").append(processlistUser);
        sb.append(", ").append(processlistHost);
        sb.append(", ").append(processlistDb);
        sb.append(", ").append(processlistCommand);
        sb.append(", ").append(processlistTime);
        sb.append(", ").append(processlistState);
        sb.append(", ").append(processlistInfo);
        sb.append(", ").append(parentThreadId);
        sb.append(", ").append(role);
        sb.append(", ").append(instrumented);
        sb.append(", ").append(history);
        sb.append(", ").append(connectionType);
        sb.append(", ").append(threadOsId);
        sb.append(", ").append(resourceGroup);
        sb.append(", ").append(executionEngine);
        sb.append(", ").append(controlledMemory);
        sb.append(", ").append(maxControlledMemory);
        sb.append(", ").append(totalMemory);
        sb.append(", ").append(maxTotalMemory);
        sb.append(", ").append(telemetryActive);

        sb.append(")");
        return sb.toString();
    }
}
