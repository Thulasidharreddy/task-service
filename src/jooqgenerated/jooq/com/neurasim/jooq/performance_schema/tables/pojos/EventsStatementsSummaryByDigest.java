/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsSummaryByDigest implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String schemaName;
    private final String digest;
    private final String digestText;
    private final ULong countStar;
    private final ULong sumTimerWait;
    private final ULong minTimerWait;
    private final ULong avgTimerWait;
    private final ULong maxTimerWait;
    private final ULong sumLockTime;
    private final ULong sumErrors;
    private final ULong sumWarnings;
    private final ULong sumRowsAffected;
    private final ULong sumRowsSent;
    private final ULong sumRowsExamined;
    private final ULong sumCreatedTmpDiskTables;
    private final ULong sumCreatedTmpTables;
    private final ULong sumSelectFullJoin;
    private final ULong sumSelectFullRangeJoin;
    private final ULong sumSelectRange;
    private final ULong sumSelectRangeCheck;
    private final ULong sumSelectScan;
    private final ULong sumSortMergePasses;
    private final ULong sumSortRange;
    private final ULong sumSortRows;
    private final ULong sumSortScan;
    private final ULong sumNoIndexUsed;
    private final ULong sumNoGoodIndexUsed;
    private final ULong sumCpuTime;
    private final ULong maxControlledMemory;
    private final ULong maxTotalMemory;
    private final ULong countSecondary;
    private final LocalDateTime firstSeen;
    private final LocalDateTime lastSeen;
    private final ULong quantile_95;
    private final ULong quantile_99;
    private final ULong quantile_999;
    private final String querySampleText;
    private final LocalDateTime querySampleSeen;
    private final ULong querySampleTimerWait;

    public EventsStatementsSummaryByDigest(EventsStatementsSummaryByDigest value) {
        this.schemaName = value.schemaName;
        this.digest = value.digest;
        this.digestText = value.digestText;
        this.countStar = value.countStar;
        this.sumTimerWait = value.sumTimerWait;
        this.minTimerWait = value.minTimerWait;
        this.avgTimerWait = value.avgTimerWait;
        this.maxTimerWait = value.maxTimerWait;
        this.sumLockTime = value.sumLockTime;
        this.sumErrors = value.sumErrors;
        this.sumWarnings = value.sumWarnings;
        this.sumRowsAffected = value.sumRowsAffected;
        this.sumRowsSent = value.sumRowsSent;
        this.sumRowsExamined = value.sumRowsExamined;
        this.sumCreatedTmpDiskTables = value.sumCreatedTmpDiskTables;
        this.sumCreatedTmpTables = value.sumCreatedTmpTables;
        this.sumSelectFullJoin = value.sumSelectFullJoin;
        this.sumSelectFullRangeJoin = value.sumSelectFullRangeJoin;
        this.sumSelectRange = value.sumSelectRange;
        this.sumSelectRangeCheck = value.sumSelectRangeCheck;
        this.sumSelectScan = value.sumSelectScan;
        this.sumSortMergePasses = value.sumSortMergePasses;
        this.sumSortRange = value.sumSortRange;
        this.sumSortRows = value.sumSortRows;
        this.sumSortScan = value.sumSortScan;
        this.sumNoIndexUsed = value.sumNoIndexUsed;
        this.sumNoGoodIndexUsed = value.sumNoGoodIndexUsed;
        this.sumCpuTime = value.sumCpuTime;
        this.maxControlledMemory = value.maxControlledMemory;
        this.maxTotalMemory = value.maxTotalMemory;
        this.countSecondary = value.countSecondary;
        this.firstSeen = value.firstSeen;
        this.lastSeen = value.lastSeen;
        this.quantile_95 = value.quantile_95;
        this.quantile_99 = value.quantile_99;
        this.quantile_999 = value.quantile_999;
        this.querySampleText = value.querySampleText;
        this.querySampleSeen = value.querySampleSeen;
        this.querySampleTimerWait = value.querySampleTimerWait;
    }

    public EventsStatementsSummaryByDigest(
        String schemaName,
        String digest,
        String digestText,
        ULong countStar,
        ULong sumTimerWait,
        ULong minTimerWait,
        ULong avgTimerWait,
        ULong maxTimerWait,
        ULong sumLockTime,
        ULong sumErrors,
        ULong sumWarnings,
        ULong sumRowsAffected,
        ULong sumRowsSent,
        ULong sumRowsExamined,
        ULong sumCreatedTmpDiskTables,
        ULong sumCreatedTmpTables,
        ULong sumSelectFullJoin,
        ULong sumSelectFullRangeJoin,
        ULong sumSelectRange,
        ULong sumSelectRangeCheck,
        ULong sumSelectScan,
        ULong sumSortMergePasses,
        ULong sumSortRange,
        ULong sumSortRows,
        ULong sumSortScan,
        ULong sumNoIndexUsed,
        ULong sumNoGoodIndexUsed,
        ULong sumCpuTime,
        ULong maxControlledMemory,
        ULong maxTotalMemory,
        ULong countSecondary,
        LocalDateTime firstSeen,
        LocalDateTime lastSeen,
        ULong quantile_95,
        ULong quantile_99,
        ULong quantile_999,
        String querySampleText,
        LocalDateTime querySampleSeen,
        ULong querySampleTimerWait
    ) {
        this.schemaName = schemaName;
        this.digest = digest;
        this.digestText = digestText;
        this.countStar = countStar;
        this.sumTimerWait = sumTimerWait;
        this.minTimerWait = minTimerWait;
        this.avgTimerWait = avgTimerWait;
        this.maxTimerWait = maxTimerWait;
        this.sumLockTime = sumLockTime;
        this.sumErrors = sumErrors;
        this.sumWarnings = sumWarnings;
        this.sumRowsAffected = sumRowsAffected;
        this.sumRowsSent = sumRowsSent;
        this.sumRowsExamined = sumRowsExamined;
        this.sumCreatedTmpDiskTables = sumCreatedTmpDiskTables;
        this.sumCreatedTmpTables = sumCreatedTmpTables;
        this.sumSelectFullJoin = sumSelectFullJoin;
        this.sumSelectFullRangeJoin = sumSelectFullRangeJoin;
        this.sumSelectRange = sumSelectRange;
        this.sumSelectRangeCheck = sumSelectRangeCheck;
        this.sumSelectScan = sumSelectScan;
        this.sumSortMergePasses = sumSortMergePasses;
        this.sumSortRange = sumSortRange;
        this.sumSortRows = sumSortRows;
        this.sumSortScan = sumSortScan;
        this.sumNoIndexUsed = sumNoIndexUsed;
        this.sumNoGoodIndexUsed = sumNoGoodIndexUsed;
        this.sumCpuTime = sumCpuTime;
        this.maxControlledMemory = maxControlledMemory;
        this.maxTotalMemory = maxTotalMemory;
        this.countSecondary = countSecondary;
        this.firstSeen = firstSeen;
        this.lastSeen = lastSeen;
        this.quantile_95 = quantile_95;
        this.quantile_99 = quantile_99;
        this.quantile_999 = quantile_999;
        this.querySampleText = querySampleText;
        this.querySampleSeen = querySampleSeen;
        this.querySampleTimerWait = querySampleTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SCHEMA_NAME</code>.
     */
    public String getSchemaName() {
        return this.schemaName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.DIGEST</code>.
     */
    public String getDigest() {
        return this.digest;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.DIGEST_TEXT</code>.
     */
    public String getDigestText() {
        return this.digestText;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.COUNT_STAR</code>.
     */
    public ULong getCountStar() {
        return this.countStar;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_TIMER_WAIT</code>.
     */
    public ULong getSumTimerWait() {
        return this.sumTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.MIN_TIMER_WAIT</code>.
     */
    public ULong getMinTimerWait() {
        return this.minTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.AVG_TIMER_WAIT</code>.
     */
    public ULong getAvgTimerWait() {
        return this.avgTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.MAX_TIMER_WAIT</code>.
     */
    public ULong getMaxTimerWait() {
        return this.maxTimerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_LOCK_TIME</code>.
     */
    public ULong getSumLockTime() {
        return this.sumLockTime;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_ERRORS</code>.
     */
    public ULong getSumErrors() {
        return this.sumErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_WARNINGS</code>.
     */
    public ULong getSumWarnings() {
        return this.sumWarnings;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_ROWS_AFFECTED</code>.
     */
    public ULong getSumRowsAffected() {
        return this.sumRowsAffected;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_ROWS_SENT</code>.
     */
    public ULong getSumRowsSent() {
        return this.sumRowsSent;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_ROWS_EXAMINED</code>.
     */
    public ULong getSumRowsExamined() {
        return this.sumRowsExamined;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_CREATED_TMP_DISK_TABLES</code>.
     */
    public ULong getSumCreatedTmpDiskTables() {
        return this.sumCreatedTmpDiskTables;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_CREATED_TMP_TABLES</code>.
     */
    public ULong getSumCreatedTmpTables() {
        return this.sumCreatedTmpTables;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SELECT_FULL_JOIN</code>.
     */
    public ULong getSumSelectFullJoin() {
        return this.sumSelectFullJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SELECT_FULL_RANGE_JOIN</code>.
     */
    public ULong getSumSelectFullRangeJoin() {
        return this.sumSelectFullRangeJoin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SELECT_RANGE</code>.
     */
    public ULong getSumSelectRange() {
        return this.sumSelectRange;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SELECT_RANGE_CHECK</code>.
     */
    public ULong getSumSelectRangeCheck() {
        return this.sumSelectRangeCheck;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SELECT_SCAN</code>.
     */
    public ULong getSumSelectScan() {
        return this.sumSelectScan;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SORT_MERGE_PASSES</code>.
     */
    public ULong getSumSortMergePasses() {
        return this.sumSortMergePasses;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SORT_RANGE</code>.
     */
    public ULong getSumSortRange() {
        return this.sumSortRange;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SORT_ROWS</code>.
     */
    public ULong getSumSortRows() {
        return this.sumSortRows;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_SORT_SCAN</code>.
     */
    public ULong getSumSortScan() {
        return this.sumSortScan;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_NO_INDEX_USED</code>.
     */
    public ULong getSumNoIndexUsed() {
        return this.sumNoIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_NO_GOOD_INDEX_USED</code>.
     */
    public ULong getSumNoGoodIndexUsed() {
        return this.sumNoGoodIndexUsed;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.SUM_CPU_TIME</code>.
     */
    public ULong getSumCpuTime() {
        return this.sumCpuTime;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return this.maxControlledMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return this.maxTotalMemory;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.COUNT_SECONDARY</code>.
     */
    public ULong getCountSecondary() {
        return this.countSecondary;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.FIRST_SEEN</code>.
     */
    public LocalDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.LAST_SEEN</code>.
     */
    public LocalDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUANTILE_95</code>.
     */
    public ULong getQuantile_95() {
        return this.quantile_95;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUANTILE_99</code>.
     */
    public ULong getQuantile_99() {
        return this.quantile_99;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUANTILE_999</code>.
     */
    public ULong getQuantile_999() {
        return this.quantile_999;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUERY_SAMPLE_TEXT</code>.
     */
    public String getQuerySampleText() {
        return this.querySampleText;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUERY_SAMPLE_SEEN</code>.
     */
    public LocalDateTime getQuerySampleSeen() {
        return this.querySampleSeen;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_summary_by_digest.QUERY_SAMPLE_TIMER_WAIT</code>.
     */
    public ULong getQuerySampleTimerWait() {
        return this.querySampleTimerWait;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final EventsStatementsSummaryByDigest other = (EventsStatementsSummaryByDigest) obj;
        if (this.schemaName == null) {
            if (other.schemaName != null)
                return false;
        }
        else if (!this.schemaName.equals(other.schemaName))
            return false;
        if (this.digest == null) {
            if (other.digest != null)
                return false;
        }
        else if (!this.digest.equals(other.digest))
            return false;
        if (this.digestText == null) {
            if (other.digestText != null)
                return false;
        }
        else if (!this.digestText.equals(other.digestText))
            return false;
        if (this.countStar == null) {
            if (other.countStar != null)
                return false;
        }
        else if (!this.countStar.equals(other.countStar))
            return false;
        if (this.sumTimerWait == null) {
            if (other.sumTimerWait != null)
                return false;
        }
        else if (!this.sumTimerWait.equals(other.sumTimerWait))
            return false;
        if (this.minTimerWait == null) {
            if (other.minTimerWait != null)
                return false;
        }
        else if (!this.minTimerWait.equals(other.minTimerWait))
            return false;
        if (this.avgTimerWait == null) {
            if (other.avgTimerWait != null)
                return false;
        }
        else if (!this.avgTimerWait.equals(other.avgTimerWait))
            return false;
        if (this.maxTimerWait == null) {
            if (other.maxTimerWait != null)
                return false;
        }
        else if (!this.maxTimerWait.equals(other.maxTimerWait))
            return false;
        if (this.sumLockTime == null) {
            if (other.sumLockTime != null)
                return false;
        }
        else if (!this.sumLockTime.equals(other.sumLockTime))
            return false;
        if (this.sumErrors == null) {
            if (other.sumErrors != null)
                return false;
        }
        else if (!this.sumErrors.equals(other.sumErrors))
            return false;
        if (this.sumWarnings == null) {
            if (other.sumWarnings != null)
                return false;
        }
        else if (!this.sumWarnings.equals(other.sumWarnings))
            return false;
        if (this.sumRowsAffected == null) {
            if (other.sumRowsAffected != null)
                return false;
        }
        else if (!this.sumRowsAffected.equals(other.sumRowsAffected))
            return false;
        if (this.sumRowsSent == null) {
            if (other.sumRowsSent != null)
                return false;
        }
        else if (!this.sumRowsSent.equals(other.sumRowsSent))
            return false;
        if (this.sumRowsExamined == null) {
            if (other.sumRowsExamined != null)
                return false;
        }
        else if (!this.sumRowsExamined.equals(other.sumRowsExamined))
            return false;
        if (this.sumCreatedTmpDiskTables == null) {
            if (other.sumCreatedTmpDiskTables != null)
                return false;
        }
        else if (!this.sumCreatedTmpDiskTables.equals(other.sumCreatedTmpDiskTables))
            return false;
        if (this.sumCreatedTmpTables == null) {
            if (other.sumCreatedTmpTables != null)
                return false;
        }
        else if (!this.sumCreatedTmpTables.equals(other.sumCreatedTmpTables))
            return false;
        if (this.sumSelectFullJoin == null) {
            if (other.sumSelectFullJoin != null)
                return false;
        }
        else if (!this.sumSelectFullJoin.equals(other.sumSelectFullJoin))
            return false;
        if (this.sumSelectFullRangeJoin == null) {
            if (other.sumSelectFullRangeJoin != null)
                return false;
        }
        else if (!this.sumSelectFullRangeJoin.equals(other.sumSelectFullRangeJoin))
            return false;
        if (this.sumSelectRange == null) {
            if (other.sumSelectRange != null)
                return false;
        }
        else if (!this.sumSelectRange.equals(other.sumSelectRange))
            return false;
        if (this.sumSelectRangeCheck == null) {
            if (other.sumSelectRangeCheck != null)
                return false;
        }
        else if (!this.sumSelectRangeCheck.equals(other.sumSelectRangeCheck))
            return false;
        if (this.sumSelectScan == null) {
            if (other.sumSelectScan != null)
                return false;
        }
        else if (!this.sumSelectScan.equals(other.sumSelectScan))
            return false;
        if (this.sumSortMergePasses == null) {
            if (other.sumSortMergePasses != null)
                return false;
        }
        else if (!this.sumSortMergePasses.equals(other.sumSortMergePasses))
            return false;
        if (this.sumSortRange == null) {
            if (other.sumSortRange != null)
                return false;
        }
        else if (!this.sumSortRange.equals(other.sumSortRange))
            return false;
        if (this.sumSortRows == null) {
            if (other.sumSortRows != null)
                return false;
        }
        else if (!this.sumSortRows.equals(other.sumSortRows))
            return false;
        if (this.sumSortScan == null) {
            if (other.sumSortScan != null)
                return false;
        }
        else if (!this.sumSortScan.equals(other.sumSortScan))
            return false;
        if (this.sumNoIndexUsed == null) {
            if (other.sumNoIndexUsed != null)
                return false;
        }
        else if (!this.sumNoIndexUsed.equals(other.sumNoIndexUsed))
            return false;
        if (this.sumNoGoodIndexUsed == null) {
            if (other.sumNoGoodIndexUsed != null)
                return false;
        }
        else if (!this.sumNoGoodIndexUsed.equals(other.sumNoGoodIndexUsed))
            return false;
        if (this.sumCpuTime == null) {
            if (other.sumCpuTime != null)
                return false;
        }
        else if (!this.sumCpuTime.equals(other.sumCpuTime))
            return false;
        if (this.maxControlledMemory == null) {
            if (other.maxControlledMemory != null)
                return false;
        }
        else if (!this.maxControlledMemory.equals(other.maxControlledMemory))
            return false;
        if (this.maxTotalMemory == null) {
            if (other.maxTotalMemory != null)
                return false;
        }
        else if (!this.maxTotalMemory.equals(other.maxTotalMemory))
            return false;
        if (this.countSecondary == null) {
            if (other.countSecondary != null)
                return false;
        }
        else if (!this.countSecondary.equals(other.countSecondary))
            return false;
        if (this.firstSeen == null) {
            if (other.firstSeen != null)
                return false;
        }
        else if (!this.firstSeen.equals(other.firstSeen))
            return false;
        if (this.lastSeen == null) {
            if (other.lastSeen != null)
                return false;
        }
        else if (!this.lastSeen.equals(other.lastSeen))
            return false;
        if (this.quantile_95 == null) {
            if (other.quantile_95 != null)
                return false;
        }
        else if (!this.quantile_95.equals(other.quantile_95))
            return false;
        if (this.quantile_99 == null) {
            if (other.quantile_99 != null)
                return false;
        }
        else if (!this.quantile_99.equals(other.quantile_99))
            return false;
        if (this.quantile_999 == null) {
            if (other.quantile_999 != null)
                return false;
        }
        else if (!this.quantile_999.equals(other.quantile_999))
            return false;
        if (this.querySampleText == null) {
            if (other.querySampleText != null)
                return false;
        }
        else if (!this.querySampleText.equals(other.querySampleText))
            return false;
        if (this.querySampleSeen == null) {
            if (other.querySampleSeen != null)
                return false;
        }
        else if (!this.querySampleSeen.equals(other.querySampleSeen))
            return false;
        if (this.querySampleTimerWait == null) {
            if (other.querySampleTimerWait != null)
                return false;
        }
        else if (!this.querySampleTimerWait.equals(other.querySampleTimerWait))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.schemaName == null) ? 0 : this.schemaName.hashCode());
        result = prime * result + ((this.digest == null) ? 0 : this.digest.hashCode());
        result = prime * result + ((this.digestText == null) ? 0 : this.digestText.hashCode());
        result = prime * result + ((this.countStar == null) ? 0 : this.countStar.hashCode());
        result = prime * result + ((this.sumTimerWait == null) ? 0 : this.sumTimerWait.hashCode());
        result = prime * result + ((this.minTimerWait == null) ? 0 : this.minTimerWait.hashCode());
        result = prime * result + ((this.avgTimerWait == null) ? 0 : this.avgTimerWait.hashCode());
        result = prime * result + ((this.maxTimerWait == null) ? 0 : this.maxTimerWait.hashCode());
        result = prime * result + ((this.sumLockTime == null) ? 0 : this.sumLockTime.hashCode());
        result = prime * result + ((this.sumErrors == null) ? 0 : this.sumErrors.hashCode());
        result = prime * result + ((this.sumWarnings == null) ? 0 : this.sumWarnings.hashCode());
        result = prime * result + ((this.sumRowsAffected == null) ? 0 : this.sumRowsAffected.hashCode());
        result = prime * result + ((this.sumRowsSent == null) ? 0 : this.sumRowsSent.hashCode());
        result = prime * result + ((this.sumRowsExamined == null) ? 0 : this.sumRowsExamined.hashCode());
        result = prime * result + ((this.sumCreatedTmpDiskTables == null) ? 0 : this.sumCreatedTmpDiskTables.hashCode());
        result = prime * result + ((this.sumCreatedTmpTables == null) ? 0 : this.sumCreatedTmpTables.hashCode());
        result = prime * result + ((this.sumSelectFullJoin == null) ? 0 : this.sumSelectFullJoin.hashCode());
        result = prime * result + ((this.sumSelectFullRangeJoin == null) ? 0 : this.sumSelectFullRangeJoin.hashCode());
        result = prime * result + ((this.sumSelectRange == null) ? 0 : this.sumSelectRange.hashCode());
        result = prime * result + ((this.sumSelectRangeCheck == null) ? 0 : this.sumSelectRangeCheck.hashCode());
        result = prime * result + ((this.sumSelectScan == null) ? 0 : this.sumSelectScan.hashCode());
        result = prime * result + ((this.sumSortMergePasses == null) ? 0 : this.sumSortMergePasses.hashCode());
        result = prime * result + ((this.sumSortRange == null) ? 0 : this.sumSortRange.hashCode());
        result = prime * result + ((this.sumSortRows == null) ? 0 : this.sumSortRows.hashCode());
        result = prime * result + ((this.sumSortScan == null) ? 0 : this.sumSortScan.hashCode());
        result = prime * result + ((this.sumNoIndexUsed == null) ? 0 : this.sumNoIndexUsed.hashCode());
        result = prime * result + ((this.sumNoGoodIndexUsed == null) ? 0 : this.sumNoGoodIndexUsed.hashCode());
        result = prime * result + ((this.sumCpuTime == null) ? 0 : this.sumCpuTime.hashCode());
        result = prime * result + ((this.maxControlledMemory == null) ? 0 : this.maxControlledMemory.hashCode());
        result = prime * result + ((this.maxTotalMemory == null) ? 0 : this.maxTotalMemory.hashCode());
        result = prime * result + ((this.countSecondary == null) ? 0 : this.countSecondary.hashCode());
        result = prime * result + ((this.firstSeen == null) ? 0 : this.firstSeen.hashCode());
        result = prime * result + ((this.lastSeen == null) ? 0 : this.lastSeen.hashCode());
        result = prime * result + ((this.quantile_95 == null) ? 0 : this.quantile_95.hashCode());
        result = prime * result + ((this.quantile_99 == null) ? 0 : this.quantile_99.hashCode());
        result = prime * result + ((this.quantile_999 == null) ? 0 : this.quantile_999.hashCode());
        result = prime * result + ((this.querySampleText == null) ? 0 : this.querySampleText.hashCode());
        result = prime * result + ((this.querySampleSeen == null) ? 0 : this.querySampleSeen.hashCode());
        result = prime * result + ((this.querySampleTimerWait == null) ? 0 : this.querySampleTimerWait.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EventsStatementsSummaryByDigest (");

        sb.append(schemaName);
        sb.append(", ").append(digest);
        sb.append(", ").append(digestText);
        sb.append(", ").append(countStar);
        sb.append(", ").append(sumTimerWait);
        sb.append(", ").append(minTimerWait);
        sb.append(", ").append(avgTimerWait);
        sb.append(", ").append(maxTimerWait);
        sb.append(", ").append(sumLockTime);
        sb.append(", ").append(sumErrors);
        sb.append(", ").append(sumWarnings);
        sb.append(", ").append(sumRowsAffected);
        sb.append(", ").append(sumRowsSent);
        sb.append(", ").append(sumRowsExamined);
        sb.append(", ").append(sumCreatedTmpDiskTables);
        sb.append(", ").append(sumCreatedTmpTables);
        sb.append(", ").append(sumSelectFullJoin);
        sb.append(", ").append(sumSelectFullRangeJoin);
        sb.append(", ").append(sumSelectRange);
        sb.append(", ").append(sumSelectRangeCheck);
        sb.append(", ").append(sumSelectScan);
        sb.append(", ").append(sumSortMergePasses);
        sb.append(", ").append(sumSortRange);
        sb.append(", ").append(sumSortRows);
        sb.append(", ").append(sumSortScan);
        sb.append(", ").append(sumNoIndexUsed);
        sb.append(", ").append(sumNoGoodIndexUsed);
        sb.append(", ").append(sumCpuTime);
        sb.append(", ").append(maxControlledMemory);
        sb.append(", ").append(maxTotalMemory);
        sb.append(", ").append(countSecondary);
        sb.append(", ").append(firstSeen);
        sb.append(", ").append(lastSeen);
        sb.append(", ").append(quantile_95);
        sb.append(", ").append(quantile_99);
        sb.append(", ").append(quantile_999);
        sb.append(", ").append(querySampleText);
        sb.append(", ").append(querySampleSeen);
        sb.append(", ").append(querySampleTimerWait);

        sb.append(")");
        return sb.toString();
    }
}
