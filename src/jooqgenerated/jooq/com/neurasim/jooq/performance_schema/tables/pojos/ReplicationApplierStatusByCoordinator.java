/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.ReplicationApplierStatusByCoordinatorServiceState;

import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationApplierStatusByCoordinator implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String channelName;
    private final ULong threadId;
    private final ReplicationApplierStatusByCoordinatorServiceState serviceState;
    private final Integer lastErrorNumber;
    private final String lastErrorMessage;
    private final LocalDateTime lastErrorTimestamp;
    private final String lastProcessedTransaction;
    private final LocalDateTime lastProcessedTransactionOriginalCommitTimestamp;
    private final LocalDateTime lastProcessedTransactionImmediateCommitTimestamp;
    private final LocalDateTime lastProcessedTransactionStartBufferTimestamp;
    private final LocalDateTime lastProcessedTransactionEndBufferTimestamp;
    private final String processingTransaction;
    private final LocalDateTime processingTransactionOriginalCommitTimestamp;
    private final LocalDateTime processingTransactionImmediateCommitTimestamp;
    private final LocalDateTime processingTransactionStartBufferTimestamp;

    public ReplicationApplierStatusByCoordinator(ReplicationApplierStatusByCoordinator value) {
        this.channelName = value.channelName;
        this.threadId = value.threadId;
        this.serviceState = value.serviceState;
        this.lastErrorNumber = value.lastErrorNumber;
        this.lastErrorMessage = value.lastErrorMessage;
        this.lastErrorTimestamp = value.lastErrorTimestamp;
        this.lastProcessedTransaction = value.lastProcessedTransaction;
        this.lastProcessedTransactionOriginalCommitTimestamp = value.lastProcessedTransactionOriginalCommitTimestamp;
        this.lastProcessedTransactionImmediateCommitTimestamp = value.lastProcessedTransactionImmediateCommitTimestamp;
        this.lastProcessedTransactionStartBufferTimestamp = value.lastProcessedTransactionStartBufferTimestamp;
        this.lastProcessedTransactionEndBufferTimestamp = value.lastProcessedTransactionEndBufferTimestamp;
        this.processingTransaction = value.processingTransaction;
        this.processingTransactionOriginalCommitTimestamp = value.processingTransactionOriginalCommitTimestamp;
        this.processingTransactionImmediateCommitTimestamp = value.processingTransactionImmediateCommitTimestamp;
        this.processingTransactionStartBufferTimestamp = value.processingTransactionStartBufferTimestamp;
    }

    public ReplicationApplierStatusByCoordinator(
        String channelName,
        ULong threadId,
        ReplicationApplierStatusByCoordinatorServiceState serviceState,
        Integer lastErrorNumber,
        String lastErrorMessage,
        LocalDateTime lastErrorTimestamp,
        String lastProcessedTransaction,
        LocalDateTime lastProcessedTransactionOriginalCommitTimestamp,
        LocalDateTime lastProcessedTransactionImmediateCommitTimestamp,
        LocalDateTime lastProcessedTransactionStartBufferTimestamp,
        LocalDateTime lastProcessedTransactionEndBufferTimestamp,
        String processingTransaction,
        LocalDateTime processingTransactionOriginalCommitTimestamp,
        LocalDateTime processingTransactionImmediateCommitTimestamp,
        LocalDateTime processingTransactionStartBufferTimestamp
    ) {
        this.channelName = channelName;
        this.threadId = threadId;
        this.serviceState = serviceState;
        this.lastErrorNumber = lastErrorNumber;
        this.lastErrorMessage = lastErrorMessage;
        this.lastErrorTimestamp = lastErrorTimestamp;
        this.lastProcessedTransaction = lastProcessedTransaction;
        this.lastProcessedTransactionOriginalCommitTimestamp = lastProcessedTransactionOriginalCommitTimestamp;
        this.lastProcessedTransactionImmediateCommitTimestamp = lastProcessedTransactionImmediateCommitTimestamp;
        this.lastProcessedTransactionStartBufferTimestamp = lastProcessedTransactionStartBufferTimestamp;
        this.lastProcessedTransactionEndBufferTimestamp = lastProcessedTransactionEndBufferTimestamp;
        this.processingTransaction = processingTransaction;
        this.processingTransactionOriginalCommitTimestamp = processingTransactionOriginalCommitTimestamp;
        this.processingTransactionImmediateCommitTimestamp = processingTransactionImmediateCommitTimestamp;
        this.processingTransactionStartBufferTimestamp = processingTransactionStartBufferTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.CHANNEL_NAME</code>.
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.SERVICE_STATE</code>.
     */
    public ReplicationApplierStatusByCoordinatorServiceState getServiceState() {
        return this.serviceState;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_ERROR_NUMBER</code>.
     */
    public Integer getLastErrorNumber() {
        return this.lastErrorNumber;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_ERROR_MESSAGE</code>.
     */
    public String getLastErrorMessage() {
        return this.lastErrorMessage;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_ERROR_TIMESTAMP</code>.
     */
    public LocalDateTime getLastErrorTimestamp() {
        return this.lastErrorTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_PROCESSED_TRANSACTION</code>.
     */
    public String getLastProcessedTransaction() {
        return this.lastProcessedTransaction;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_PROCESSED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastProcessedTransactionOriginalCommitTimestamp() {
        return this.lastProcessedTransactionOriginalCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_PROCESSED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastProcessedTransactionImmediateCommitTimestamp() {
        return this.lastProcessedTransactionImmediateCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_PROCESSED_TRANSACTION_START_BUFFER_TIMESTAMP</code>.
     */
    public LocalDateTime getLastProcessedTransactionStartBufferTimestamp() {
        return this.lastProcessedTransactionStartBufferTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.LAST_PROCESSED_TRANSACTION_END_BUFFER_TIMESTAMP</code>.
     */
    public LocalDateTime getLastProcessedTransactionEndBufferTimestamp() {
        return this.lastProcessedTransactionEndBufferTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.PROCESSING_TRANSACTION</code>.
     */
    public String getProcessingTransaction() {
        return this.processingTransaction;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.PROCESSING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getProcessingTransactionOriginalCommitTimestamp() {
        return this.processingTransactionOriginalCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.PROCESSING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getProcessingTransactionImmediateCommitTimestamp() {
        return this.processingTransactionImmediateCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_coordinator.PROCESSING_TRANSACTION_START_BUFFER_TIMESTAMP</code>.
     */
    public LocalDateTime getProcessingTransactionStartBufferTimestamp() {
        return this.processingTransactionStartBufferTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ReplicationApplierStatusByCoordinator other = (ReplicationApplierStatusByCoordinator) obj;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.serviceState == null) {
            if (other.serviceState != null)
                return false;
        }
        else if (!this.serviceState.equals(other.serviceState))
            return false;
        if (this.lastErrorNumber == null) {
            if (other.lastErrorNumber != null)
                return false;
        }
        else if (!this.lastErrorNumber.equals(other.lastErrorNumber))
            return false;
        if (this.lastErrorMessage == null) {
            if (other.lastErrorMessage != null)
                return false;
        }
        else if (!this.lastErrorMessage.equals(other.lastErrorMessage))
            return false;
        if (this.lastErrorTimestamp == null) {
            if (other.lastErrorTimestamp != null)
                return false;
        }
        else if (!this.lastErrorTimestamp.equals(other.lastErrorTimestamp))
            return false;
        if (this.lastProcessedTransaction == null) {
            if (other.lastProcessedTransaction != null)
                return false;
        }
        else if (!this.lastProcessedTransaction.equals(other.lastProcessedTransaction))
            return false;
        if (this.lastProcessedTransactionOriginalCommitTimestamp == null) {
            if (other.lastProcessedTransactionOriginalCommitTimestamp != null)
                return false;
        }
        else if (!this.lastProcessedTransactionOriginalCommitTimestamp.equals(other.lastProcessedTransactionOriginalCommitTimestamp))
            return false;
        if (this.lastProcessedTransactionImmediateCommitTimestamp == null) {
            if (other.lastProcessedTransactionImmediateCommitTimestamp != null)
                return false;
        }
        else if (!this.lastProcessedTransactionImmediateCommitTimestamp.equals(other.lastProcessedTransactionImmediateCommitTimestamp))
            return false;
        if (this.lastProcessedTransactionStartBufferTimestamp == null) {
            if (other.lastProcessedTransactionStartBufferTimestamp != null)
                return false;
        }
        else if (!this.lastProcessedTransactionStartBufferTimestamp.equals(other.lastProcessedTransactionStartBufferTimestamp))
            return false;
        if (this.lastProcessedTransactionEndBufferTimestamp == null) {
            if (other.lastProcessedTransactionEndBufferTimestamp != null)
                return false;
        }
        else if (!this.lastProcessedTransactionEndBufferTimestamp.equals(other.lastProcessedTransactionEndBufferTimestamp))
            return false;
        if (this.processingTransaction == null) {
            if (other.processingTransaction != null)
                return false;
        }
        else if (!this.processingTransaction.equals(other.processingTransaction))
            return false;
        if (this.processingTransactionOriginalCommitTimestamp == null) {
            if (other.processingTransactionOriginalCommitTimestamp != null)
                return false;
        }
        else if (!this.processingTransactionOriginalCommitTimestamp.equals(other.processingTransactionOriginalCommitTimestamp))
            return false;
        if (this.processingTransactionImmediateCommitTimestamp == null) {
            if (other.processingTransactionImmediateCommitTimestamp != null)
                return false;
        }
        else if (!this.processingTransactionImmediateCommitTimestamp.equals(other.processingTransactionImmediateCommitTimestamp))
            return false;
        if (this.processingTransactionStartBufferTimestamp == null) {
            if (other.processingTransactionStartBufferTimestamp != null)
                return false;
        }
        else if (!this.processingTransactionStartBufferTimestamp.equals(other.processingTransactionStartBufferTimestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.serviceState == null) ? 0 : this.serviceState.hashCode());
        result = prime * result + ((this.lastErrorNumber == null) ? 0 : this.lastErrorNumber.hashCode());
        result = prime * result + ((this.lastErrorMessage == null) ? 0 : this.lastErrorMessage.hashCode());
        result = prime * result + ((this.lastErrorTimestamp == null) ? 0 : this.lastErrorTimestamp.hashCode());
        result = prime * result + ((this.lastProcessedTransaction == null) ? 0 : this.lastProcessedTransaction.hashCode());
        result = prime * result + ((this.lastProcessedTransactionOriginalCommitTimestamp == null) ? 0 : this.lastProcessedTransactionOriginalCommitTimestamp.hashCode());
        result = prime * result + ((this.lastProcessedTransactionImmediateCommitTimestamp == null) ? 0 : this.lastProcessedTransactionImmediateCommitTimestamp.hashCode());
        result = prime * result + ((this.lastProcessedTransactionStartBufferTimestamp == null) ? 0 : this.lastProcessedTransactionStartBufferTimestamp.hashCode());
        result = prime * result + ((this.lastProcessedTransactionEndBufferTimestamp == null) ? 0 : this.lastProcessedTransactionEndBufferTimestamp.hashCode());
        result = prime * result + ((this.processingTransaction == null) ? 0 : this.processingTransaction.hashCode());
        result = prime * result + ((this.processingTransactionOriginalCommitTimestamp == null) ? 0 : this.processingTransactionOriginalCommitTimestamp.hashCode());
        result = prime * result + ((this.processingTransactionImmediateCommitTimestamp == null) ? 0 : this.processingTransactionImmediateCommitTimestamp.hashCode());
        result = prime * result + ((this.processingTransactionStartBufferTimestamp == null) ? 0 : this.processingTransactionStartBufferTimestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReplicationApplierStatusByCoordinator (");

        sb.append(channelName);
        sb.append(", ").append(threadId);
        sb.append(", ").append(serviceState);
        sb.append(", ").append(lastErrorNumber);
        sb.append(", ").append(lastErrorMessage);
        sb.append(", ").append(lastErrorTimestamp);
        sb.append(", ").append(lastProcessedTransaction);
        sb.append(", ").append(lastProcessedTransactionOriginalCommitTimestamp);
        sb.append(", ").append(lastProcessedTransactionImmediateCommitTimestamp);
        sb.append(", ").append(lastProcessedTransactionStartBufferTimestamp);
        sb.append(", ").append(lastProcessedTransactionEndBufferTimestamp);
        sb.append(", ").append(processingTransaction);
        sb.append(", ").append(processingTransactionOriginalCommitTimestamp);
        sb.append(", ").append(processingTransactionImmediateCommitTimestamp);
        sb.append(", ").append(processingTransactionStartBufferTimestamp);

        sb.append(")");
        return sb.toString();
    }
}
