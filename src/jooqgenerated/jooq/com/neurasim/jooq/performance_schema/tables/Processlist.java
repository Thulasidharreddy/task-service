/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables;


import com.neurasim.jooq.performance_schema.Keys;
import com.neurasim.jooq.performance_schema.PerformanceSchema;
import com.neurasim.jooq.performance_schema.enums.ProcesslistExecutionEngine;
import com.neurasim.jooq.performance_schema.tables.records.ProcesslistRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Processlist extends TableImpl<ProcesslistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.processlist</code>
     */
    public static final Processlist PROCESSLIST = new Processlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcesslistRecord> getRecordType() {
        return ProcesslistRecord.class;
    }

    /**
     * The column <code>performance_schema.processlist.ID</code>.
     */
    public final TableField<ProcesslistRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.processlist.USER</code>.
     */
    public final TableField<ProcesslistRecord, String> USER = createField(DSL.name("USER"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>performance_schema.processlist.HOST</code>.
     */
    public final TableField<ProcesslistRecord, String> HOST = createField(DSL.name("HOST"), SQLDataType.VARCHAR(261), this, "");

    /**
     * The column <code>performance_schema.processlist.DB</code>.
     */
    public final TableField<ProcesslistRecord, String> DB = createField(DSL.name("DB"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.processlist.COMMAND</code>.
     */
    public final TableField<ProcesslistRecord, String> COMMAND = createField(DSL.name("COMMAND"), SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>performance_schema.processlist.TIME</code>.
     */
    public final TableField<ProcesslistRecord, Long> TIME = createField(DSL.name("TIME"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>performance_schema.processlist.STATE</code>.
     */
    public final TableField<ProcesslistRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.processlist.INFO</code>.
     */
    public final TableField<ProcesslistRecord, String> INFO = createField(DSL.name("INFO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>performance_schema.processlist.EXECUTION_ENGINE</code>.
     */
    public final TableField<ProcesslistRecord, ProcesslistExecutionEngine> EXECUTION_ENGINE = createField(DSL.name("EXECUTION_ENGINE"), SQLDataType.VARCHAR(9).asEnumDataType(com.neurasim.jooq.performance_schema.enums.ProcesslistExecutionEngine.class), this, "");

    private Processlist(Name alias, Table<ProcesslistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Processlist(Name alias, Table<ProcesslistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.processlist</code> table
     * reference
     */
    public Processlist(String alias) {
        this(DSL.name(alias), PROCESSLIST);
    }

    /**
     * Create an aliased <code>performance_schema.processlist</code> table
     * reference
     */
    public Processlist(Name alias) {
        this(alias, PROCESSLIST);
    }

    /**
     * Create a <code>performance_schema.processlist</code> table reference
     */
    public Processlist() {
        this(DSL.name("processlist"), null);
    }

    public <O extends Record> Processlist(Table<O> child, ForeignKey<O, ProcesslistRecord> key) {
        super(child, key, PROCESSLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<ProcesslistRecord> getPrimaryKey() {
        return Keys.KEY_PROCESSLIST_PRIMARY;
    }

    @Override
    public Processlist as(String alias) {
        return new Processlist(DSL.name(alias), this);
    }

    @Override
    public Processlist as(Name alias) {
        return new Processlist(alias, this);
    }

    @Override
    public Processlist as(Table<?> alias) {
        return new Processlist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(String name) {
        return new Processlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(Name name) {
        return new Processlist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(Table<?> name) {
        return new Processlist(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, String, String, String, Long, String, String, ProcesslistExecutionEngine> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super ULong, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super ProcesslistExecutionEngine, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super ULong, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super ProcesslistExecutionEngine, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
