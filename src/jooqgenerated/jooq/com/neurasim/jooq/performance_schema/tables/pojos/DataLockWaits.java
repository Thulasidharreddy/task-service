/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataLockWaits implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String engine;
    private final String requestingEngineLockId;
    private final ULong requestingEngineTransactionId;
    private final ULong requestingThreadId;
    private final ULong requestingEventId;
    private final ULong requestingObjectInstanceBegin;
    private final String blockingEngineLockId;
    private final ULong blockingEngineTransactionId;
    private final ULong blockingThreadId;
    private final ULong blockingEventId;
    private final ULong blockingObjectInstanceBegin;

    public DataLockWaits(DataLockWaits value) {
        this.engine = value.engine;
        this.requestingEngineLockId = value.requestingEngineLockId;
        this.requestingEngineTransactionId = value.requestingEngineTransactionId;
        this.requestingThreadId = value.requestingThreadId;
        this.requestingEventId = value.requestingEventId;
        this.requestingObjectInstanceBegin = value.requestingObjectInstanceBegin;
        this.blockingEngineLockId = value.blockingEngineLockId;
        this.blockingEngineTransactionId = value.blockingEngineTransactionId;
        this.blockingThreadId = value.blockingThreadId;
        this.blockingEventId = value.blockingEventId;
        this.blockingObjectInstanceBegin = value.blockingObjectInstanceBegin;
    }

    public DataLockWaits(
        String engine,
        String requestingEngineLockId,
        ULong requestingEngineTransactionId,
        ULong requestingThreadId,
        ULong requestingEventId,
        ULong requestingObjectInstanceBegin,
        String blockingEngineLockId,
        ULong blockingEngineTransactionId,
        ULong blockingThreadId,
        ULong blockingEventId,
        ULong blockingObjectInstanceBegin
    ) {
        this.engine = engine;
        this.requestingEngineLockId = requestingEngineLockId;
        this.requestingEngineTransactionId = requestingEngineTransactionId;
        this.requestingThreadId = requestingThreadId;
        this.requestingEventId = requestingEventId;
        this.requestingObjectInstanceBegin = requestingObjectInstanceBegin;
        this.blockingEngineLockId = blockingEngineLockId;
        this.blockingEngineTransactionId = blockingEngineTransactionId;
        this.blockingThreadId = blockingThreadId;
        this.blockingEventId = blockingEventId;
        this.blockingObjectInstanceBegin = blockingObjectInstanceBegin;
    }

    /**
     * Getter for <code>performance_schema.data_lock_waits.ENGINE</code>.
     */
    public String getEngine() {
        return this.engine;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.REQUESTING_ENGINE_LOCK_ID</code>.
     */
    public String getRequestingEngineLockId() {
        return this.requestingEngineLockId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.REQUESTING_ENGINE_TRANSACTION_ID</code>.
     */
    public ULong getRequestingEngineTransactionId() {
        return this.requestingEngineTransactionId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.REQUESTING_THREAD_ID</code>.
     */
    public ULong getRequestingThreadId() {
        return this.requestingThreadId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.REQUESTING_EVENT_ID</code>.
     */
    public ULong getRequestingEventId() {
        return this.requestingEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.REQUESTING_OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getRequestingObjectInstanceBegin() {
        return this.requestingObjectInstanceBegin;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.BLOCKING_ENGINE_LOCK_ID</code>.
     */
    public String getBlockingEngineLockId() {
        return this.blockingEngineLockId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.BLOCKING_ENGINE_TRANSACTION_ID</code>.
     */
    public ULong getBlockingEngineTransactionId() {
        return this.blockingEngineTransactionId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.BLOCKING_THREAD_ID</code>.
     */
    public ULong getBlockingThreadId() {
        return this.blockingThreadId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.BLOCKING_EVENT_ID</code>.
     */
    public ULong getBlockingEventId() {
        return this.blockingEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_lock_waits.BLOCKING_OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getBlockingObjectInstanceBegin() {
        return this.blockingObjectInstanceBegin;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DataLockWaits other = (DataLockWaits) obj;
        if (this.engine == null) {
            if (other.engine != null)
                return false;
        }
        else if (!this.engine.equals(other.engine))
            return false;
        if (this.requestingEngineLockId == null) {
            if (other.requestingEngineLockId != null)
                return false;
        }
        else if (!this.requestingEngineLockId.equals(other.requestingEngineLockId))
            return false;
        if (this.requestingEngineTransactionId == null) {
            if (other.requestingEngineTransactionId != null)
                return false;
        }
        else if (!this.requestingEngineTransactionId.equals(other.requestingEngineTransactionId))
            return false;
        if (this.requestingThreadId == null) {
            if (other.requestingThreadId != null)
                return false;
        }
        else if (!this.requestingThreadId.equals(other.requestingThreadId))
            return false;
        if (this.requestingEventId == null) {
            if (other.requestingEventId != null)
                return false;
        }
        else if (!this.requestingEventId.equals(other.requestingEventId))
            return false;
        if (this.requestingObjectInstanceBegin == null) {
            if (other.requestingObjectInstanceBegin != null)
                return false;
        }
        else if (!this.requestingObjectInstanceBegin.equals(other.requestingObjectInstanceBegin))
            return false;
        if (this.blockingEngineLockId == null) {
            if (other.blockingEngineLockId != null)
                return false;
        }
        else if (!this.blockingEngineLockId.equals(other.blockingEngineLockId))
            return false;
        if (this.blockingEngineTransactionId == null) {
            if (other.blockingEngineTransactionId != null)
                return false;
        }
        else if (!this.blockingEngineTransactionId.equals(other.blockingEngineTransactionId))
            return false;
        if (this.blockingThreadId == null) {
            if (other.blockingThreadId != null)
                return false;
        }
        else if (!this.blockingThreadId.equals(other.blockingThreadId))
            return false;
        if (this.blockingEventId == null) {
            if (other.blockingEventId != null)
                return false;
        }
        else if (!this.blockingEventId.equals(other.blockingEventId))
            return false;
        if (this.blockingObjectInstanceBegin == null) {
            if (other.blockingObjectInstanceBegin != null)
                return false;
        }
        else if (!this.blockingObjectInstanceBegin.equals(other.blockingObjectInstanceBegin))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.engine == null) ? 0 : this.engine.hashCode());
        result = prime * result + ((this.requestingEngineLockId == null) ? 0 : this.requestingEngineLockId.hashCode());
        result = prime * result + ((this.requestingEngineTransactionId == null) ? 0 : this.requestingEngineTransactionId.hashCode());
        result = prime * result + ((this.requestingThreadId == null) ? 0 : this.requestingThreadId.hashCode());
        result = prime * result + ((this.requestingEventId == null) ? 0 : this.requestingEventId.hashCode());
        result = prime * result + ((this.requestingObjectInstanceBegin == null) ? 0 : this.requestingObjectInstanceBegin.hashCode());
        result = prime * result + ((this.blockingEngineLockId == null) ? 0 : this.blockingEngineLockId.hashCode());
        result = prime * result + ((this.blockingEngineTransactionId == null) ? 0 : this.blockingEngineTransactionId.hashCode());
        result = prime * result + ((this.blockingThreadId == null) ? 0 : this.blockingThreadId.hashCode());
        result = prime * result + ((this.blockingEventId == null) ? 0 : this.blockingEventId.hashCode());
        result = prime * result + ((this.blockingObjectInstanceBegin == null) ? 0 : this.blockingObjectInstanceBegin.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DataLockWaits (");

        sb.append(engine);
        sb.append(", ").append(requestingEngineLockId);
        sb.append(", ").append(requestingEngineTransactionId);
        sb.append(", ").append(requestingThreadId);
        sb.append(", ").append(requestingEventId);
        sb.append(", ").append(requestingObjectInstanceBegin);
        sb.append(", ").append(blockingEngineLockId);
        sb.append(", ").append(blockingEngineTransactionId);
        sb.append(", ").append(blockingThreadId);
        sb.append(", ").append(blockingEventId);
        sb.append(", ").append(blockingObjectInstanceBegin);

        sb.append(")");
        return sb.toString();
    }
}
