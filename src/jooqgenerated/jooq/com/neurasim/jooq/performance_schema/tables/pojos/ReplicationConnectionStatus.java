/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.ReplicationConnectionStatusServiceState;

import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationConnectionStatus implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String channelName;
    private final String groupName;
    private final String sourceUuid;
    private final ULong threadId;
    private final ReplicationConnectionStatusServiceState serviceState;
    private final ULong countReceivedHeartbeats;
    private final LocalDateTime lastHeartbeatTimestamp;
    private final String receivedTransactionSet;
    private final Integer lastErrorNumber;
    private final String lastErrorMessage;
    private final LocalDateTime lastErrorTimestamp;
    private final String lastQueuedTransaction;
    private final LocalDateTime lastQueuedTransactionOriginalCommitTimestamp;
    private final LocalDateTime lastQueuedTransactionImmediateCommitTimestamp;
    private final LocalDateTime lastQueuedTransactionStartQueueTimestamp;
    private final LocalDateTime lastQueuedTransactionEndQueueTimestamp;
    private final String queueingTransaction;
    private final LocalDateTime queueingTransactionOriginalCommitTimestamp;
    private final LocalDateTime queueingTransactionImmediateCommitTimestamp;
    private final LocalDateTime queueingTransactionStartQueueTimestamp;

    public ReplicationConnectionStatus(ReplicationConnectionStatus value) {
        this.channelName = value.channelName;
        this.groupName = value.groupName;
        this.sourceUuid = value.sourceUuid;
        this.threadId = value.threadId;
        this.serviceState = value.serviceState;
        this.countReceivedHeartbeats = value.countReceivedHeartbeats;
        this.lastHeartbeatTimestamp = value.lastHeartbeatTimestamp;
        this.receivedTransactionSet = value.receivedTransactionSet;
        this.lastErrorNumber = value.lastErrorNumber;
        this.lastErrorMessage = value.lastErrorMessage;
        this.lastErrorTimestamp = value.lastErrorTimestamp;
        this.lastQueuedTransaction = value.lastQueuedTransaction;
        this.lastQueuedTransactionOriginalCommitTimestamp = value.lastQueuedTransactionOriginalCommitTimestamp;
        this.lastQueuedTransactionImmediateCommitTimestamp = value.lastQueuedTransactionImmediateCommitTimestamp;
        this.lastQueuedTransactionStartQueueTimestamp = value.lastQueuedTransactionStartQueueTimestamp;
        this.lastQueuedTransactionEndQueueTimestamp = value.lastQueuedTransactionEndQueueTimestamp;
        this.queueingTransaction = value.queueingTransaction;
        this.queueingTransactionOriginalCommitTimestamp = value.queueingTransactionOriginalCommitTimestamp;
        this.queueingTransactionImmediateCommitTimestamp = value.queueingTransactionImmediateCommitTimestamp;
        this.queueingTransactionStartQueueTimestamp = value.queueingTransactionStartQueueTimestamp;
    }

    public ReplicationConnectionStatus(
        String channelName,
        String groupName,
        String sourceUuid,
        ULong threadId,
        ReplicationConnectionStatusServiceState serviceState,
        ULong countReceivedHeartbeats,
        LocalDateTime lastHeartbeatTimestamp,
        String receivedTransactionSet,
        Integer lastErrorNumber,
        String lastErrorMessage,
        LocalDateTime lastErrorTimestamp,
        String lastQueuedTransaction,
        LocalDateTime lastQueuedTransactionOriginalCommitTimestamp,
        LocalDateTime lastQueuedTransactionImmediateCommitTimestamp,
        LocalDateTime lastQueuedTransactionStartQueueTimestamp,
        LocalDateTime lastQueuedTransactionEndQueueTimestamp,
        String queueingTransaction,
        LocalDateTime queueingTransactionOriginalCommitTimestamp,
        LocalDateTime queueingTransactionImmediateCommitTimestamp,
        LocalDateTime queueingTransactionStartQueueTimestamp
    ) {
        this.channelName = channelName;
        this.groupName = groupName;
        this.sourceUuid = sourceUuid;
        this.threadId = threadId;
        this.serviceState = serviceState;
        this.countReceivedHeartbeats = countReceivedHeartbeats;
        this.lastHeartbeatTimestamp = lastHeartbeatTimestamp;
        this.receivedTransactionSet = receivedTransactionSet;
        this.lastErrorNumber = lastErrorNumber;
        this.lastErrorMessage = lastErrorMessage;
        this.lastErrorTimestamp = lastErrorTimestamp;
        this.lastQueuedTransaction = lastQueuedTransaction;
        this.lastQueuedTransactionOriginalCommitTimestamp = lastQueuedTransactionOriginalCommitTimestamp;
        this.lastQueuedTransactionImmediateCommitTimestamp = lastQueuedTransactionImmediateCommitTimestamp;
        this.lastQueuedTransactionStartQueueTimestamp = lastQueuedTransactionStartQueueTimestamp;
        this.lastQueuedTransactionEndQueueTimestamp = lastQueuedTransactionEndQueueTimestamp;
        this.queueingTransaction = queueingTransaction;
        this.queueingTransactionOriginalCommitTimestamp = queueingTransactionOriginalCommitTimestamp;
        this.queueingTransactionImmediateCommitTimestamp = queueingTransactionImmediateCommitTimestamp;
        this.queueingTransactionStartQueueTimestamp = queueingTransactionStartQueueTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.CHANNEL_NAME</code>.
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.GROUP_NAME</code>.
     */
    public String getGroupName() {
        return this.groupName;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.SOURCE_UUID</code>.
     */
    public String getSourceUuid() {
        return this.sourceUuid;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.SERVICE_STATE</code>.
     */
    public ReplicationConnectionStatusServiceState getServiceState() {
        return this.serviceState;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.COUNT_RECEIVED_HEARTBEATS</code>.
     */
    public ULong getCountReceivedHeartbeats() {
        return this.countReceivedHeartbeats;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_HEARTBEAT_TIMESTAMP</code>.
     * Shows when the most recent heartbeat signal was received.
     */
    public LocalDateTime getLastHeartbeatTimestamp() {
        return this.lastHeartbeatTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.RECEIVED_TRANSACTION_SET</code>.
     */
    public String getReceivedTransactionSet() {
        return this.receivedTransactionSet;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_ERROR_NUMBER</code>.
     */
    public Integer getLastErrorNumber() {
        return this.lastErrorNumber;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_ERROR_MESSAGE</code>.
     */
    public String getLastErrorMessage() {
        return this.lastErrorMessage;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_ERROR_TIMESTAMP</code>.
     */
    public LocalDateTime getLastErrorTimestamp() {
        return this.lastErrorTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION</code>.
     */
    public String getLastQueuedTransaction() {
        return this.lastQueuedTransaction;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastQueuedTransactionOriginalCommitTimestamp() {
        return this.lastQueuedTransactionOriginalCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastQueuedTransactionImmediateCommitTimestamp() {
        return this.lastQueuedTransactionImmediateCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP</code>.
     */
    public LocalDateTime getLastQueuedTransactionStartQueueTimestamp() {
        return this.lastQueuedTransactionStartQueueTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP</code>.
     */
    public LocalDateTime getLastQueuedTransactionEndQueueTimestamp() {
        return this.lastQueuedTransactionEndQueueTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION</code>.
     */
    public String getQueueingTransaction() {
        return this.queueingTransaction;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getQueueingTransactionOriginalCommitTimestamp() {
        return this.queueingTransactionOriginalCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getQueueingTransactionImmediateCommitTimestamp() {
        return this.queueingTransactionImmediateCommitTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_connection_status.QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP</code>.
     */
    public LocalDateTime getQueueingTransactionStartQueueTimestamp() {
        return this.queueingTransactionStartQueueTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ReplicationConnectionStatus other = (ReplicationConnectionStatus) obj;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        if (this.groupName == null) {
            if (other.groupName != null)
                return false;
        }
        else if (!this.groupName.equals(other.groupName))
            return false;
        if (this.sourceUuid == null) {
            if (other.sourceUuid != null)
                return false;
        }
        else if (!this.sourceUuid.equals(other.sourceUuid))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.serviceState == null) {
            if (other.serviceState != null)
                return false;
        }
        else if (!this.serviceState.equals(other.serviceState))
            return false;
        if (this.countReceivedHeartbeats == null) {
            if (other.countReceivedHeartbeats != null)
                return false;
        }
        else if (!this.countReceivedHeartbeats.equals(other.countReceivedHeartbeats))
            return false;
        if (this.lastHeartbeatTimestamp == null) {
            if (other.lastHeartbeatTimestamp != null)
                return false;
        }
        else if (!this.lastHeartbeatTimestamp.equals(other.lastHeartbeatTimestamp))
            return false;
        if (this.receivedTransactionSet == null) {
            if (other.receivedTransactionSet != null)
                return false;
        }
        else if (!this.receivedTransactionSet.equals(other.receivedTransactionSet))
            return false;
        if (this.lastErrorNumber == null) {
            if (other.lastErrorNumber != null)
                return false;
        }
        else if (!this.lastErrorNumber.equals(other.lastErrorNumber))
            return false;
        if (this.lastErrorMessage == null) {
            if (other.lastErrorMessage != null)
                return false;
        }
        else if (!this.lastErrorMessage.equals(other.lastErrorMessage))
            return false;
        if (this.lastErrorTimestamp == null) {
            if (other.lastErrorTimestamp != null)
                return false;
        }
        else if (!this.lastErrorTimestamp.equals(other.lastErrorTimestamp))
            return false;
        if (this.lastQueuedTransaction == null) {
            if (other.lastQueuedTransaction != null)
                return false;
        }
        else if (!this.lastQueuedTransaction.equals(other.lastQueuedTransaction))
            return false;
        if (this.lastQueuedTransactionOriginalCommitTimestamp == null) {
            if (other.lastQueuedTransactionOriginalCommitTimestamp != null)
                return false;
        }
        else if (!this.lastQueuedTransactionOriginalCommitTimestamp.equals(other.lastQueuedTransactionOriginalCommitTimestamp))
            return false;
        if (this.lastQueuedTransactionImmediateCommitTimestamp == null) {
            if (other.lastQueuedTransactionImmediateCommitTimestamp != null)
                return false;
        }
        else if (!this.lastQueuedTransactionImmediateCommitTimestamp.equals(other.lastQueuedTransactionImmediateCommitTimestamp))
            return false;
        if (this.lastQueuedTransactionStartQueueTimestamp == null) {
            if (other.lastQueuedTransactionStartQueueTimestamp != null)
                return false;
        }
        else if (!this.lastQueuedTransactionStartQueueTimestamp.equals(other.lastQueuedTransactionStartQueueTimestamp))
            return false;
        if (this.lastQueuedTransactionEndQueueTimestamp == null) {
            if (other.lastQueuedTransactionEndQueueTimestamp != null)
                return false;
        }
        else if (!this.lastQueuedTransactionEndQueueTimestamp.equals(other.lastQueuedTransactionEndQueueTimestamp))
            return false;
        if (this.queueingTransaction == null) {
            if (other.queueingTransaction != null)
                return false;
        }
        else if (!this.queueingTransaction.equals(other.queueingTransaction))
            return false;
        if (this.queueingTransactionOriginalCommitTimestamp == null) {
            if (other.queueingTransactionOriginalCommitTimestamp != null)
                return false;
        }
        else if (!this.queueingTransactionOriginalCommitTimestamp.equals(other.queueingTransactionOriginalCommitTimestamp))
            return false;
        if (this.queueingTransactionImmediateCommitTimestamp == null) {
            if (other.queueingTransactionImmediateCommitTimestamp != null)
                return false;
        }
        else if (!this.queueingTransactionImmediateCommitTimestamp.equals(other.queueingTransactionImmediateCommitTimestamp))
            return false;
        if (this.queueingTransactionStartQueueTimestamp == null) {
            if (other.queueingTransactionStartQueueTimestamp != null)
                return false;
        }
        else if (!this.queueingTransactionStartQueueTimestamp.equals(other.queueingTransactionStartQueueTimestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        result = prime * result + ((this.groupName == null) ? 0 : this.groupName.hashCode());
        result = prime * result + ((this.sourceUuid == null) ? 0 : this.sourceUuid.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.serviceState == null) ? 0 : this.serviceState.hashCode());
        result = prime * result + ((this.countReceivedHeartbeats == null) ? 0 : this.countReceivedHeartbeats.hashCode());
        result = prime * result + ((this.lastHeartbeatTimestamp == null) ? 0 : this.lastHeartbeatTimestamp.hashCode());
        result = prime * result + ((this.receivedTransactionSet == null) ? 0 : this.receivedTransactionSet.hashCode());
        result = prime * result + ((this.lastErrorNumber == null) ? 0 : this.lastErrorNumber.hashCode());
        result = prime * result + ((this.lastErrorMessage == null) ? 0 : this.lastErrorMessage.hashCode());
        result = prime * result + ((this.lastErrorTimestamp == null) ? 0 : this.lastErrorTimestamp.hashCode());
        result = prime * result + ((this.lastQueuedTransaction == null) ? 0 : this.lastQueuedTransaction.hashCode());
        result = prime * result + ((this.lastQueuedTransactionOriginalCommitTimestamp == null) ? 0 : this.lastQueuedTransactionOriginalCommitTimestamp.hashCode());
        result = prime * result + ((this.lastQueuedTransactionImmediateCommitTimestamp == null) ? 0 : this.lastQueuedTransactionImmediateCommitTimestamp.hashCode());
        result = prime * result + ((this.lastQueuedTransactionStartQueueTimestamp == null) ? 0 : this.lastQueuedTransactionStartQueueTimestamp.hashCode());
        result = prime * result + ((this.lastQueuedTransactionEndQueueTimestamp == null) ? 0 : this.lastQueuedTransactionEndQueueTimestamp.hashCode());
        result = prime * result + ((this.queueingTransaction == null) ? 0 : this.queueingTransaction.hashCode());
        result = prime * result + ((this.queueingTransactionOriginalCommitTimestamp == null) ? 0 : this.queueingTransactionOriginalCommitTimestamp.hashCode());
        result = prime * result + ((this.queueingTransactionImmediateCommitTimestamp == null) ? 0 : this.queueingTransactionImmediateCommitTimestamp.hashCode());
        result = prime * result + ((this.queueingTransactionStartQueueTimestamp == null) ? 0 : this.queueingTransactionStartQueueTimestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReplicationConnectionStatus (");

        sb.append(channelName);
        sb.append(", ").append(groupName);
        sb.append(", ").append(sourceUuid);
        sb.append(", ").append(threadId);
        sb.append(", ").append(serviceState);
        sb.append(", ").append(countReceivedHeartbeats);
        sb.append(", ").append(lastHeartbeatTimestamp);
        sb.append(", ").append(receivedTransactionSet);
        sb.append(", ").append(lastErrorNumber);
        sb.append(", ").append(lastErrorMessage);
        sb.append(", ").append(lastErrorTimestamp);
        sb.append(", ").append(lastQueuedTransaction);
        sb.append(", ").append(lastQueuedTransactionOriginalCommitTimestamp);
        sb.append(", ").append(lastQueuedTransactionImmediateCommitTimestamp);
        sb.append(", ").append(lastQueuedTransactionStartQueueTimestamp);
        sb.append(", ").append(lastQueuedTransactionEndQueueTimestamp);
        sb.append(", ").append(queueingTransaction);
        sb.append(", ").append(queueingTransactionOriginalCommitTimestamp);
        sb.append(", ").append(queueingTransactionImmediateCommitTimestamp);
        sb.append(", ").append(queueingTransactionStartQueueTimestamp);

        sb.append(")");
        return sb.toString();
    }
}
