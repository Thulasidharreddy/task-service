/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables;


import com.neurasim.jooq.performance_schema.PerformanceSchema;
import com.neurasim.jooq.performance_schema.enums.PerformanceTimersTimerName;
import com.neurasim.jooq.performance_schema.tables.records.PerformanceTimersRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformanceTimers extends TableImpl<PerformanceTimersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.performance_timers</code>
     */
    public static final PerformanceTimers PERFORMANCE_TIMERS = new PerformanceTimers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerformanceTimersRecord> getRecordType() {
        return PerformanceTimersRecord.class;
    }

    /**
     * The column <code>performance_schema.performance_timers.TIMER_NAME</code>.
     */
    public final TableField<PerformanceTimersRecord, PerformanceTimersTimerName> TIMER_NAME = createField(DSL.name("TIMER_NAME"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(com.neurasim.jooq.performance_schema.enums.PerformanceTimersTimerName.class), this, "");

    /**
     * The column
     * <code>performance_schema.performance_timers.TIMER_FREQUENCY</code>.
     */
    public final TableField<PerformanceTimersRecord, Long> TIMER_FREQUENCY = createField(DSL.name("TIMER_FREQUENCY"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>performance_schema.performance_timers.TIMER_RESOLUTION</code>.
     */
    public final TableField<PerformanceTimersRecord, Long> TIMER_RESOLUTION = createField(DSL.name("TIMER_RESOLUTION"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>performance_schema.performance_timers.TIMER_OVERHEAD</code>.
     */
    public final TableField<PerformanceTimersRecord, Long> TIMER_OVERHEAD = createField(DSL.name("TIMER_OVERHEAD"), SQLDataType.BIGINT, this, "");

    private PerformanceTimers(Name alias, Table<PerformanceTimersRecord> aliased) {
        this(alias, aliased, null);
    }

    private PerformanceTimers(Name alias, Table<PerformanceTimersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.performance_timers</code>
     * table reference
     */
    public PerformanceTimers(String alias) {
        this(DSL.name(alias), PERFORMANCE_TIMERS);
    }

    /**
     * Create an aliased <code>performance_schema.performance_timers</code>
     * table reference
     */
    public PerformanceTimers(Name alias) {
        this(alias, PERFORMANCE_TIMERS);
    }

    /**
     * Create a <code>performance_schema.performance_timers</code> table
     * reference
     */
    public PerformanceTimers() {
        this(DSL.name("performance_timers"), null);
    }

    public <O extends Record> PerformanceTimers(Table<O> child, ForeignKey<O, PerformanceTimersRecord> key) {
        super(child, key, PERFORMANCE_TIMERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public PerformanceTimers as(String alias) {
        return new PerformanceTimers(DSL.name(alias), this);
    }

    @Override
    public PerformanceTimers as(Name alias) {
        return new PerformanceTimers(alias, this);
    }

    @Override
    public PerformanceTimers as(Table<?> alias) {
        return new PerformanceTimers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceTimers rename(String name) {
        return new PerformanceTimers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceTimers rename(Name name) {
        return new PerformanceTimers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceTimers rename(Table<?> name) {
        return new PerformanceTimers(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<PerformanceTimersTimerName, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super PerformanceTimersTimerName, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super PerformanceTimersTimerName, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
