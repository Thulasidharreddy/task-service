/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.enums.HostCacheHostValidated;
import com.neurasim.jooq.performance_schema.tables.HostCache;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostCacheRecord extends UpdatableRecordImpl<HostCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>performance_schema.host_cache.IP</code>.
     */
    public HostCacheRecord setIp(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.IP</code>.
     */
    public String getIp() {
        return (String) get(0);
    }

    /**
     * Setter for <code>performance_schema.host_cache.HOST</code>.
     */
    public HostCacheRecord setHost(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.HOST</code>.
     */
    public String getHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>performance_schema.host_cache.HOST_VALIDATED</code>.
     */
    public HostCacheRecord setHostValidated(HostCacheHostValidated value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.HOST_VALIDATED</code>.
     */
    public HostCacheHostValidated getHostValidated() {
        return (HostCacheHostValidated) get(2);
    }

    /**
     * Setter for <code>performance_schema.host_cache.SUM_CONNECT_ERRORS</code>.
     */
    public HostCacheRecord setSumConnectErrors(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.SUM_CONNECT_ERRORS</code>.
     */
    public Long getSumConnectErrors() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_HOST_BLOCKED_ERRORS</code>.
     */
    public HostCacheRecord setCountHostBlockedErrors(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HOST_BLOCKED_ERRORS</code>.
     */
    public Long getCountHostBlockedErrors() {
        return (Long) get(4);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_TRANSIENT_ERRORS</code>.
     */
    public HostCacheRecord setCountNameinfoTransientErrors(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_TRANSIENT_ERRORS</code>.
     */
    public Long getCountNameinfoTransientErrors() {
        return (Long) get(5);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_PERMANENT_ERRORS</code>.
     */
    public HostCacheRecord setCountNameinfoPermanentErrors(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_PERMANENT_ERRORS</code>.
     */
    public Long getCountNameinfoPermanentErrors() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_FORMAT_ERRORS</code>.
     */
    public HostCacheRecord setCountFormatErrors(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_FORMAT_ERRORS</code>.
     */
    public Long getCountFormatErrors() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_TRANSIENT_ERRORS</code>.
     */
    public HostCacheRecord setCountAddrinfoTransientErrors(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_TRANSIENT_ERRORS</code>.
     */
    public Long getCountAddrinfoTransientErrors() {
        return (Long) get(8);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_PERMANENT_ERRORS</code>.
     */
    public HostCacheRecord setCountAddrinfoPermanentErrors(Long value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_PERMANENT_ERRORS</code>.
     */
    public Long getCountAddrinfoPermanentErrors() {
        return (Long) get(9);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_FCRDNS_ERRORS</code>.
     */
    public HostCacheRecord setCountFcrdnsErrors(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_FCRDNS_ERRORS</code>.
     */
    public Long getCountFcrdnsErrors() {
        return (Long) get(10);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_HOST_ACL_ERRORS</code>.
     */
    public HostCacheRecord setCountHostAclErrors(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HOST_ACL_ERRORS</code>.
     */
    public Long getCountHostAclErrors() {
        return (Long) get(11);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_NO_AUTH_PLUGIN_ERRORS</code>.
     */
    public HostCacheRecord setCountNoAuthPluginErrors(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NO_AUTH_PLUGIN_ERRORS</code>.
     */
    public Long getCountNoAuthPluginErrors() {
        return (Long) get(12);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_AUTH_PLUGIN_ERRORS</code>.
     */
    public HostCacheRecord setCountAuthPluginErrors(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_AUTH_PLUGIN_ERRORS</code>.
     */
    public Long getCountAuthPluginErrors() {
        return (Long) get(13);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_HANDSHAKE_ERRORS</code>.
     */
    public HostCacheRecord setCountHandshakeErrors(Long value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HANDSHAKE_ERRORS</code>.
     */
    public Long getCountHandshakeErrors() {
        return (Long) get(14);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ERRORS</code>.
     */
    public HostCacheRecord setCountProxyUserErrors(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ERRORS</code>.
     */
    public Long getCountProxyUserErrors() {
        return (Long) get(15);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ACL_ERRORS</code>.
     */
    public HostCacheRecord setCountProxyUserAclErrors(Long value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ACL_ERRORS</code>.
     */
    public Long getCountProxyUserAclErrors() {
        return (Long) get(16);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_AUTHENTICATION_ERRORS</code>.
     */
    public HostCacheRecord setCountAuthenticationErrors(Long value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_AUTHENTICATION_ERRORS</code>.
     */
    public Long getCountAuthenticationErrors() {
        return (Long) get(17);
    }

    /**
     * Setter for <code>performance_schema.host_cache.COUNT_SSL_ERRORS</code>.
     */
    public HostCacheRecord setCountSslErrors(Long value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.COUNT_SSL_ERRORS</code>.
     */
    public Long getCountSslErrors() {
        return (Long) get(18);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_ERRORS</code>.
     */
    public HostCacheRecord setCountMaxUserConnectionsErrors(Long value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_ERRORS</code>.
     */
    public Long getCountMaxUserConnectionsErrors() {
        return (Long) get(19);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS</code>.
     */
    public HostCacheRecord setCountMaxUserConnectionsPerHourErrors(Long value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS</code>.
     */
    public Long getCountMaxUserConnectionsPerHourErrors() {
        return (Long) get(20);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_DEFAULT_DATABASE_ERRORS</code>.
     */
    public HostCacheRecord setCountDefaultDatabaseErrors(Long value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_DEFAULT_DATABASE_ERRORS</code>.
     */
    public Long getCountDefaultDatabaseErrors() {
        return (Long) get(21);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_INIT_CONNECT_ERRORS</code>.
     */
    public HostCacheRecord setCountInitConnectErrors(Long value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_INIT_CONNECT_ERRORS</code>.
     */
    public Long getCountInitConnectErrors() {
        return (Long) get(22);
    }

    /**
     * Setter for <code>performance_schema.host_cache.COUNT_LOCAL_ERRORS</code>.
     */
    public HostCacheRecord setCountLocalErrors(Long value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.COUNT_LOCAL_ERRORS</code>.
     */
    public Long getCountLocalErrors() {
        return (Long) get(23);
    }

    /**
     * Setter for
     * <code>performance_schema.host_cache.COUNT_UNKNOWN_ERRORS</code>.
     */
    public HostCacheRecord setCountUnknownErrors(Long value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_UNKNOWN_ERRORS</code>.
     */
    public Long getCountUnknownErrors() {
        return (Long) get(24);
    }

    /**
     * Setter for <code>performance_schema.host_cache.FIRST_SEEN</code>.
     */
    public HostCacheRecord setFirstSeen(LocalDateTime value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.FIRST_SEEN</code>.
     */
    public LocalDateTime getFirstSeen() {
        return (LocalDateTime) get(25);
    }

    /**
     * Setter for <code>performance_schema.host_cache.LAST_SEEN</code>.
     */
    public HostCacheRecord setLastSeen(LocalDateTime value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.LAST_SEEN</code>.
     */
    public LocalDateTime getLastSeen() {
        return (LocalDateTime) get(26);
    }

    /**
     * Setter for <code>performance_schema.host_cache.FIRST_ERROR_SEEN</code>.
     */
    public HostCacheRecord setFirstErrorSeen(LocalDateTime value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.FIRST_ERROR_SEEN</code>.
     */
    public LocalDateTime getFirstErrorSeen() {
        return (LocalDateTime) get(27);
    }

    /**
     * Setter for <code>performance_schema.host_cache.LAST_ERROR_SEEN</code>.
     */
    public HostCacheRecord setLastErrorSeen(LocalDateTime value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.host_cache.LAST_ERROR_SEEN</code>.
     */
    public LocalDateTime getLastErrorSeen() {
        return (LocalDateTime) get(28);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HostCacheRecord
     */
    public HostCacheRecord() {
        super(HostCache.HOST_CACHE);
    }

    /**
     * Create a detached, initialised HostCacheRecord
     */
    public HostCacheRecord(String ip, String host, HostCacheHostValidated hostValidated, Long sumConnectErrors, Long countHostBlockedErrors, Long countNameinfoTransientErrors, Long countNameinfoPermanentErrors, Long countFormatErrors, Long countAddrinfoTransientErrors, Long countAddrinfoPermanentErrors, Long countFcrdnsErrors, Long countHostAclErrors, Long countNoAuthPluginErrors, Long countAuthPluginErrors, Long countHandshakeErrors, Long countProxyUserErrors, Long countProxyUserAclErrors, Long countAuthenticationErrors, Long countSslErrors, Long countMaxUserConnectionsErrors, Long countMaxUserConnectionsPerHourErrors, Long countDefaultDatabaseErrors, Long countInitConnectErrors, Long countLocalErrors, Long countUnknownErrors, LocalDateTime firstSeen, LocalDateTime lastSeen, LocalDateTime firstErrorSeen, LocalDateTime lastErrorSeen) {
        super(HostCache.HOST_CACHE);

        setIp(ip);
        setHost(host);
        setHostValidated(hostValidated);
        setSumConnectErrors(sumConnectErrors);
        setCountHostBlockedErrors(countHostBlockedErrors);
        setCountNameinfoTransientErrors(countNameinfoTransientErrors);
        setCountNameinfoPermanentErrors(countNameinfoPermanentErrors);
        setCountFormatErrors(countFormatErrors);
        setCountAddrinfoTransientErrors(countAddrinfoTransientErrors);
        setCountAddrinfoPermanentErrors(countAddrinfoPermanentErrors);
        setCountFcrdnsErrors(countFcrdnsErrors);
        setCountHostAclErrors(countHostAclErrors);
        setCountNoAuthPluginErrors(countNoAuthPluginErrors);
        setCountAuthPluginErrors(countAuthPluginErrors);
        setCountHandshakeErrors(countHandshakeErrors);
        setCountProxyUserErrors(countProxyUserErrors);
        setCountProxyUserAclErrors(countProxyUserAclErrors);
        setCountAuthenticationErrors(countAuthenticationErrors);
        setCountSslErrors(countSslErrors);
        setCountMaxUserConnectionsErrors(countMaxUserConnectionsErrors);
        setCountMaxUserConnectionsPerHourErrors(countMaxUserConnectionsPerHourErrors);
        setCountDefaultDatabaseErrors(countDefaultDatabaseErrors);
        setCountInitConnectErrors(countInitConnectErrors);
        setCountLocalErrors(countLocalErrors);
        setCountUnknownErrors(countUnknownErrors);
        setFirstSeen(firstSeen);
        setLastSeen(lastSeen);
        setFirstErrorSeen(firstErrorSeen);
        setLastErrorSeen(lastErrorSeen);
    }

    /**
     * Create a detached, initialised HostCacheRecord
     */
    public HostCacheRecord(com.neurasim.jooq.performance_schema.tables.pojos.HostCache value) {
        super(HostCache.HOST_CACHE);

        if (value != null) {
            setIp(value.getIp());
            setHost(value.getHost());
            setHostValidated(value.getHostValidated());
            setSumConnectErrors(value.getSumConnectErrors());
            setCountHostBlockedErrors(value.getCountHostBlockedErrors());
            setCountNameinfoTransientErrors(value.getCountNameinfoTransientErrors());
            setCountNameinfoPermanentErrors(value.getCountNameinfoPermanentErrors());
            setCountFormatErrors(value.getCountFormatErrors());
            setCountAddrinfoTransientErrors(value.getCountAddrinfoTransientErrors());
            setCountAddrinfoPermanentErrors(value.getCountAddrinfoPermanentErrors());
            setCountFcrdnsErrors(value.getCountFcrdnsErrors());
            setCountHostAclErrors(value.getCountHostAclErrors());
            setCountNoAuthPluginErrors(value.getCountNoAuthPluginErrors());
            setCountAuthPluginErrors(value.getCountAuthPluginErrors());
            setCountHandshakeErrors(value.getCountHandshakeErrors());
            setCountProxyUserErrors(value.getCountProxyUserErrors());
            setCountProxyUserAclErrors(value.getCountProxyUserAclErrors());
            setCountAuthenticationErrors(value.getCountAuthenticationErrors());
            setCountSslErrors(value.getCountSslErrors());
            setCountMaxUserConnectionsErrors(value.getCountMaxUserConnectionsErrors());
            setCountMaxUserConnectionsPerHourErrors(value.getCountMaxUserConnectionsPerHourErrors());
            setCountDefaultDatabaseErrors(value.getCountDefaultDatabaseErrors());
            setCountInitConnectErrors(value.getCountInitConnectErrors());
            setCountLocalErrors(value.getCountLocalErrors());
            setCountUnknownErrors(value.getCountUnknownErrors());
            setFirstSeen(value.getFirstSeen());
            setLastSeen(value.getLastSeen());
            setFirstErrorSeen(value.getFirstErrorSeen());
            setLastErrorSeen(value.getLastErrorSeen());
        }
    }
}
