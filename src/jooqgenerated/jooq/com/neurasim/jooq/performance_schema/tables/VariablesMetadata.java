/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables;


import com.neurasim.jooq.performance_schema.PerformanceSchema;
import com.neurasim.jooq.performance_schema.enums.VariablesMetadataDataType;
import com.neurasim.jooq.performance_schema.enums.VariablesMetadataVariableScope;
import com.neurasim.jooq.performance_schema.tables.records.VariablesMetadataRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VariablesMetadata extends TableImpl<VariablesMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.variables_metadata</code>
     */
    public static final VariablesMetadata VARIABLES_METADATA = new VariablesMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariablesMetadataRecord> getRecordType() {
        return VariablesMetadataRecord.class;
    }

    /**
     * The column
     * <code>performance_schema.variables_metadata.VARIABLE_NAME</code>.
     */
    public final TableField<VariablesMetadataRecord, String> VARIABLE_NAME = createField(DSL.name("VARIABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.variables_metadata.VARIABLE_SCOPE</code>.
     */
    public final TableField<VariablesMetadataRecord, VariablesMetadataVariableScope> VARIABLE_SCOPE = createField(DSL.name("VARIABLE_SCOPE"), SQLDataType.VARCHAR(12).nullable(false).asEnumDataType(com.neurasim.jooq.performance_schema.enums.VariablesMetadataVariableScope.class), this, "");

    /**
     * The column <code>performance_schema.variables_metadata.DATA_TYPE</code>.
     */
    public final TableField<VariablesMetadataRecord, VariablesMetadataDataType> DATA_TYPE = createField(DSL.name("DATA_TYPE"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(com.neurasim.jooq.performance_schema.enums.VariablesMetadataDataType.class), this, "");

    /**
     * The column <code>performance_schema.variables_metadata.MIN_VALUE</code>.
     */
    public final TableField<VariablesMetadataRecord, String> MIN_VALUE = createField(DSL.name("MIN_VALUE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.variables_metadata.MAX_VALUE</code>.
     */
    public final TableField<VariablesMetadataRecord, String> MAX_VALUE = createField(DSL.name("MAX_VALUE"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>performance_schema.variables_metadata.DOCUMENTATION</code>.
     */
    public final TableField<VariablesMetadataRecord, String> DOCUMENTATION = createField(DSL.name("DOCUMENTATION"), SQLDataType.CLOB.nullable(false), this, "");

    private VariablesMetadata(Name alias, Table<VariablesMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private VariablesMetadata(Name alias, Table<VariablesMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.variables_metadata</code>
     * table reference
     */
    public VariablesMetadata(String alias) {
        this(DSL.name(alias), VARIABLES_METADATA);
    }

    /**
     * Create an aliased <code>performance_schema.variables_metadata</code>
     * table reference
     */
    public VariablesMetadata(Name alias) {
        this(alias, VARIABLES_METADATA);
    }

    /**
     * Create a <code>performance_schema.variables_metadata</code> table
     * reference
     */
    public VariablesMetadata() {
        this(DSL.name("variables_metadata"), null);
    }

    public <O extends Record> VariablesMetadata(Table<O> child, ForeignKey<O, VariablesMetadataRecord> key) {
        super(child, key, VARIABLES_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public VariablesMetadata as(String alias) {
        return new VariablesMetadata(DSL.name(alias), this);
    }

    @Override
    public VariablesMetadata as(Name alias) {
        return new VariablesMetadata(alias, this);
    }

    @Override
    public VariablesMetadata as(Table<?> alias) {
        return new VariablesMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VariablesMetadata rename(String name) {
        return new VariablesMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VariablesMetadata rename(Name name) {
        return new VariablesMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VariablesMetadata rename(Table<?> name) {
        return new VariablesMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, VariablesMetadataVariableScope, VariablesMetadataDataType, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super VariablesMetadataVariableScope, ? super VariablesMetadataDataType, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super VariablesMetadataVariableScope, ? super VariablesMetadataDataType, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
