/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.enums.EventsStatementsCurrentExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.EventsStatementsCurrentNestingEventType;
import com.neurasim.jooq.performance_schema.tables.EventsStatementsCurrent;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsCurrentRecord extends UpdatableRecordImpl<EventsStatementsCurrentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.THREAD_ID</code>.
     */
    public EventsStatementsCurrentRecord setThreadId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.EVENT_ID</code>.
     */
    public EventsStatementsCurrentRecord setEventId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EVENT_ID</code>.
     */
    public ULong getEventId() {
        return (ULong) get(1);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.END_EVENT_ID</code>.
     */
    public EventsStatementsCurrentRecord setEndEventId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.END_EVENT_ID</code>.
     */
    public ULong getEndEventId() {
        return (ULong) get(2);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.EVENT_NAME</code>.
     */
    public EventsStatementsCurrentRecord setEventName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EVENT_NAME</code>.
     */
    public String getEventName() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SOURCE</code>.
     */
    public EventsStatementsCurrentRecord setSource(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SOURCE</code>.
     */
    public String getSource() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.TIMER_START</code>.
     */
    public EventsStatementsCurrentRecord setTimerStart(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_START</code>.
     */
    public ULong getTimerStart() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.TIMER_END</code>.
     */
    public EventsStatementsCurrentRecord setTimerEnd(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_END</code>.
     */
    public ULong getTimerEnd() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.TIMER_WAIT</code>.
     */
    public EventsStatementsCurrentRecord setTimerWait(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.TIMER_WAIT</code>.
     */
    public ULong getTimerWait() {
        return (ULong) get(7);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.LOCK_TIME</code>.
     */
    public EventsStatementsCurrentRecord setLockTime(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.LOCK_TIME</code>.
     */
    public ULong getLockTime() {
        return (ULong) get(8);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SQL_TEXT</code>.
     */
    public EventsStatementsCurrentRecord setSqlText(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SQL_TEXT</code>.
     */
    public String getSqlText() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.DIGEST</code>.
     */
    public EventsStatementsCurrentRecord setDigest(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.DIGEST</code>.
     */
    public String getDigest() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.DIGEST_TEXT</code>.
     */
    public EventsStatementsCurrentRecord setDigestText(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.DIGEST_TEXT</code>.
     */
    public String getDigestText() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.CURRENT_SCHEMA</code>.
     */
    public EventsStatementsCurrentRecord setCurrentSchema(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CURRENT_SCHEMA</code>.
     */
    public String getCurrentSchema() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.OBJECT_TYPE</code>.
     */
    public EventsStatementsCurrentRecord setObjectType(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_TYPE</code>.
     */
    public String getObjectType() {
        return (String) get(13);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.OBJECT_SCHEMA</code>.
     */
    public EventsStatementsCurrentRecord setObjectSchema(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.OBJECT_NAME</code>.
     */
    public EventsStatementsCurrentRecord setObjectName(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return (String) get(15);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.OBJECT_INSTANCE_BEGIN</code>.
     */
    public EventsStatementsCurrentRecord setObjectInstanceBegin(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return (ULong) get(16);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.MYSQL_ERRNO</code>.
     */
    public EventsStatementsCurrentRecord setMysqlErrno(Integer value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MYSQL_ERRNO</code>.
     */
    public Integer getMysqlErrno() {
        return (Integer) get(17);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.RETURNED_SQLSTATE</code>.
     */
    public EventsStatementsCurrentRecord setReturnedSqlstate(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.RETURNED_SQLSTATE</code>.
     */
    public String getReturnedSqlstate() {
        return (String) get(18);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.MESSAGE_TEXT</code>.
     */
    public EventsStatementsCurrentRecord setMessageText(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MESSAGE_TEXT</code>.
     */
    public String getMessageText() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.ERRORS</code>.
     */
    public EventsStatementsCurrentRecord setErrors(ULong value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ERRORS</code>.
     */
    public ULong getErrors() {
        return (ULong) get(20);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.WARNINGS</code>.
     */
    public EventsStatementsCurrentRecord setWarnings(ULong value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.WARNINGS</code>.
     */
    public ULong getWarnings() {
        return (ULong) get(21);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.ROWS_AFFECTED</code>.
     */
    public EventsStatementsCurrentRecord setRowsAffected(ULong value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_AFFECTED</code>.
     */
    public ULong getRowsAffected() {
        return (ULong) get(22);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.ROWS_SENT</code>.
     */
    public EventsStatementsCurrentRecord setRowsSent(ULong value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_SENT</code>.
     */
    public ULong getRowsSent() {
        return (ULong) get(23);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.ROWS_EXAMINED</code>.
     */
    public EventsStatementsCurrentRecord setRowsExamined(ULong value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.ROWS_EXAMINED</code>.
     */
    public ULong getRowsExamined() {
        return (ULong) get(24);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_DISK_TABLES</code>.
     */
    public EventsStatementsCurrentRecord setCreatedTmpDiskTables(ULong value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_DISK_TABLES</code>.
     */
    public ULong getCreatedTmpDiskTables() {
        return (ULong) get(25);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_TABLES</code>.
     */
    public EventsStatementsCurrentRecord setCreatedTmpTables(ULong value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CREATED_TMP_TABLES</code>.
     */
    public ULong getCreatedTmpTables() {
        return (ULong) get(26);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_JOIN</code>.
     */
    public EventsStatementsCurrentRecord setSelectFullJoin(ULong value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_JOIN</code>.
     */
    public ULong getSelectFullJoin() {
        return (ULong) get(27);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_RANGE_JOIN</code>.
     */
    public EventsStatementsCurrentRecord setSelectFullRangeJoin(ULong value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_FULL_RANGE_JOIN</code>.
     */
    public ULong getSelectFullRangeJoin() {
        return (ULong) get(28);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE</code>.
     */
    public EventsStatementsCurrentRecord setSelectRange(ULong value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE</code>.
     */
    public ULong getSelectRange() {
        return (ULong) get(29);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE_CHECK</code>.
     */
    public EventsStatementsCurrentRecord setSelectRangeCheck(ULong value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_RANGE_CHECK</code>.
     */
    public ULong getSelectRangeCheck() {
        return (ULong) get(30);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SELECT_SCAN</code>.
     */
    public EventsStatementsCurrentRecord setSelectScan(ULong value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SELECT_SCAN</code>.
     */
    public ULong getSelectScan() {
        return (ULong) get(31);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SORT_MERGE_PASSES</code>.
     */
    public EventsStatementsCurrentRecord setSortMergePasses(ULong value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_MERGE_PASSES</code>.
     */
    public ULong getSortMergePasses() {
        return (ULong) get(32);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SORT_RANGE</code>.
     */
    public EventsStatementsCurrentRecord setSortRange(ULong value) {
        set(33, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_RANGE</code>.
     */
    public ULong getSortRange() {
        return (ULong) get(33);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SORT_ROWS</code>.
     */
    public EventsStatementsCurrentRecord setSortRows(ULong value) {
        set(34, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_ROWS</code>.
     */
    public ULong getSortRows() {
        return (ULong) get(34);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.SORT_SCAN</code>.
     */
    public EventsStatementsCurrentRecord setSortScan(ULong value) {
        set(35, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.SORT_SCAN</code>.
     */
    public ULong getSortScan() {
        return (ULong) get(35);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.NO_INDEX_USED</code>.
     */
    public EventsStatementsCurrentRecord setNoIndexUsed(ULong value) {
        set(36, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NO_INDEX_USED</code>.
     */
    public ULong getNoIndexUsed() {
        return (ULong) get(36);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.NO_GOOD_INDEX_USED</code>.
     */
    public EventsStatementsCurrentRecord setNoGoodIndexUsed(ULong value) {
        set(37, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NO_GOOD_INDEX_USED</code>.
     */
    public ULong getNoGoodIndexUsed() {
        return (ULong) get(37);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_ID</code>.
     */
    public EventsStatementsCurrentRecord setNestingEventId(ULong value) {
        set(38, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_ID</code>.
     */
    public ULong getNestingEventId() {
        return (ULong) get(38);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_TYPE</code>.
     */
    public EventsStatementsCurrentRecord setNestingEventType(EventsStatementsCurrentNestingEventType value) {
        set(39, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_TYPE</code>.
     */
    public EventsStatementsCurrentNestingEventType getNestingEventType() {
        return (EventsStatementsCurrentNestingEventType) get(39);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_LEVEL</code>.
     */
    public EventsStatementsCurrentRecord setNestingEventLevel(Integer value) {
        set(40, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.NESTING_EVENT_LEVEL</code>.
     */
    public Integer getNestingEventLevel() {
        return (Integer) get(40);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.STATEMENT_ID</code>.
     */
    public EventsStatementsCurrentRecord setStatementId(ULong value) {
        set(41, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.STATEMENT_ID</code>.
     */
    public ULong getStatementId() {
        return (ULong) get(41);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.CPU_TIME</code>.
     */
    public EventsStatementsCurrentRecord setCpuTime(ULong value) {
        set(42, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.CPU_TIME</code>.
     */
    public ULong getCpuTime() {
        return (ULong) get(42);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.MAX_CONTROLLED_MEMORY</code>.
     */
    public EventsStatementsCurrentRecord setMaxControlledMemory(ULong value) {
        set(43, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return (ULong) get(43);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.MAX_TOTAL_MEMORY</code>.
     */
    public EventsStatementsCurrentRecord setMaxTotalMemory(ULong value) {
        set(44, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return (ULong) get(44);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_current.EXECUTION_ENGINE</code>.
     */
    public EventsStatementsCurrentRecord setExecutionEngine(EventsStatementsCurrentExecutionEngine value) {
        set(45, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_current.EXECUTION_ENGINE</code>.
     */
    public EventsStatementsCurrentExecutionEngine getExecutionEngine() {
        return (EventsStatementsCurrentExecutionEngine) get(45);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<ULong, ULong> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventsStatementsCurrentRecord
     */
    public EventsStatementsCurrentRecord() {
        super(EventsStatementsCurrent.EVENTS_STATEMENTS_CURRENT);
    }

    /**
     * Create a detached, initialised EventsStatementsCurrentRecord
     */
    public EventsStatementsCurrentRecord(ULong threadId, ULong eventId, ULong endEventId, String eventName, String source, ULong timerStart, ULong timerEnd, ULong timerWait, ULong lockTime, String sqlText, String digest, String digestText, String currentSchema, String objectType, String objectSchema, String objectName, ULong objectInstanceBegin, Integer mysqlErrno, String returnedSqlstate, String messageText, ULong errors, ULong warnings, ULong rowsAffected, ULong rowsSent, ULong rowsExamined, ULong createdTmpDiskTables, ULong createdTmpTables, ULong selectFullJoin, ULong selectFullRangeJoin, ULong selectRange, ULong selectRangeCheck, ULong selectScan, ULong sortMergePasses, ULong sortRange, ULong sortRows, ULong sortScan, ULong noIndexUsed, ULong noGoodIndexUsed, ULong nestingEventId, EventsStatementsCurrentNestingEventType nestingEventType, Integer nestingEventLevel, ULong statementId, ULong cpuTime, ULong maxControlledMemory, ULong maxTotalMemory, EventsStatementsCurrentExecutionEngine executionEngine) {
        super(EventsStatementsCurrent.EVENTS_STATEMENTS_CURRENT);

        setThreadId(threadId);
        setEventId(eventId);
        setEndEventId(endEventId);
        setEventName(eventName);
        setSource(source);
        setTimerStart(timerStart);
        setTimerEnd(timerEnd);
        setTimerWait(timerWait);
        setLockTime(lockTime);
        setSqlText(sqlText);
        setDigest(digest);
        setDigestText(digestText);
        setCurrentSchema(currentSchema);
        setObjectType(objectType);
        setObjectSchema(objectSchema);
        setObjectName(objectName);
        setObjectInstanceBegin(objectInstanceBegin);
        setMysqlErrno(mysqlErrno);
        setReturnedSqlstate(returnedSqlstate);
        setMessageText(messageText);
        setErrors(errors);
        setWarnings(warnings);
        setRowsAffected(rowsAffected);
        setRowsSent(rowsSent);
        setRowsExamined(rowsExamined);
        setCreatedTmpDiskTables(createdTmpDiskTables);
        setCreatedTmpTables(createdTmpTables);
        setSelectFullJoin(selectFullJoin);
        setSelectFullRangeJoin(selectFullRangeJoin);
        setSelectRange(selectRange);
        setSelectRangeCheck(selectRangeCheck);
        setSelectScan(selectScan);
        setSortMergePasses(sortMergePasses);
        setSortRange(sortRange);
        setSortRows(sortRows);
        setSortScan(sortScan);
        setNoIndexUsed(noIndexUsed);
        setNoGoodIndexUsed(noGoodIndexUsed);
        setNestingEventId(nestingEventId);
        setNestingEventType(nestingEventType);
        setNestingEventLevel(nestingEventLevel);
        setStatementId(statementId);
        setCpuTime(cpuTime);
        setMaxControlledMemory(maxControlledMemory);
        setMaxTotalMemory(maxTotalMemory);
        setExecutionEngine(executionEngine);
    }

    /**
     * Create a detached, initialised EventsStatementsCurrentRecord
     */
    public EventsStatementsCurrentRecord(com.neurasim.jooq.performance_schema.tables.pojos.EventsStatementsCurrent value) {
        super(EventsStatementsCurrent.EVENTS_STATEMENTS_CURRENT);

        if (value != null) {
            setThreadId(value.getThreadId());
            setEventId(value.getEventId());
            setEndEventId(value.getEndEventId());
            setEventName(value.getEventName());
            setSource(value.getSource());
            setTimerStart(value.getTimerStart());
            setTimerEnd(value.getTimerEnd());
            setTimerWait(value.getTimerWait());
            setLockTime(value.getLockTime());
            setSqlText(value.getSqlText());
            setDigest(value.getDigest());
            setDigestText(value.getDigestText());
            setCurrentSchema(value.getCurrentSchema());
            setObjectType(value.getObjectType());
            setObjectSchema(value.getObjectSchema());
            setObjectName(value.getObjectName());
            setObjectInstanceBegin(value.getObjectInstanceBegin());
            setMysqlErrno(value.getMysqlErrno());
            setReturnedSqlstate(value.getReturnedSqlstate());
            setMessageText(value.getMessageText());
            setErrors(value.getErrors());
            setWarnings(value.getWarnings());
            setRowsAffected(value.getRowsAffected());
            setRowsSent(value.getRowsSent());
            setRowsExamined(value.getRowsExamined());
            setCreatedTmpDiskTables(value.getCreatedTmpDiskTables());
            setCreatedTmpTables(value.getCreatedTmpTables());
            setSelectFullJoin(value.getSelectFullJoin());
            setSelectFullRangeJoin(value.getSelectFullRangeJoin());
            setSelectRange(value.getSelectRange());
            setSelectRangeCheck(value.getSelectRangeCheck());
            setSelectScan(value.getSelectScan());
            setSortMergePasses(value.getSortMergePasses());
            setSortRange(value.getSortRange());
            setSortRows(value.getSortRows());
            setSortScan(value.getSortScan());
            setNoIndexUsed(value.getNoIndexUsed());
            setNoGoodIndexUsed(value.getNoGoodIndexUsed());
            setNestingEventId(value.getNestingEventId());
            setNestingEventType(value.getNestingEventType());
            setNestingEventLevel(value.getNestingEventLevel());
            setStatementId(value.getStatementId());
            setCpuTime(value.getCpuTime());
            setMaxControlledMemory(value.getMaxControlledMemory());
            setMaxTotalMemory(value.getMaxTotalMemory());
            setExecutionEngine(value.getExecutionEngine());
        }
    }
}
