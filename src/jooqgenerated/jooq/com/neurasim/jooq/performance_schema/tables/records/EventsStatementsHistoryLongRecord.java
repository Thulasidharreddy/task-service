/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.enums.EventsStatementsHistoryLongExecutionEngine;
import com.neurasim.jooq.performance_schema.enums.EventsStatementsHistoryLongNestingEventType;
import com.neurasim.jooq.performance_schema.tables.EventsStatementsHistoryLong;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsHistoryLongRecord extends TableRecordImpl<EventsStatementsHistoryLongRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.THREAD_ID</code>.
     */
    public EventsStatementsHistoryLongRecord setThreadId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.EVENT_ID</code>.
     */
    public EventsStatementsHistoryLongRecord setEventId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.EVENT_ID</code>.
     */
    public ULong getEventId() {
        return (ULong) get(1);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.END_EVENT_ID</code>.
     */
    public EventsStatementsHistoryLongRecord setEndEventId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.END_EVENT_ID</code>.
     */
    public ULong getEndEventId() {
        return (ULong) get(2);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.EVENT_NAME</code>.
     */
    public EventsStatementsHistoryLongRecord setEventName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.EVENT_NAME</code>.
     */
    public String getEventName() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SOURCE</code>.
     */
    public EventsStatementsHistoryLongRecord setSource(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SOURCE</code>.
     */
    public String getSource() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.TIMER_START</code>.
     */
    public EventsStatementsHistoryLongRecord setTimerStart(ULong value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.TIMER_START</code>.
     */
    public ULong getTimerStart() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.TIMER_END</code>.
     */
    public EventsStatementsHistoryLongRecord setTimerEnd(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.TIMER_END</code>.
     */
    public ULong getTimerEnd() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.TIMER_WAIT</code>.
     */
    public EventsStatementsHistoryLongRecord setTimerWait(ULong value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.TIMER_WAIT</code>.
     */
    public ULong getTimerWait() {
        return (ULong) get(7);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.LOCK_TIME</code>.
     */
    public EventsStatementsHistoryLongRecord setLockTime(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.LOCK_TIME</code>.
     */
    public ULong getLockTime() {
        return (ULong) get(8);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SQL_TEXT</code>.
     */
    public EventsStatementsHistoryLongRecord setSqlText(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SQL_TEXT</code>.
     */
    public String getSqlText() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.DIGEST</code>.
     */
    public EventsStatementsHistoryLongRecord setDigest(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.DIGEST</code>.
     */
    public String getDigest() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.DIGEST_TEXT</code>.
     */
    public EventsStatementsHistoryLongRecord setDigestText(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.DIGEST_TEXT</code>.
     */
    public String getDigestText() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.CURRENT_SCHEMA</code>.
     */
    public EventsStatementsHistoryLongRecord setCurrentSchema(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.CURRENT_SCHEMA</code>.
     */
    public String getCurrentSchema() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.OBJECT_TYPE</code>.
     */
    public EventsStatementsHistoryLongRecord setObjectType(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.OBJECT_TYPE</code>.
     */
    public String getObjectType() {
        return (String) get(13);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.OBJECT_SCHEMA</code>.
     */
    public EventsStatementsHistoryLongRecord setObjectSchema(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return (String) get(14);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.OBJECT_NAME</code>.
     */
    public EventsStatementsHistoryLongRecord setObjectName(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return (String) get(15);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.OBJECT_INSTANCE_BEGIN</code>.
     */
    public EventsStatementsHistoryLongRecord setObjectInstanceBegin(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return (ULong) get(16);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.MYSQL_ERRNO</code>.
     */
    public EventsStatementsHistoryLongRecord setMysqlErrno(Integer value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.MYSQL_ERRNO</code>.
     */
    public Integer getMysqlErrno() {
        return (Integer) get(17);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.RETURNED_SQLSTATE</code>.
     */
    public EventsStatementsHistoryLongRecord setReturnedSqlstate(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.RETURNED_SQLSTATE</code>.
     */
    public String getReturnedSqlstate() {
        return (String) get(18);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.MESSAGE_TEXT</code>.
     */
    public EventsStatementsHistoryLongRecord setMessageText(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.MESSAGE_TEXT</code>.
     */
    public String getMessageText() {
        return (String) get(19);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.ERRORS</code>.
     */
    public EventsStatementsHistoryLongRecord setErrors(ULong value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.ERRORS</code>.
     */
    public ULong getErrors() {
        return (ULong) get(20);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.WARNINGS</code>.
     */
    public EventsStatementsHistoryLongRecord setWarnings(ULong value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.WARNINGS</code>.
     */
    public ULong getWarnings() {
        return (ULong) get(21);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.ROWS_AFFECTED</code>.
     */
    public EventsStatementsHistoryLongRecord setRowsAffected(ULong value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.ROWS_AFFECTED</code>.
     */
    public ULong getRowsAffected() {
        return (ULong) get(22);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.ROWS_SENT</code>.
     */
    public EventsStatementsHistoryLongRecord setRowsSent(ULong value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.ROWS_SENT</code>.
     */
    public ULong getRowsSent() {
        return (ULong) get(23);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.ROWS_EXAMINED</code>.
     */
    public EventsStatementsHistoryLongRecord setRowsExamined(ULong value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.ROWS_EXAMINED</code>.
     */
    public ULong getRowsExamined() {
        return (ULong) get(24);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.CREATED_TMP_DISK_TABLES</code>.
     */
    public EventsStatementsHistoryLongRecord setCreatedTmpDiskTables(ULong value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.CREATED_TMP_DISK_TABLES</code>.
     */
    public ULong getCreatedTmpDiskTables() {
        return (ULong) get(25);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.CREATED_TMP_TABLES</code>.
     */
    public EventsStatementsHistoryLongRecord setCreatedTmpTables(ULong value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.CREATED_TMP_TABLES</code>.
     */
    public ULong getCreatedTmpTables() {
        return (ULong) get(26);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SELECT_FULL_JOIN</code>.
     */
    public EventsStatementsHistoryLongRecord setSelectFullJoin(ULong value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SELECT_FULL_JOIN</code>.
     */
    public ULong getSelectFullJoin() {
        return (ULong) get(27);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SELECT_FULL_RANGE_JOIN</code>.
     */
    public EventsStatementsHistoryLongRecord setSelectFullRangeJoin(ULong value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SELECT_FULL_RANGE_JOIN</code>.
     */
    public ULong getSelectFullRangeJoin() {
        return (ULong) get(28);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SELECT_RANGE</code>.
     */
    public EventsStatementsHistoryLongRecord setSelectRange(ULong value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SELECT_RANGE</code>.
     */
    public ULong getSelectRange() {
        return (ULong) get(29);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SELECT_RANGE_CHECK</code>.
     */
    public EventsStatementsHistoryLongRecord setSelectRangeCheck(ULong value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SELECT_RANGE_CHECK</code>.
     */
    public ULong getSelectRangeCheck() {
        return (ULong) get(30);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SELECT_SCAN</code>.
     */
    public EventsStatementsHistoryLongRecord setSelectScan(ULong value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SELECT_SCAN</code>.
     */
    public ULong getSelectScan() {
        return (ULong) get(31);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SORT_MERGE_PASSES</code>.
     */
    public EventsStatementsHistoryLongRecord setSortMergePasses(ULong value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SORT_MERGE_PASSES</code>.
     */
    public ULong getSortMergePasses() {
        return (ULong) get(32);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SORT_RANGE</code>.
     */
    public EventsStatementsHistoryLongRecord setSortRange(ULong value) {
        set(33, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SORT_RANGE</code>.
     */
    public ULong getSortRange() {
        return (ULong) get(33);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SORT_ROWS</code>.
     */
    public EventsStatementsHistoryLongRecord setSortRows(ULong value) {
        set(34, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SORT_ROWS</code>.
     */
    public ULong getSortRows() {
        return (ULong) get(34);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.SORT_SCAN</code>.
     */
    public EventsStatementsHistoryLongRecord setSortScan(ULong value) {
        set(35, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.SORT_SCAN</code>.
     */
    public ULong getSortScan() {
        return (ULong) get(35);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.NO_INDEX_USED</code>.
     */
    public EventsStatementsHistoryLongRecord setNoIndexUsed(ULong value) {
        set(36, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.NO_INDEX_USED</code>.
     */
    public ULong getNoIndexUsed() {
        return (ULong) get(36);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.NO_GOOD_INDEX_USED</code>.
     */
    public EventsStatementsHistoryLongRecord setNoGoodIndexUsed(ULong value) {
        set(37, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.NO_GOOD_INDEX_USED</code>.
     */
    public ULong getNoGoodIndexUsed() {
        return (ULong) get(37);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_ID</code>.
     */
    public EventsStatementsHistoryLongRecord setNestingEventId(ULong value) {
        set(38, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_ID</code>.
     */
    public ULong getNestingEventId() {
        return (ULong) get(38);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_TYPE</code>.
     */
    public EventsStatementsHistoryLongRecord setNestingEventType(EventsStatementsHistoryLongNestingEventType value) {
        set(39, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_TYPE</code>.
     */
    public EventsStatementsHistoryLongNestingEventType getNestingEventType() {
        return (EventsStatementsHistoryLongNestingEventType) get(39);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_LEVEL</code>.
     */
    public EventsStatementsHistoryLongRecord setNestingEventLevel(Integer value) {
        set(40, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.NESTING_EVENT_LEVEL</code>.
     */
    public Integer getNestingEventLevel() {
        return (Integer) get(40);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.STATEMENT_ID</code>.
     */
    public EventsStatementsHistoryLongRecord setStatementId(ULong value) {
        set(41, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.STATEMENT_ID</code>.
     */
    public ULong getStatementId() {
        return (ULong) get(41);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.CPU_TIME</code>.
     */
    public EventsStatementsHistoryLongRecord setCpuTime(ULong value) {
        set(42, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.CPU_TIME</code>.
     */
    public ULong getCpuTime() {
        return (ULong) get(42);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.MAX_CONTROLLED_MEMORY</code>.
     */
    public EventsStatementsHistoryLongRecord setMaxControlledMemory(ULong value) {
        set(43, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.MAX_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxControlledMemory() {
        return (ULong) get(43);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.MAX_TOTAL_MEMORY</code>.
     */
    public EventsStatementsHistoryLongRecord setMaxTotalMemory(ULong value) {
        set(44, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.MAX_TOTAL_MEMORY</code>.
     */
    public ULong getMaxTotalMemory() {
        return (ULong) get(44);
    }

    /**
     * Setter for
     * <code>performance_schema.events_statements_history_long.EXECUTION_ENGINE</code>.
     */
    public EventsStatementsHistoryLongRecord setExecutionEngine(EventsStatementsHistoryLongExecutionEngine value) {
        set(45, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.events_statements_history_long.EXECUTION_ENGINE</code>.
     */
    public EventsStatementsHistoryLongExecutionEngine getExecutionEngine() {
        return (EventsStatementsHistoryLongExecutionEngine) get(45);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventsStatementsHistoryLongRecord
     */
    public EventsStatementsHistoryLongRecord() {
        super(EventsStatementsHistoryLong.EVENTS_STATEMENTS_HISTORY_LONG);
    }

    /**
     * Create a detached, initialised EventsStatementsHistoryLongRecord
     */
    public EventsStatementsHistoryLongRecord(ULong threadId, ULong eventId, ULong endEventId, String eventName, String source, ULong timerStart, ULong timerEnd, ULong timerWait, ULong lockTime, String sqlText, String digest, String digestText, String currentSchema, String objectType, String objectSchema, String objectName, ULong objectInstanceBegin, Integer mysqlErrno, String returnedSqlstate, String messageText, ULong errors, ULong warnings, ULong rowsAffected, ULong rowsSent, ULong rowsExamined, ULong createdTmpDiskTables, ULong createdTmpTables, ULong selectFullJoin, ULong selectFullRangeJoin, ULong selectRange, ULong selectRangeCheck, ULong selectScan, ULong sortMergePasses, ULong sortRange, ULong sortRows, ULong sortScan, ULong noIndexUsed, ULong noGoodIndexUsed, ULong nestingEventId, EventsStatementsHistoryLongNestingEventType nestingEventType, Integer nestingEventLevel, ULong statementId, ULong cpuTime, ULong maxControlledMemory, ULong maxTotalMemory, EventsStatementsHistoryLongExecutionEngine executionEngine) {
        super(EventsStatementsHistoryLong.EVENTS_STATEMENTS_HISTORY_LONG);

        setThreadId(threadId);
        setEventId(eventId);
        setEndEventId(endEventId);
        setEventName(eventName);
        setSource(source);
        setTimerStart(timerStart);
        setTimerEnd(timerEnd);
        setTimerWait(timerWait);
        setLockTime(lockTime);
        setSqlText(sqlText);
        setDigest(digest);
        setDigestText(digestText);
        setCurrentSchema(currentSchema);
        setObjectType(objectType);
        setObjectSchema(objectSchema);
        setObjectName(objectName);
        setObjectInstanceBegin(objectInstanceBegin);
        setMysqlErrno(mysqlErrno);
        setReturnedSqlstate(returnedSqlstate);
        setMessageText(messageText);
        setErrors(errors);
        setWarnings(warnings);
        setRowsAffected(rowsAffected);
        setRowsSent(rowsSent);
        setRowsExamined(rowsExamined);
        setCreatedTmpDiskTables(createdTmpDiskTables);
        setCreatedTmpTables(createdTmpTables);
        setSelectFullJoin(selectFullJoin);
        setSelectFullRangeJoin(selectFullRangeJoin);
        setSelectRange(selectRange);
        setSelectRangeCheck(selectRangeCheck);
        setSelectScan(selectScan);
        setSortMergePasses(sortMergePasses);
        setSortRange(sortRange);
        setSortRows(sortRows);
        setSortScan(sortScan);
        setNoIndexUsed(noIndexUsed);
        setNoGoodIndexUsed(noGoodIndexUsed);
        setNestingEventId(nestingEventId);
        setNestingEventType(nestingEventType);
        setNestingEventLevel(nestingEventLevel);
        setStatementId(statementId);
        setCpuTime(cpuTime);
        setMaxControlledMemory(maxControlledMemory);
        setMaxTotalMemory(maxTotalMemory);
        setExecutionEngine(executionEngine);
    }

    /**
     * Create a detached, initialised EventsStatementsHistoryLongRecord
     */
    public EventsStatementsHistoryLongRecord(com.neurasim.jooq.performance_schema.tables.pojos.EventsStatementsHistoryLong value) {
        super(EventsStatementsHistoryLong.EVENTS_STATEMENTS_HISTORY_LONG);

        if (value != null) {
            setThreadId(value.getThreadId());
            setEventId(value.getEventId());
            setEndEventId(value.getEndEventId());
            setEventName(value.getEventName());
            setSource(value.getSource());
            setTimerStart(value.getTimerStart());
            setTimerEnd(value.getTimerEnd());
            setTimerWait(value.getTimerWait());
            setLockTime(value.getLockTime());
            setSqlText(value.getSqlText());
            setDigest(value.getDigest());
            setDigestText(value.getDigestText());
            setCurrentSchema(value.getCurrentSchema());
            setObjectType(value.getObjectType());
            setObjectSchema(value.getObjectSchema());
            setObjectName(value.getObjectName());
            setObjectInstanceBegin(value.getObjectInstanceBegin());
            setMysqlErrno(value.getMysqlErrno());
            setReturnedSqlstate(value.getReturnedSqlstate());
            setMessageText(value.getMessageText());
            setErrors(value.getErrors());
            setWarnings(value.getWarnings());
            setRowsAffected(value.getRowsAffected());
            setRowsSent(value.getRowsSent());
            setRowsExamined(value.getRowsExamined());
            setCreatedTmpDiskTables(value.getCreatedTmpDiskTables());
            setCreatedTmpTables(value.getCreatedTmpTables());
            setSelectFullJoin(value.getSelectFullJoin());
            setSelectFullRangeJoin(value.getSelectFullRangeJoin());
            setSelectRange(value.getSelectRange());
            setSelectRangeCheck(value.getSelectRangeCheck());
            setSelectScan(value.getSelectScan());
            setSortMergePasses(value.getSortMergePasses());
            setSortRange(value.getSortRange());
            setSortRows(value.getSortRows());
            setSortScan(value.getSortScan());
            setNoIndexUsed(value.getNoIndexUsed());
            setNoGoodIndexUsed(value.getNoGoodIndexUsed());
            setNestingEventId(value.getNestingEventId());
            setNestingEventType(value.getNestingEventType());
            setNestingEventLevel(value.getNestingEventLevel());
            setStatementId(value.getStatementId());
            setCpuTime(value.getCpuTime());
            setMaxControlledMemory(value.getMaxControlledMemory());
            setMaxTotalMemory(value.getMaxTotalMemory());
            setExecutionEngine(value.getExecutionEngine());
        }
    }
}
