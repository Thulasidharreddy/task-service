/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataLocks implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String engine;
    private final String engineLockId;
    private final ULong engineTransactionId;
    private final ULong threadId;
    private final ULong eventId;
    private final String objectSchema;
    private final String objectName;
    private final String partitionName;
    private final String subpartitionName;
    private final String indexName;
    private final ULong objectInstanceBegin;
    private final String lockType;
    private final String lockMode;
    private final String lockStatus;
    private final String lockData;

    public DataLocks(DataLocks value) {
        this.engine = value.engine;
        this.engineLockId = value.engineLockId;
        this.engineTransactionId = value.engineTransactionId;
        this.threadId = value.threadId;
        this.eventId = value.eventId;
        this.objectSchema = value.objectSchema;
        this.objectName = value.objectName;
        this.partitionName = value.partitionName;
        this.subpartitionName = value.subpartitionName;
        this.indexName = value.indexName;
        this.objectInstanceBegin = value.objectInstanceBegin;
        this.lockType = value.lockType;
        this.lockMode = value.lockMode;
        this.lockStatus = value.lockStatus;
        this.lockData = value.lockData;
    }

    public DataLocks(
        String engine,
        String engineLockId,
        ULong engineTransactionId,
        ULong threadId,
        ULong eventId,
        String objectSchema,
        String objectName,
        String partitionName,
        String subpartitionName,
        String indexName,
        ULong objectInstanceBegin,
        String lockType,
        String lockMode,
        String lockStatus,
        String lockData
    ) {
        this.engine = engine;
        this.engineLockId = engineLockId;
        this.engineTransactionId = engineTransactionId;
        this.threadId = threadId;
        this.eventId = eventId;
        this.objectSchema = objectSchema;
        this.objectName = objectName;
        this.partitionName = partitionName;
        this.subpartitionName = subpartitionName;
        this.indexName = indexName;
        this.objectInstanceBegin = objectInstanceBegin;
        this.lockType = lockType;
        this.lockMode = lockMode;
        this.lockStatus = lockStatus;
        this.lockData = lockData;
    }

    /**
     * Getter for <code>performance_schema.data_locks.ENGINE</code>.
     */
    public String getEngine() {
        return this.engine;
    }

    /**
     * Getter for <code>performance_schema.data_locks.ENGINE_LOCK_ID</code>.
     */
    public String getEngineLockId() {
        return this.engineLockId;
    }

    /**
     * Getter for
     * <code>performance_schema.data_locks.ENGINE_TRANSACTION_ID</code>.
     */
    public ULong getEngineTransactionId() {
        return this.engineTransactionId;
    }

    /**
     * Getter for <code>performance_schema.data_locks.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for <code>performance_schema.data_locks.EVENT_ID</code>.
     */
    public ULong getEventId() {
        return this.eventId;
    }

    /**
     * Getter for <code>performance_schema.data_locks.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return this.objectSchema;
    }

    /**
     * Getter for <code>performance_schema.data_locks.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return this.objectName;
    }

    /**
     * Getter for <code>performance_schema.data_locks.PARTITION_NAME</code>.
     */
    public String getPartitionName() {
        return this.partitionName;
    }

    /**
     * Getter for <code>performance_schema.data_locks.SUBPARTITION_NAME</code>.
     */
    public String getSubpartitionName() {
        return this.subpartitionName;
    }

    /**
     * Getter for <code>performance_schema.data_locks.INDEX_NAME</code>.
     */
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Getter for
     * <code>performance_schema.data_locks.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return this.objectInstanceBegin;
    }

    /**
     * Getter for <code>performance_schema.data_locks.LOCK_TYPE</code>.
     */
    public String getLockType() {
        return this.lockType;
    }

    /**
     * Getter for <code>performance_schema.data_locks.LOCK_MODE</code>.
     */
    public String getLockMode() {
        return this.lockMode;
    }

    /**
     * Getter for <code>performance_schema.data_locks.LOCK_STATUS</code>.
     */
    public String getLockStatus() {
        return this.lockStatus;
    }

    /**
     * Getter for <code>performance_schema.data_locks.LOCK_DATA</code>.
     */
    public String getLockData() {
        return this.lockData;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DataLocks other = (DataLocks) obj;
        if (this.engine == null) {
            if (other.engine != null)
                return false;
        }
        else if (!this.engine.equals(other.engine))
            return false;
        if (this.engineLockId == null) {
            if (other.engineLockId != null)
                return false;
        }
        else if (!this.engineLockId.equals(other.engineLockId))
            return false;
        if (this.engineTransactionId == null) {
            if (other.engineTransactionId != null)
                return false;
        }
        else if (!this.engineTransactionId.equals(other.engineTransactionId))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.eventId == null) {
            if (other.eventId != null)
                return false;
        }
        else if (!this.eventId.equals(other.eventId))
            return false;
        if (this.objectSchema == null) {
            if (other.objectSchema != null)
                return false;
        }
        else if (!this.objectSchema.equals(other.objectSchema))
            return false;
        if (this.objectName == null) {
            if (other.objectName != null)
                return false;
        }
        else if (!this.objectName.equals(other.objectName))
            return false;
        if (this.partitionName == null) {
            if (other.partitionName != null)
                return false;
        }
        else if (!this.partitionName.equals(other.partitionName))
            return false;
        if (this.subpartitionName == null) {
            if (other.subpartitionName != null)
                return false;
        }
        else if (!this.subpartitionName.equals(other.subpartitionName))
            return false;
        if (this.indexName == null) {
            if (other.indexName != null)
                return false;
        }
        else if (!this.indexName.equals(other.indexName))
            return false;
        if (this.objectInstanceBegin == null) {
            if (other.objectInstanceBegin != null)
                return false;
        }
        else if (!this.objectInstanceBegin.equals(other.objectInstanceBegin))
            return false;
        if (this.lockType == null) {
            if (other.lockType != null)
                return false;
        }
        else if (!this.lockType.equals(other.lockType))
            return false;
        if (this.lockMode == null) {
            if (other.lockMode != null)
                return false;
        }
        else if (!this.lockMode.equals(other.lockMode))
            return false;
        if (this.lockStatus == null) {
            if (other.lockStatus != null)
                return false;
        }
        else if (!this.lockStatus.equals(other.lockStatus))
            return false;
        if (this.lockData == null) {
            if (other.lockData != null)
                return false;
        }
        else if (!this.lockData.equals(other.lockData))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.engine == null) ? 0 : this.engine.hashCode());
        result = prime * result + ((this.engineLockId == null) ? 0 : this.engineLockId.hashCode());
        result = prime * result + ((this.engineTransactionId == null) ? 0 : this.engineTransactionId.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.eventId == null) ? 0 : this.eventId.hashCode());
        result = prime * result + ((this.objectSchema == null) ? 0 : this.objectSchema.hashCode());
        result = prime * result + ((this.objectName == null) ? 0 : this.objectName.hashCode());
        result = prime * result + ((this.partitionName == null) ? 0 : this.partitionName.hashCode());
        result = prime * result + ((this.subpartitionName == null) ? 0 : this.subpartitionName.hashCode());
        result = prime * result + ((this.indexName == null) ? 0 : this.indexName.hashCode());
        result = prime * result + ((this.objectInstanceBegin == null) ? 0 : this.objectInstanceBegin.hashCode());
        result = prime * result + ((this.lockType == null) ? 0 : this.lockType.hashCode());
        result = prime * result + ((this.lockMode == null) ? 0 : this.lockMode.hashCode());
        result = prime * result + ((this.lockStatus == null) ? 0 : this.lockStatus.hashCode());
        result = prime * result + ((this.lockData == null) ? 0 : this.lockData.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DataLocks (");

        sb.append(engine);
        sb.append(", ").append(engineLockId);
        sb.append(", ").append(engineTransactionId);
        sb.append(", ").append(threadId);
        sb.append(", ").append(eventId);
        sb.append(", ").append(objectSchema);
        sb.append(", ").append(objectName);
        sb.append(", ").append(partitionName);
        sb.append(", ").append(subpartitionName);
        sb.append(", ").append(indexName);
        sb.append(", ").append(objectInstanceBegin);
        sb.append(", ").append(lockType);
        sb.append(", ").append(lockMode);
        sb.append(", ").append(lockStatus);
        sb.append(", ").append(lockData);

        sb.append(")");
        return sb.toString();
    }
}
