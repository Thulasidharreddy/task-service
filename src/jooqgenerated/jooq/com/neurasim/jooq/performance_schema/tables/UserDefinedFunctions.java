/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables;


import com.neurasim.jooq.performance_schema.Keys;
import com.neurasim.jooq.performance_schema.PerformanceSchema;
import com.neurasim.jooq.performance_schema.tables.records.UserDefinedFunctionsRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDefinedFunctions extends TableImpl<UserDefinedFunctionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>performance_schema.user_defined_functions</code>
     */
    public static final UserDefinedFunctions USER_DEFINED_FUNCTIONS = new UserDefinedFunctions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDefinedFunctionsRecord> getRecordType() {
        return UserDefinedFunctionsRecord.class;
    }

    /**
     * The column
     * <code>performance_schema.user_defined_functions.UDF_NAME</code>.
     */
    public final TableField<UserDefinedFunctionsRecord, String> UDF_NAME = createField(DSL.name("UDF_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.user_defined_functions.UDF_RETURN_TYPE</code>.
     */
    public final TableField<UserDefinedFunctionsRecord, String> UDF_RETURN_TYPE = createField(DSL.name("UDF_RETURN_TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.user_defined_functions.UDF_TYPE</code>.
     */
    public final TableField<UserDefinedFunctionsRecord, String> UDF_TYPE = createField(DSL.name("UDF_TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column
     * <code>performance_schema.user_defined_functions.UDF_LIBRARY</code>.
     */
    public final TableField<UserDefinedFunctionsRecord, String> UDF_LIBRARY = createField(DSL.name("UDF_LIBRARY"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column
     * <code>performance_schema.user_defined_functions.UDF_USAGE_COUNT</code>.
     */
    public final TableField<UserDefinedFunctionsRecord, Long> UDF_USAGE_COUNT = createField(DSL.name("UDF_USAGE_COUNT"), SQLDataType.BIGINT, this, "");

    private UserDefinedFunctions(Name alias, Table<UserDefinedFunctionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDefinedFunctions(Name alias, Table<UserDefinedFunctionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.user_defined_functions</code>
     * table reference
     */
    public UserDefinedFunctions(String alias) {
        this(DSL.name(alias), USER_DEFINED_FUNCTIONS);
    }

    /**
     * Create an aliased <code>performance_schema.user_defined_functions</code>
     * table reference
     */
    public UserDefinedFunctions(Name alias) {
        this(alias, USER_DEFINED_FUNCTIONS);
    }

    /**
     * Create a <code>performance_schema.user_defined_functions</code> table
     * reference
     */
    public UserDefinedFunctions() {
        this(DSL.name("user_defined_functions"), null);
    }

    public <O extends Record> UserDefinedFunctions(Table<O> child, ForeignKey<O, UserDefinedFunctionsRecord> key) {
        super(child, key, USER_DEFINED_FUNCTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public UniqueKey<UserDefinedFunctionsRecord> getPrimaryKey() {
        return Keys.KEY_USER_DEFINED_FUNCTIONS_PRIMARY;
    }

    @Override
    public UserDefinedFunctions as(String alias) {
        return new UserDefinedFunctions(DSL.name(alias), this);
    }

    @Override
    public UserDefinedFunctions as(Name alias) {
        return new UserDefinedFunctions(alias, this);
    }

    @Override
    public UserDefinedFunctions as(Table<?> alias) {
        return new UserDefinedFunctions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefinedFunctions rename(String name) {
        return new UserDefinedFunctions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefinedFunctions rename(Name name) {
        return new UserDefinedFunctions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDefinedFunctions rename(Table<?> name) {
        return new UserDefinedFunctions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
