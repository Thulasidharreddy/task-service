/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.BinaryLogTransactionCompressionStatsLogType;

import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BinaryLogTransactionCompressionStats implements Serializable {

    private static final long serialVersionUID = 1L;

    private final BinaryLogTransactionCompressionStatsLogType logType;
    private final String compressionType;
    private final ULong transactionCounter;
    private final ULong compressedBytesCounter;
    private final ULong uncompressedBytesCounter;
    private final Short compressionPercentage;
    private final String firstTransactionId;
    private final ULong firstTransactionCompressedBytes;
    private final ULong firstTransactionUncompressedBytes;
    private final LocalDateTime firstTransactionTimestamp;
    private final String lastTransactionId;
    private final ULong lastTransactionCompressedBytes;
    private final ULong lastTransactionUncompressedBytes;
    private final LocalDateTime lastTransactionTimestamp;

    public BinaryLogTransactionCompressionStats(BinaryLogTransactionCompressionStats value) {
        this.logType = value.logType;
        this.compressionType = value.compressionType;
        this.transactionCounter = value.transactionCounter;
        this.compressedBytesCounter = value.compressedBytesCounter;
        this.uncompressedBytesCounter = value.uncompressedBytesCounter;
        this.compressionPercentage = value.compressionPercentage;
        this.firstTransactionId = value.firstTransactionId;
        this.firstTransactionCompressedBytes = value.firstTransactionCompressedBytes;
        this.firstTransactionUncompressedBytes = value.firstTransactionUncompressedBytes;
        this.firstTransactionTimestamp = value.firstTransactionTimestamp;
        this.lastTransactionId = value.lastTransactionId;
        this.lastTransactionCompressedBytes = value.lastTransactionCompressedBytes;
        this.lastTransactionUncompressedBytes = value.lastTransactionUncompressedBytes;
        this.lastTransactionTimestamp = value.lastTransactionTimestamp;
    }

    public BinaryLogTransactionCompressionStats(
        BinaryLogTransactionCompressionStatsLogType logType,
        String compressionType,
        ULong transactionCounter,
        ULong compressedBytesCounter,
        ULong uncompressedBytesCounter,
        Short compressionPercentage,
        String firstTransactionId,
        ULong firstTransactionCompressedBytes,
        ULong firstTransactionUncompressedBytes,
        LocalDateTime firstTransactionTimestamp,
        String lastTransactionId,
        ULong lastTransactionCompressedBytes,
        ULong lastTransactionUncompressedBytes,
        LocalDateTime lastTransactionTimestamp
    ) {
        this.logType = logType;
        this.compressionType = compressionType;
        this.transactionCounter = transactionCounter;
        this.compressedBytesCounter = compressedBytesCounter;
        this.uncompressedBytesCounter = uncompressedBytesCounter;
        this.compressionPercentage = compressionPercentage;
        this.firstTransactionId = firstTransactionId;
        this.firstTransactionCompressedBytes = firstTransactionCompressedBytes;
        this.firstTransactionUncompressedBytes = firstTransactionUncompressedBytes;
        this.firstTransactionTimestamp = firstTransactionTimestamp;
        this.lastTransactionId = lastTransactionId;
        this.lastTransactionCompressedBytes = lastTransactionCompressedBytes;
        this.lastTransactionUncompressedBytes = lastTransactionUncompressedBytes;
        this.lastTransactionTimestamp = lastTransactionTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.LOG_TYPE</code>.
     * The log type to which the transactions were written.
     */
    public BinaryLogTransactionCompressionStatsLogType getLogType() {
        return this.logType;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.COMPRESSION_TYPE</code>.
     * The transaction compression algorithm used.
     */
    public String getCompressionType() {
        return this.compressionType;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.TRANSACTION_COUNTER</code>.
     * Number of transactions written to the log
     */
    public ULong getTransactionCounter() {
        return this.transactionCounter;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.COMPRESSED_BYTES_COUNTER</code>.
     * The total number of bytes compressed.
     */
    public ULong getCompressedBytesCounter() {
        return this.compressedBytesCounter;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.UNCOMPRESSED_BYTES_COUNTER</code>.
     * The total number of bytes uncompressed.
     */
    public ULong getUncompressedBytesCounter() {
        return this.uncompressedBytesCounter;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.COMPRESSION_PERCENTAGE</code>.
     * The compression ratio as a percentage.
     */
    public Short getCompressionPercentage() {
        return this.compressionPercentage;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.FIRST_TRANSACTION_ID</code>.
     * The first transaction written.
     */
    public String getFirstTransactionId() {
        return this.firstTransactionId;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.FIRST_TRANSACTION_COMPRESSED_BYTES</code>.
     * First transaction written compressed bytes.
     */
    public ULong getFirstTransactionCompressedBytes() {
        return this.firstTransactionCompressedBytes;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.FIRST_TRANSACTION_UNCOMPRESSED_BYTES</code>.
     * First transaction written uncompressed bytes.
     */
    public ULong getFirstTransactionUncompressedBytes() {
        return this.firstTransactionUncompressedBytes;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.FIRST_TRANSACTION_TIMESTAMP</code>.
     * When the first transaction was written.
     */
    public LocalDateTime getFirstTransactionTimestamp() {
        return this.firstTransactionTimestamp;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.LAST_TRANSACTION_ID</code>.
     * The last transaction written.
     */
    public String getLastTransactionId() {
        return this.lastTransactionId;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.LAST_TRANSACTION_COMPRESSED_BYTES</code>.
     * Last transaction written compressed bytes.
     */
    public ULong getLastTransactionCompressedBytes() {
        return this.lastTransactionCompressedBytes;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.LAST_TRANSACTION_UNCOMPRESSED_BYTES</code>.
     * Last transaction written uncompressed bytes.
     */
    public ULong getLastTransactionUncompressedBytes() {
        return this.lastTransactionUncompressedBytes;
    }

    /**
     * Getter for
     * <code>performance_schema.binary_log_transaction_compression_stats.LAST_TRANSACTION_TIMESTAMP</code>.
     * When the last transaction was written.
     */
    public LocalDateTime getLastTransactionTimestamp() {
        return this.lastTransactionTimestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final BinaryLogTransactionCompressionStats other = (BinaryLogTransactionCompressionStats) obj;
        if (this.logType == null) {
            if (other.logType != null)
                return false;
        }
        else if (!this.logType.equals(other.logType))
            return false;
        if (this.compressionType == null) {
            if (other.compressionType != null)
                return false;
        }
        else if (!this.compressionType.equals(other.compressionType))
            return false;
        if (this.transactionCounter == null) {
            if (other.transactionCounter != null)
                return false;
        }
        else if (!this.transactionCounter.equals(other.transactionCounter))
            return false;
        if (this.compressedBytesCounter == null) {
            if (other.compressedBytesCounter != null)
                return false;
        }
        else if (!this.compressedBytesCounter.equals(other.compressedBytesCounter))
            return false;
        if (this.uncompressedBytesCounter == null) {
            if (other.uncompressedBytesCounter != null)
                return false;
        }
        else if (!this.uncompressedBytesCounter.equals(other.uncompressedBytesCounter))
            return false;
        if (this.compressionPercentage == null) {
            if (other.compressionPercentage != null)
                return false;
        }
        else if (!this.compressionPercentage.equals(other.compressionPercentage))
            return false;
        if (this.firstTransactionId == null) {
            if (other.firstTransactionId != null)
                return false;
        }
        else if (!this.firstTransactionId.equals(other.firstTransactionId))
            return false;
        if (this.firstTransactionCompressedBytes == null) {
            if (other.firstTransactionCompressedBytes != null)
                return false;
        }
        else if (!this.firstTransactionCompressedBytes.equals(other.firstTransactionCompressedBytes))
            return false;
        if (this.firstTransactionUncompressedBytes == null) {
            if (other.firstTransactionUncompressedBytes != null)
                return false;
        }
        else if (!this.firstTransactionUncompressedBytes.equals(other.firstTransactionUncompressedBytes))
            return false;
        if (this.firstTransactionTimestamp == null) {
            if (other.firstTransactionTimestamp != null)
                return false;
        }
        else if (!this.firstTransactionTimestamp.equals(other.firstTransactionTimestamp))
            return false;
        if (this.lastTransactionId == null) {
            if (other.lastTransactionId != null)
                return false;
        }
        else if (!this.lastTransactionId.equals(other.lastTransactionId))
            return false;
        if (this.lastTransactionCompressedBytes == null) {
            if (other.lastTransactionCompressedBytes != null)
                return false;
        }
        else if (!this.lastTransactionCompressedBytes.equals(other.lastTransactionCompressedBytes))
            return false;
        if (this.lastTransactionUncompressedBytes == null) {
            if (other.lastTransactionUncompressedBytes != null)
                return false;
        }
        else if (!this.lastTransactionUncompressedBytes.equals(other.lastTransactionUncompressedBytes))
            return false;
        if (this.lastTransactionTimestamp == null) {
            if (other.lastTransactionTimestamp != null)
                return false;
        }
        else if (!this.lastTransactionTimestamp.equals(other.lastTransactionTimestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.logType == null) ? 0 : this.logType.hashCode());
        result = prime * result + ((this.compressionType == null) ? 0 : this.compressionType.hashCode());
        result = prime * result + ((this.transactionCounter == null) ? 0 : this.transactionCounter.hashCode());
        result = prime * result + ((this.compressedBytesCounter == null) ? 0 : this.compressedBytesCounter.hashCode());
        result = prime * result + ((this.uncompressedBytesCounter == null) ? 0 : this.uncompressedBytesCounter.hashCode());
        result = prime * result + ((this.compressionPercentage == null) ? 0 : this.compressionPercentage.hashCode());
        result = prime * result + ((this.firstTransactionId == null) ? 0 : this.firstTransactionId.hashCode());
        result = prime * result + ((this.firstTransactionCompressedBytes == null) ? 0 : this.firstTransactionCompressedBytes.hashCode());
        result = prime * result + ((this.firstTransactionUncompressedBytes == null) ? 0 : this.firstTransactionUncompressedBytes.hashCode());
        result = prime * result + ((this.firstTransactionTimestamp == null) ? 0 : this.firstTransactionTimestamp.hashCode());
        result = prime * result + ((this.lastTransactionId == null) ? 0 : this.lastTransactionId.hashCode());
        result = prime * result + ((this.lastTransactionCompressedBytes == null) ? 0 : this.lastTransactionCompressedBytes.hashCode());
        result = prime * result + ((this.lastTransactionUncompressedBytes == null) ? 0 : this.lastTransactionUncompressedBytes.hashCode());
        result = prime * result + ((this.lastTransactionTimestamp == null) ? 0 : this.lastTransactionTimestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("BinaryLogTransactionCompressionStats (");

        sb.append(logType);
        sb.append(", ").append(compressionType);
        sb.append(", ").append(transactionCounter);
        sb.append(", ").append(compressedBytesCounter);
        sb.append(", ").append(uncompressedBytesCounter);
        sb.append(", ").append(compressionPercentage);
        sb.append(", ").append(firstTransactionId);
        sb.append(", ").append(firstTransactionCompressedBytes);
        sb.append(", ").append(firstTransactionUncompressedBytes);
        sb.append(", ").append(firstTransactionTimestamp);
        sb.append(", ").append(lastTransactionId);
        sb.append(", ").append(lastTransactionCompressedBytes);
        sb.append(", ").append(lastTransactionUncompressedBytes);
        sb.append(", ").append(lastTransactionTimestamp);

        sb.append(")");
        return sb.toString();
    }
}
