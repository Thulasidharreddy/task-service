/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.enums.ReplicationApplierStatusByWorkerServiceState;
import com.neurasim.jooq.performance_schema.tables.ReplicationApplierStatusByWorker;

import java.time.LocalDateTime;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationApplierStatusByWorkerRecord extends UpdatableRecordImpl<ReplicationApplierStatusByWorkerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.CHANNEL_NAME</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setChannelName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.CHANNEL_NAME</code>.
     */
    public String getChannelName() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.WORKER_ID</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setWorkerId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.WORKER_ID</code>.
     */
    public ULong getWorkerId() {
        return (ULong) get(1);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.THREAD_ID</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setThreadId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(2);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.SERVICE_STATE</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setServiceState(ReplicationApplierStatusByWorkerServiceState value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.SERVICE_STATE</code>.
     */
    public ReplicationApplierStatusByWorkerServiceState getServiceState() {
        return (ReplicationApplierStatusByWorkerServiceState) get(3);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_NUMBER</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastErrorNumber(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_NUMBER</code>.
     */
    public Integer getLastErrorNumber() {
        return (Integer) get(4);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_MESSAGE</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastErrorMessage(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_MESSAGE</code>.
     */
    public String getLastErrorMessage() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastErrorTimestamp(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_ERROR_TIMESTAMP</code>.
     */
    public LocalDateTime getLastErrorTimestamp() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransaction(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION</code>.
     */
    public String getLastAppliedTransaction() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionOriginalCommitTimestamp(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastAppliedTransactionOriginalCommitTimestamp() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionImmediateCommitTimestamp(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getLastAppliedTransactionImmediateCommitTimestamp() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionStartApplyTimestamp(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    public LocalDateTime getLastAppliedTransactionStartApplyTimestamp() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionEndApplyTimestamp(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP</code>.
     */
    public LocalDateTime getLastAppliedTransactionEndApplyTimestamp() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransaction(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION</code>.
     */
    public String getApplyingTransaction() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionOriginalCommitTimestamp(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getApplyingTransactionOriginalCommitTimestamp() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionImmediateCommitTimestamp(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP</code>.
     */
    public LocalDateTime getApplyingTransactionImmediateCommitTimestamp() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionStartApplyTimestamp(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_START_APPLY_TIMESTAMP</code>.
     */
    public LocalDateTime getApplyingTransactionStartApplyTimestamp() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_RETRIES_COUNT</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionRetriesCount(ULong value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_RETRIES_COUNT</code>.
     */
    public ULong getLastAppliedTransactionRetriesCount() {
        return (ULong) get(16);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionLastTransientErrorNumber(Integer value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    public Integer getLastAppliedTransactionLastTransientErrorNumber() {
        return (Integer) get(17);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionLastTransientErrorMessage(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    public String getLastAppliedTransactionLastTransientErrorMessage() {
        return (String) get(18);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setLastAppliedTransactionLastTransientErrorTimestamp(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    public LocalDateTime getLastAppliedTransactionLastTransientErrorTimestamp() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_RETRIES_COUNT</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionRetriesCount(ULong value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_RETRIES_COUNT</code>.
     */
    public ULong getApplyingTransactionRetriesCount() {
        return (ULong) get(20);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionLastTransientErrorNumber(Integer value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER</code>.
     */
    public Integer getApplyingTransactionLastTransientErrorNumber() {
        return (Integer) get(21);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionLastTransientErrorMessage(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE</code>.
     */
    public String getApplyingTransactionLastTransientErrorMessage() {
        return (String) get(22);
    }

    /**
     * Setter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    public ReplicationApplierStatusByWorkerRecord setApplyingTransactionLastTransientErrorTimestamp(LocalDateTime value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.replication_applier_status_by_worker.APPLYING_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP</code>.
     */
    public LocalDateTime getApplyingTransactionLastTransientErrorTimestamp() {
        return (LocalDateTime) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, ULong> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReplicationApplierStatusByWorkerRecord
     */
    public ReplicationApplierStatusByWorkerRecord() {
        super(ReplicationApplierStatusByWorker.REPLICATION_APPLIER_STATUS_BY_WORKER);
    }

    /**
     * Create a detached, initialised ReplicationApplierStatusByWorkerRecord
     */
    public ReplicationApplierStatusByWorkerRecord(String channelName, ULong workerId, ULong threadId, ReplicationApplierStatusByWorkerServiceState serviceState, Integer lastErrorNumber, String lastErrorMessage, LocalDateTime lastErrorTimestamp, String lastAppliedTransaction, LocalDateTime lastAppliedTransactionOriginalCommitTimestamp, LocalDateTime lastAppliedTransactionImmediateCommitTimestamp, LocalDateTime lastAppliedTransactionStartApplyTimestamp, LocalDateTime lastAppliedTransactionEndApplyTimestamp, String applyingTransaction, LocalDateTime applyingTransactionOriginalCommitTimestamp, LocalDateTime applyingTransactionImmediateCommitTimestamp, LocalDateTime applyingTransactionStartApplyTimestamp, ULong lastAppliedTransactionRetriesCount, Integer lastAppliedTransactionLastTransientErrorNumber, String lastAppliedTransactionLastTransientErrorMessage, LocalDateTime lastAppliedTransactionLastTransientErrorTimestamp, ULong applyingTransactionRetriesCount, Integer applyingTransactionLastTransientErrorNumber, String applyingTransactionLastTransientErrorMessage, LocalDateTime applyingTransactionLastTransientErrorTimestamp) {
        super(ReplicationApplierStatusByWorker.REPLICATION_APPLIER_STATUS_BY_WORKER);

        setChannelName(channelName);
        setWorkerId(workerId);
        setThreadId(threadId);
        setServiceState(serviceState);
        setLastErrorNumber(lastErrorNumber);
        setLastErrorMessage(lastErrorMessage);
        setLastErrorTimestamp(lastErrorTimestamp);
        setLastAppliedTransaction(lastAppliedTransaction);
        setLastAppliedTransactionOriginalCommitTimestamp(lastAppliedTransactionOriginalCommitTimestamp);
        setLastAppliedTransactionImmediateCommitTimestamp(lastAppliedTransactionImmediateCommitTimestamp);
        setLastAppliedTransactionStartApplyTimestamp(lastAppliedTransactionStartApplyTimestamp);
        setLastAppliedTransactionEndApplyTimestamp(lastAppliedTransactionEndApplyTimestamp);
        setApplyingTransaction(applyingTransaction);
        setApplyingTransactionOriginalCommitTimestamp(applyingTransactionOriginalCommitTimestamp);
        setApplyingTransactionImmediateCommitTimestamp(applyingTransactionImmediateCommitTimestamp);
        setApplyingTransactionStartApplyTimestamp(applyingTransactionStartApplyTimestamp);
        setLastAppliedTransactionRetriesCount(lastAppliedTransactionRetriesCount);
        setLastAppliedTransactionLastTransientErrorNumber(lastAppliedTransactionLastTransientErrorNumber);
        setLastAppliedTransactionLastTransientErrorMessage(lastAppliedTransactionLastTransientErrorMessage);
        setLastAppliedTransactionLastTransientErrorTimestamp(lastAppliedTransactionLastTransientErrorTimestamp);
        setApplyingTransactionRetriesCount(applyingTransactionRetriesCount);
        setApplyingTransactionLastTransientErrorNumber(applyingTransactionLastTransientErrorNumber);
        setApplyingTransactionLastTransientErrorMessage(applyingTransactionLastTransientErrorMessage);
        setApplyingTransactionLastTransientErrorTimestamp(applyingTransactionLastTransientErrorTimestamp);
    }

    /**
     * Create a detached, initialised ReplicationApplierStatusByWorkerRecord
     */
    public ReplicationApplierStatusByWorkerRecord(com.neurasim.jooq.performance_schema.tables.pojos.ReplicationApplierStatusByWorker value) {
        super(ReplicationApplierStatusByWorker.REPLICATION_APPLIER_STATUS_BY_WORKER);

        if (value != null) {
            setChannelName(value.getChannelName());
            setWorkerId(value.getWorkerId());
            setThreadId(value.getThreadId());
            setServiceState(value.getServiceState());
            setLastErrorNumber(value.getLastErrorNumber());
            setLastErrorMessage(value.getLastErrorMessage());
            setLastErrorTimestamp(value.getLastErrorTimestamp());
            setLastAppliedTransaction(value.getLastAppliedTransaction());
            setLastAppliedTransactionOriginalCommitTimestamp(value.getLastAppliedTransactionOriginalCommitTimestamp());
            setLastAppliedTransactionImmediateCommitTimestamp(value.getLastAppliedTransactionImmediateCommitTimestamp());
            setLastAppliedTransactionStartApplyTimestamp(value.getLastAppliedTransactionStartApplyTimestamp());
            setLastAppliedTransactionEndApplyTimestamp(value.getLastAppliedTransactionEndApplyTimestamp());
            setApplyingTransaction(value.getApplyingTransaction());
            setApplyingTransactionOriginalCommitTimestamp(value.getApplyingTransactionOriginalCommitTimestamp());
            setApplyingTransactionImmediateCommitTimestamp(value.getApplyingTransactionImmediateCommitTimestamp());
            setApplyingTransactionStartApplyTimestamp(value.getApplyingTransactionStartApplyTimestamp());
            setLastAppliedTransactionRetriesCount(value.getLastAppliedTransactionRetriesCount());
            setLastAppliedTransactionLastTransientErrorNumber(value.getLastAppliedTransactionLastTransientErrorNumber());
            setLastAppliedTransactionLastTransientErrorMessage(value.getLastAppliedTransactionLastTransientErrorMessage());
            setLastAppliedTransactionLastTransientErrorTimestamp(value.getLastAppliedTransactionLastTransientErrorTimestamp());
            setApplyingTransactionRetriesCount(value.getApplyingTransactionRetriesCount());
            setApplyingTransactionLastTransientErrorNumber(value.getApplyingTransactionLastTransientErrorNumber());
            setApplyingTransactionLastTransientErrorMessage(value.getApplyingTransactionLastTransientErrorMessage());
            setApplyingTransactionLastTransientErrorTimestamp(value.getApplyingTransactionLastTransientErrorTimestamp());
        }
    }
}
