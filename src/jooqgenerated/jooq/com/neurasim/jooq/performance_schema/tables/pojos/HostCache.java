/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.HostCacheHostValidated;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostCache implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String ip;
    private final String host;
    private final HostCacheHostValidated hostValidated;
    private final Long sumConnectErrors;
    private final Long countHostBlockedErrors;
    private final Long countNameinfoTransientErrors;
    private final Long countNameinfoPermanentErrors;
    private final Long countFormatErrors;
    private final Long countAddrinfoTransientErrors;
    private final Long countAddrinfoPermanentErrors;
    private final Long countFcrdnsErrors;
    private final Long countHostAclErrors;
    private final Long countNoAuthPluginErrors;
    private final Long countAuthPluginErrors;
    private final Long countHandshakeErrors;
    private final Long countProxyUserErrors;
    private final Long countProxyUserAclErrors;
    private final Long countAuthenticationErrors;
    private final Long countSslErrors;
    private final Long countMaxUserConnectionsErrors;
    private final Long countMaxUserConnectionsPerHourErrors;
    private final Long countDefaultDatabaseErrors;
    private final Long countInitConnectErrors;
    private final Long countLocalErrors;
    private final Long countUnknownErrors;
    private final LocalDateTime firstSeen;
    private final LocalDateTime lastSeen;
    private final LocalDateTime firstErrorSeen;
    private final LocalDateTime lastErrorSeen;

    public HostCache(HostCache value) {
        this.ip = value.ip;
        this.host = value.host;
        this.hostValidated = value.hostValidated;
        this.sumConnectErrors = value.sumConnectErrors;
        this.countHostBlockedErrors = value.countHostBlockedErrors;
        this.countNameinfoTransientErrors = value.countNameinfoTransientErrors;
        this.countNameinfoPermanentErrors = value.countNameinfoPermanentErrors;
        this.countFormatErrors = value.countFormatErrors;
        this.countAddrinfoTransientErrors = value.countAddrinfoTransientErrors;
        this.countAddrinfoPermanentErrors = value.countAddrinfoPermanentErrors;
        this.countFcrdnsErrors = value.countFcrdnsErrors;
        this.countHostAclErrors = value.countHostAclErrors;
        this.countNoAuthPluginErrors = value.countNoAuthPluginErrors;
        this.countAuthPluginErrors = value.countAuthPluginErrors;
        this.countHandshakeErrors = value.countHandshakeErrors;
        this.countProxyUserErrors = value.countProxyUserErrors;
        this.countProxyUserAclErrors = value.countProxyUserAclErrors;
        this.countAuthenticationErrors = value.countAuthenticationErrors;
        this.countSslErrors = value.countSslErrors;
        this.countMaxUserConnectionsErrors = value.countMaxUserConnectionsErrors;
        this.countMaxUserConnectionsPerHourErrors = value.countMaxUserConnectionsPerHourErrors;
        this.countDefaultDatabaseErrors = value.countDefaultDatabaseErrors;
        this.countInitConnectErrors = value.countInitConnectErrors;
        this.countLocalErrors = value.countLocalErrors;
        this.countUnknownErrors = value.countUnknownErrors;
        this.firstSeen = value.firstSeen;
        this.lastSeen = value.lastSeen;
        this.firstErrorSeen = value.firstErrorSeen;
        this.lastErrorSeen = value.lastErrorSeen;
    }

    public HostCache(
        String ip,
        String host,
        HostCacheHostValidated hostValidated,
        Long sumConnectErrors,
        Long countHostBlockedErrors,
        Long countNameinfoTransientErrors,
        Long countNameinfoPermanentErrors,
        Long countFormatErrors,
        Long countAddrinfoTransientErrors,
        Long countAddrinfoPermanentErrors,
        Long countFcrdnsErrors,
        Long countHostAclErrors,
        Long countNoAuthPluginErrors,
        Long countAuthPluginErrors,
        Long countHandshakeErrors,
        Long countProxyUserErrors,
        Long countProxyUserAclErrors,
        Long countAuthenticationErrors,
        Long countSslErrors,
        Long countMaxUserConnectionsErrors,
        Long countMaxUserConnectionsPerHourErrors,
        Long countDefaultDatabaseErrors,
        Long countInitConnectErrors,
        Long countLocalErrors,
        Long countUnknownErrors,
        LocalDateTime firstSeen,
        LocalDateTime lastSeen,
        LocalDateTime firstErrorSeen,
        LocalDateTime lastErrorSeen
    ) {
        this.ip = ip;
        this.host = host;
        this.hostValidated = hostValidated;
        this.sumConnectErrors = sumConnectErrors;
        this.countHostBlockedErrors = countHostBlockedErrors;
        this.countNameinfoTransientErrors = countNameinfoTransientErrors;
        this.countNameinfoPermanentErrors = countNameinfoPermanentErrors;
        this.countFormatErrors = countFormatErrors;
        this.countAddrinfoTransientErrors = countAddrinfoTransientErrors;
        this.countAddrinfoPermanentErrors = countAddrinfoPermanentErrors;
        this.countFcrdnsErrors = countFcrdnsErrors;
        this.countHostAclErrors = countHostAclErrors;
        this.countNoAuthPluginErrors = countNoAuthPluginErrors;
        this.countAuthPluginErrors = countAuthPluginErrors;
        this.countHandshakeErrors = countHandshakeErrors;
        this.countProxyUserErrors = countProxyUserErrors;
        this.countProxyUserAclErrors = countProxyUserAclErrors;
        this.countAuthenticationErrors = countAuthenticationErrors;
        this.countSslErrors = countSslErrors;
        this.countMaxUserConnectionsErrors = countMaxUserConnectionsErrors;
        this.countMaxUserConnectionsPerHourErrors = countMaxUserConnectionsPerHourErrors;
        this.countDefaultDatabaseErrors = countDefaultDatabaseErrors;
        this.countInitConnectErrors = countInitConnectErrors;
        this.countLocalErrors = countLocalErrors;
        this.countUnknownErrors = countUnknownErrors;
        this.firstSeen = firstSeen;
        this.lastSeen = lastSeen;
        this.firstErrorSeen = firstErrorSeen;
        this.lastErrorSeen = lastErrorSeen;
    }

    /**
     * Getter for <code>performance_schema.host_cache.IP</code>.
     */
    public String getIp() {
        return this.ip;
    }

    /**
     * Getter for <code>performance_schema.host_cache.HOST</code>.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Getter for <code>performance_schema.host_cache.HOST_VALIDATED</code>.
     */
    public HostCacheHostValidated getHostValidated() {
        return this.hostValidated;
    }

    /**
     * Getter for <code>performance_schema.host_cache.SUM_CONNECT_ERRORS</code>.
     */
    public Long getSumConnectErrors() {
        return this.sumConnectErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HOST_BLOCKED_ERRORS</code>.
     */
    public Long getCountHostBlockedErrors() {
        return this.countHostBlockedErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_TRANSIENT_ERRORS</code>.
     */
    public Long getCountNameinfoTransientErrors() {
        return this.countNameinfoTransientErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NAMEINFO_PERMANENT_ERRORS</code>.
     */
    public Long getCountNameinfoPermanentErrors() {
        return this.countNameinfoPermanentErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_FORMAT_ERRORS</code>.
     */
    public Long getCountFormatErrors() {
        return this.countFormatErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_TRANSIENT_ERRORS</code>.
     */
    public Long getCountAddrinfoTransientErrors() {
        return this.countAddrinfoTransientErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_ADDRINFO_PERMANENT_ERRORS</code>.
     */
    public Long getCountAddrinfoPermanentErrors() {
        return this.countAddrinfoPermanentErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_FCRDNS_ERRORS</code>.
     */
    public Long getCountFcrdnsErrors() {
        return this.countFcrdnsErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HOST_ACL_ERRORS</code>.
     */
    public Long getCountHostAclErrors() {
        return this.countHostAclErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_NO_AUTH_PLUGIN_ERRORS</code>.
     */
    public Long getCountNoAuthPluginErrors() {
        return this.countNoAuthPluginErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_AUTH_PLUGIN_ERRORS</code>.
     */
    public Long getCountAuthPluginErrors() {
        return this.countAuthPluginErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_HANDSHAKE_ERRORS</code>.
     */
    public Long getCountHandshakeErrors() {
        return this.countHandshakeErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ERRORS</code>.
     */
    public Long getCountProxyUserErrors() {
        return this.countProxyUserErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_PROXY_USER_ACL_ERRORS</code>.
     */
    public Long getCountProxyUserAclErrors() {
        return this.countProxyUserAclErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_AUTHENTICATION_ERRORS</code>.
     */
    public Long getCountAuthenticationErrors() {
        return this.countAuthenticationErrors;
    }

    /**
     * Getter for <code>performance_schema.host_cache.COUNT_SSL_ERRORS</code>.
     */
    public Long getCountSslErrors() {
        return this.countSslErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_ERRORS</code>.
     */
    public Long getCountMaxUserConnectionsErrors() {
        return this.countMaxUserConnectionsErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_MAX_USER_CONNECTIONS_PER_HOUR_ERRORS</code>.
     */
    public Long getCountMaxUserConnectionsPerHourErrors() {
        return this.countMaxUserConnectionsPerHourErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_DEFAULT_DATABASE_ERRORS</code>.
     */
    public Long getCountDefaultDatabaseErrors() {
        return this.countDefaultDatabaseErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_INIT_CONNECT_ERRORS</code>.
     */
    public Long getCountInitConnectErrors() {
        return this.countInitConnectErrors;
    }

    /**
     * Getter for <code>performance_schema.host_cache.COUNT_LOCAL_ERRORS</code>.
     */
    public Long getCountLocalErrors() {
        return this.countLocalErrors;
    }

    /**
     * Getter for
     * <code>performance_schema.host_cache.COUNT_UNKNOWN_ERRORS</code>.
     */
    public Long getCountUnknownErrors() {
        return this.countUnknownErrors;
    }

    /**
     * Getter for <code>performance_schema.host_cache.FIRST_SEEN</code>.
     */
    public LocalDateTime getFirstSeen() {
        return this.firstSeen;
    }

    /**
     * Getter for <code>performance_schema.host_cache.LAST_SEEN</code>.
     */
    public LocalDateTime getLastSeen() {
        return this.lastSeen;
    }

    /**
     * Getter for <code>performance_schema.host_cache.FIRST_ERROR_SEEN</code>.
     */
    public LocalDateTime getFirstErrorSeen() {
        return this.firstErrorSeen;
    }

    /**
     * Getter for <code>performance_schema.host_cache.LAST_ERROR_SEEN</code>.
     */
    public LocalDateTime getLastErrorSeen() {
        return this.lastErrorSeen;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final HostCache other = (HostCache) obj;
        if (this.ip == null) {
            if (other.ip != null)
                return false;
        }
        else if (!this.ip.equals(other.ip))
            return false;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.hostValidated == null) {
            if (other.hostValidated != null)
                return false;
        }
        else if (!this.hostValidated.equals(other.hostValidated))
            return false;
        if (this.sumConnectErrors == null) {
            if (other.sumConnectErrors != null)
                return false;
        }
        else if (!this.sumConnectErrors.equals(other.sumConnectErrors))
            return false;
        if (this.countHostBlockedErrors == null) {
            if (other.countHostBlockedErrors != null)
                return false;
        }
        else if (!this.countHostBlockedErrors.equals(other.countHostBlockedErrors))
            return false;
        if (this.countNameinfoTransientErrors == null) {
            if (other.countNameinfoTransientErrors != null)
                return false;
        }
        else if (!this.countNameinfoTransientErrors.equals(other.countNameinfoTransientErrors))
            return false;
        if (this.countNameinfoPermanentErrors == null) {
            if (other.countNameinfoPermanentErrors != null)
                return false;
        }
        else if (!this.countNameinfoPermanentErrors.equals(other.countNameinfoPermanentErrors))
            return false;
        if (this.countFormatErrors == null) {
            if (other.countFormatErrors != null)
                return false;
        }
        else if (!this.countFormatErrors.equals(other.countFormatErrors))
            return false;
        if (this.countAddrinfoTransientErrors == null) {
            if (other.countAddrinfoTransientErrors != null)
                return false;
        }
        else if (!this.countAddrinfoTransientErrors.equals(other.countAddrinfoTransientErrors))
            return false;
        if (this.countAddrinfoPermanentErrors == null) {
            if (other.countAddrinfoPermanentErrors != null)
                return false;
        }
        else if (!this.countAddrinfoPermanentErrors.equals(other.countAddrinfoPermanentErrors))
            return false;
        if (this.countFcrdnsErrors == null) {
            if (other.countFcrdnsErrors != null)
                return false;
        }
        else if (!this.countFcrdnsErrors.equals(other.countFcrdnsErrors))
            return false;
        if (this.countHostAclErrors == null) {
            if (other.countHostAclErrors != null)
                return false;
        }
        else if (!this.countHostAclErrors.equals(other.countHostAclErrors))
            return false;
        if (this.countNoAuthPluginErrors == null) {
            if (other.countNoAuthPluginErrors != null)
                return false;
        }
        else if (!this.countNoAuthPluginErrors.equals(other.countNoAuthPluginErrors))
            return false;
        if (this.countAuthPluginErrors == null) {
            if (other.countAuthPluginErrors != null)
                return false;
        }
        else if (!this.countAuthPluginErrors.equals(other.countAuthPluginErrors))
            return false;
        if (this.countHandshakeErrors == null) {
            if (other.countHandshakeErrors != null)
                return false;
        }
        else if (!this.countHandshakeErrors.equals(other.countHandshakeErrors))
            return false;
        if (this.countProxyUserErrors == null) {
            if (other.countProxyUserErrors != null)
                return false;
        }
        else if (!this.countProxyUserErrors.equals(other.countProxyUserErrors))
            return false;
        if (this.countProxyUserAclErrors == null) {
            if (other.countProxyUserAclErrors != null)
                return false;
        }
        else if (!this.countProxyUserAclErrors.equals(other.countProxyUserAclErrors))
            return false;
        if (this.countAuthenticationErrors == null) {
            if (other.countAuthenticationErrors != null)
                return false;
        }
        else if (!this.countAuthenticationErrors.equals(other.countAuthenticationErrors))
            return false;
        if (this.countSslErrors == null) {
            if (other.countSslErrors != null)
                return false;
        }
        else if (!this.countSslErrors.equals(other.countSslErrors))
            return false;
        if (this.countMaxUserConnectionsErrors == null) {
            if (other.countMaxUserConnectionsErrors != null)
                return false;
        }
        else if (!this.countMaxUserConnectionsErrors.equals(other.countMaxUserConnectionsErrors))
            return false;
        if (this.countMaxUserConnectionsPerHourErrors == null) {
            if (other.countMaxUserConnectionsPerHourErrors != null)
                return false;
        }
        else if (!this.countMaxUserConnectionsPerHourErrors.equals(other.countMaxUserConnectionsPerHourErrors))
            return false;
        if (this.countDefaultDatabaseErrors == null) {
            if (other.countDefaultDatabaseErrors != null)
                return false;
        }
        else if (!this.countDefaultDatabaseErrors.equals(other.countDefaultDatabaseErrors))
            return false;
        if (this.countInitConnectErrors == null) {
            if (other.countInitConnectErrors != null)
                return false;
        }
        else if (!this.countInitConnectErrors.equals(other.countInitConnectErrors))
            return false;
        if (this.countLocalErrors == null) {
            if (other.countLocalErrors != null)
                return false;
        }
        else if (!this.countLocalErrors.equals(other.countLocalErrors))
            return false;
        if (this.countUnknownErrors == null) {
            if (other.countUnknownErrors != null)
                return false;
        }
        else if (!this.countUnknownErrors.equals(other.countUnknownErrors))
            return false;
        if (this.firstSeen == null) {
            if (other.firstSeen != null)
                return false;
        }
        else if (!this.firstSeen.equals(other.firstSeen))
            return false;
        if (this.lastSeen == null) {
            if (other.lastSeen != null)
                return false;
        }
        else if (!this.lastSeen.equals(other.lastSeen))
            return false;
        if (this.firstErrorSeen == null) {
            if (other.firstErrorSeen != null)
                return false;
        }
        else if (!this.firstErrorSeen.equals(other.firstErrorSeen))
            return false;
        if (this.lastErrorSeen == null) {
            if (other.lastErrorSeen != null)
                return false;
        }
        else if (!this.lastErrorSeen.equals(other.lastErrorSeen))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.ip == null) ? 0 : this.ip.hashCode());
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.hostValidated == null) ? 0 : this.hostValidated.hashCode());
        result = prime * result + ((this.sumConnectErrors == null) ? 0 : this.sumConnectErrors.hashCode());
        result = prime * result + ((this.countHostBlockedErrors == null) ? 0 : this.countHostBlockedErrors.hashCode());
        result = prime * result + ((this.countNameinfoTransientErrors == null) ? 0 : this.countNameinfoTransientErrors.hashCode());
        result = prime * result + ((this.countNameinfoPermanentErrors == null) ? 0 : this.countNameinfoPermanentErrors.hashCode());
        result = prime * result + ((this.countFormatErrors == null) ? 0 : this.countFormatErrors.hashCode());
        result = prime * result + ((this.countAddrinfoTransientErrors == null) ? 0 : this.countAddrinfoTransientErrors.hashCode());
        result = prime * result + ((this.countAddrinfoPermanentErrors == null) ? 0 : this.countAddrinfoPermanentErrors.hashCode());
        result = prime * result + ((this.countFcrdnsErrors == null) ? 0 : this.countFcrdnsErrors.hashCode());
        result = prime * result + ((this.countHostAclErrors == null) ? 0 : this.countHostAclErrors.hashCode());
        result = prime * result + ((this.countNoAuthPluginErrors == null) ? 0 : this.countNoAuthPluginErrors.hashCode());
        result = prime * result + ((this.countAuthPluginErrors == null) ? 0 : this.countAuthPluginErrors.hashCode());
        result = prime * result + ((this.countHandshakeErrors == null) ? 0 : this.countHandshakeErrors.hashCode());
        result = prime * result + ((this.countProxyUserErrors == null) ? 0 : this.countProxyUserErrors.hashCode());
        result = prime * result + ((this.countProxyUserAclErrors == null) ? 0 : this.countProxyUserAclErrors.hashCode());
        result = prime * result + ((this.countAuthenticationErrors == null) ? 0 : this.countAuthenticationErrors.hashCode());
        result = prime * result + ((this.countSslErrors == null) ? 0 : this.countSslErrors.hashCode());
        result = prime * result + ((this.countMaxUserConnectionsErrors == null) ? 0 : this.countMaxUserConnectionsErrors.hashCode());
        result = prime * result + ((this.countMaxUserConnectionsPerHourErrors == null) ? 0 : this.countMaxUserConnectionsPerHourErrors.hashCode());
        result = prime * result + ((this.countDefaultDatabaseErrors == null) ? 0 : this.countDefaultDatabaseErrors.hashCode());
        result = prime * result + ((this.countInitConnectErrors == null) ? 0 : this.countInitConnectErrors.hashCode());
        result = prime * result + ((this.countLocalErrors == null) ? 0 : this.countLocalErrors.hashCode());
        result = prime * result + ((this.countUnknownErrors == null) ? 0 : this.countUnknownErrors.hashCode());
        result = prime * result + ((this.firstSeen == null) ? 0 : this.firstSeen.hashCode());
        result = prime * result + ((this.lastSeen == null) ? 0 : this.lastSeen.hashCode());
        result = prime * result + ((this.firstErrorSeen == null) ? 0 : this.firstErrorSeen.hashCode());
        result = prime * result + ((this.lastErrorSeen == null) ? 0 : this.lastErrorSeen.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("HostCache (");

        sb.append(ip);
        sb.append(", ").append(host);
        sb.append(", ").append(hostValidated);
        sb.append(", ").append(sumConnectErrors);
        sb.append(", ").append(countHostBlockedErrors);
        sb.append(", ").append(countNameinfoTransientErrors);
        sb.append(", ").append(countNameinfoPermanentErrors);
        sb.append(", ").append(countFormatErrors);
        sb.append(", ").append(countAddrinfoTransientErrors);
        sb.append(", ").append(countAddrinfoPermanentErrors);
        sb.append(", ").append(countFcrdnsErrors);
        sb.append(", ").append(countHostAclErrors);
        sb.append(", ").append(countNoAuthPluginErrors);
        sb.append(", ").append(countAuthPluginErrors);
        sb.append(", ").append(countHandshakeErrors);
        sb.append(", ").append(countProxyUserErrors);
        sb.append(", ").append(countProxyUserAclErrors);
        sb.append(", ").append(countAuthenticationErrors);
        sb.append(", ").append(countSslErrors);
        sb.append(", ").append(countMaxUserConnectionsErrors);
        sb.append(", ").append(countMaxUserConnectionsPerHourErrors);
        sb.append(", ").append(countDefaultDatabaseErrors);
        sb.append(", ").append(countInitConnectErrors);
        sb.append(", ").append(countLocalErrors);
        sb.append(", ").append(countUnknownErrors);
        sb.append(", ").append(firstSeen);
        sb.append(", ").append(lastSeen);
        sb.append(", ").append(firstErrorSeen);
        sb.append(", ").append(lastErrorSeen);

        sb.append(")");
        return sb.toString();
    }
}
