/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.SocketInstancesState;

import java.io.Serializable;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SocketInstances implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String eventName;
    private final ULong objectInstanceBegin;
    private final ULong threadId;
    private final Integer socketId;
    private final String ip;
    private final Integer port;
    private final SocketInstancesState state;

    public SocketInstances(SocketInstances value) {
        this.eventName = value.eventName;
        this.objectInstanceBegin = value.objectInstanceBegin;
        this.threadId = value.threadId;
        this.socketId = value.socketId;
        this.ip = value.ip;
        this.port = value.port;
        this.state = value.state;
    }

    public SocketInstances(
        String eventName,
        ULong objectInstanceBegin,
        ULong threadId,
        Integer socketId,
        String ip,
        Integer port,
        SocketInstancesState state
    ) {
        this.eventName = eventName;
        this.objectInstanceBegin = objectInstanceBegin;
        this.threadId = threadId;
        this.socketId = socketId;
        this.ip = ip;
        this.port = port;
        this.state = state;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.EVENT_NAME</code>.
     */
    public String getEventName() {
        return this.eventName;
    }

    /**
     * Getter for
     * <code>performance_schema.socket_instances.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return this.objectInstanceBegin;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.SOCKET_ID</code>.
     */
    public Integer getSocketId() {
        return this.socketId;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.IP</code>.
     */
    public String getIp() {
        return this.ip;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.PORT</code>.
     */
    public Integer getPort() {
        return this.port;
    }

    /**
     * Getter for <code>performance_schema.socket_instances.STATE</code>.
     */
    public SocketInstancesState getState() {
        return this.state;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SocketInstances other = (SocketInstances) obj;
        if (this.eventName == null) {
            if (other.eventName != null)
                return false;
        }
        else if (!this.eventName.equals(other.eventName))
            return false;
        if (this.objectInstanceBegin == null) {
            if (other.objectInstanceBegin != null)
                return false;
        }
        else if (!this.objectInstanceBegin.equals(other.objectInstanceBegin))
            return false;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.socketId == null) {
            if (other.socketId != null)
                return false;
        }
        else if (!this.socketId.equals(other.socketId))
            return false;
        if (this.ip == null) {
            if (other.ip != null)
                return false;
        }
        else if (!this.ip.equals(other.ip))
            return false;
        if (this.port == null) {
            if (other.port != null)
                return false;
        }
        else if (!this.port.equals(other.port))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.eventName == null) ? 0 : this.eventName.hashCode());
        result = prime * result + ((this.objectInstanceBegin == null) ? 0 : this.objectInstanceBegin.hashCode());
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.socketId == null) ? 0 : this.socketId.hashCode());
        result = prime * result + ((this.ip == null) ? 0 : this.ip.hashCode());
        result = prime * result + ((this.port == null) ? 0 : this.port.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SocketInstances (");

        sb.append(eventName);
        sb.append(", ").append(objectInstanceBegin);
        sb.append(", ").append(threadId);
        sb.append(", ").append(socketId);
        sb.append(", ").append(ip);
        sb.append(", ").append(port);
        sb.append(", ").append(state);

        sb.append(")");
        return sb.toString();
    }
}
