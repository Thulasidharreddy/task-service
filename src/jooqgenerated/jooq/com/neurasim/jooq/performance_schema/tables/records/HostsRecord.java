/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.records;


import com.neurasim.jooq.performance_schema.tables.Hosts;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostsRecord extends TableRecordImpl<HostsRecord> implements Record5<String, Long, Long, ULong, ULong> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>performance_schema.hosts.HOST</code>.
     */
    public HostsRecord setHost(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.hosts.HOST</code>.
     */
    public String getHost() {
        return (String) get(0);
    }

    /**
     * Setter for <code>performance_schema.hosts.CURRENT_CONNECTIONS</code>.
     */
    public HostsRecord setCurrentConnections(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.hosts.CURRENT_CONNECTIONS</code>.
     */
    public Long getCurrentConnections() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>performance_schema.hosts.TOTAL_CONNECTIONS</code>.
     */
    public HostsRecord setTotalConnections(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>performance_schema.hosts.TOTAL_CONNECTIONS</code>.
     */
    public Long getTotalConnections() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>performance_schema.hosts.MAX_SESSION_CONTROLLED_MEMORY</code>.
     */
    public HostsRecord setMaxSessionControlledMemory(ULong value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.hosts.MAX_SESSION_CONTROLLED_MEMORY</code>.
     */
    public ULong getMaxSessionControlledMemory() {
        return (ULong) get(3);
    }

    /**
     * Setter for
     * <code>performance_schema.hosts.MAX_SESSION_TOTAL_MEMORY</code>.
     */
    public HostsRecord setMaxSessionTotalMemory(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>performance_schema.hosts.MAX_SESSION_TOTAL_MEMORY</code>.
     */
    public ULong getMaxSessionTotalMemory() {
        return (ULong) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Long, Long, ULong, ULong> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, Long, Long, ULong, ULong> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Hosts.HOSTS.HOST;
    }

    @Override
    public Field<Long> field2() {
        return Hosts.HOSTS.CURRENT_CONNECTIONS;
    }

    @Override
    public Field<Long> field3() {
        return Hosts.HOSTS.TOTAL_CONNECTIONS;
    }

    @Override
    public Field<ULong> field4() {
        return Hosts.HOSTS.MAX_SESSION_CONTROLLED_MEMORY;
    }

    @Override
    public Field<ULong> field5() {
        return Hosts.HOSTS.MAX_SESSION_TOTAL_MEMORY;
    }

    @Override
    public String component1() {
        return getHost();
    }

    @Override
    public Long component2() {
        return getCurrentConnections();
    }

    @Override
    public Long component3() {
        return getTotalConnections();
    }

    @Override
    public ULong component4() {
        return getMaxSessionControlledMemory();
    }

    @Override
    public ULong component5() {
        return getMaxSessionTotalMemory();
    }

    @Override
    public String value1() {
        return getHost();
    }

    @Override
    public Long value2() {
        return getCurrentConnections();
    }

    @Override
    public Long value3() {
        return getTotalConnections();
    }

    @Override
    public ULong value4() {
        return getMaxSessionControlledMemory();
    }

    @Override
    public ULong value5() {
        return getMaxSessionTotalMemory();
    }

    @Override
    public HostsRecord value1(String value) {
        setHost(value);
        return this;
    }

    @Override
    public HostsRecord value2(Long value) {
        setCurrentConnections(value);
        return this;
    }

    @Override
    public HostsRecord value3(Long value) {
        setTotalConnections(value);
        return this;
    }

    @Override
    public HostsRecord value4(ULong value) {
        setMaxSessionControlledMemory(value);
        return this;
    }

    @Override
    public HostsRecord value5(ULong value) {
        setMaxSessionTotalMemory(value);
        return this;
    }

    @Override
    public HostsRecord values(String value1, Long value2, Long value3, ULong value4, ULong value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HostsRecord
     */
    public HostsRecord() {
        super(Hosts.HOSTS);
    }

    /**
     * Create a detached, initialised HostsRecord
     */
    public HostsRecord(String host, Long currentConnections, Long totalConnections, ULong maxSessionControlledMemory, ULong maxSessionTotalMemory) {
        super(Hosts.HOSTS);

        setHost(host);
        setCurrentConnections(currentConnections);
        setTotalConnections(totalConnections);
        setMaxSessionControlledMemory(maxSessionControlledMemory);
        setMaxSessionTotalMemory(maxSessionTotalMemory);
    }

    /**
     * Create a detached, initialised HostsRecord
     */
    public HostsRecord(com.neurasim.jooq.performance_schema.tables.pojos.Hosts value) {
        super(Hosts.HOSTS);

        if (value != null) {
            setHost(value.getHost());
            setCurrentConnections(value.getCurrentConnections());
            setTotalConnections(value.getTotalConnections());
            setMaxSessionControlledMemory(value.getMaxSessionControlledMemory());
            setMaxSessionTotalMemory(value.getMaxSessionTotalMemory());
        }
    }
}
