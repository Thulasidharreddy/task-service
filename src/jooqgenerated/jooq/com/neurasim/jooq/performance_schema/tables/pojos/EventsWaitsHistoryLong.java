/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.performance_schema.tables.pojos;


import com.neurasim.jooq.performance_schema.enums.EventsWaitsHistoryLongNestingEventType;

import java.io.Serializable;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsWaitsHistoryLong implements Serializable {

    private static final long serialVersionUID = 1L;

    private final ULong threadId;
    private final ULong eventId;
    private final ULong endEventId;
    private final String eventName;
    private final String source;
    private final ULong timerStart;
    private final ULong timerEnd;
    private final ULong timerWait;
    private final UInteger spins;
    private final String objectSchema;
    private final String objectName;
    private final String indexName;
    private final String objectType;
    private final ULong objectInstanceBegin;
    private final ULong nestingEventId;
    private final EventsWaitsHistoryLongNestingEventType nestingEventType;
    private final String operation;
    private final Long numberOfBytes;
    private final UInteger flags;

    public EventsWaitsHistoryLong(EventsWaitsHistoryLong value) {
        this.threadId = value.threadId;
        this.eventId = value.eventId;
        this.endEventId = value.endEventId;
        this.eventName = value.eventName;
        this.source = value.source;
        this.timerStart = value.timerStart;
        this.timerEnd = value.timerEnd;
        this.timerWait = value.timerWait;
        this.spins = value.spins;
        this.objectSchema = value.objectSchema;
        this.objectName = value.objectName;
        this.indexName = value.indexName;
        this.objectType = value.objectType;
        this.objectInstanceBegin = value.objectInstanceBegin;
        this.nestingEventId = value.nestingEventId;
        this.nestingEventType = value.nestingEventType;
        this.operation = value.operation;
        this.numberOfBytes = value.numberOfBytes;
        this.flags = value.flags;
    }

    public EventsWaitsHistoryLong(
        ULong threadId,
        ULong eventId,
        ULong endEventId,
        String eventName,
        String source,
        ULong timerStart,
        ULong timerEnd,
        ULong timerWait,
        UInteger spins,
        String objectSchema,
        String objectName,
        String indexName,
        String objectType,
        ULong objectInstanceBegin,
        ULong nestingEventId,
        EventsWaitsHistoryLongNestingEventType nestingEventType,
        String operation,
        Long numberOfBytes,
        UInteger flags
    ) {
        this.threadId = threadId;
        this.eventId = eventId;
        this.endEventId = endEventId;
        this.eventName = eventName;
        this.source = source;
        this.timerStart = timerStart;
        this.timerEnd = timerEnd;
        this.timerWait = timerWait;
        this.spins = spins;
        this.objectSchema = objectSchema;
        this.objectName = objectName;
        this.indexName = indexName;
        this.objectType = objectType;
        this.objectInstanceBegin = objectInstanceBegin;
        this.nestingEventId = nestingEventId;
        this.nestingEventType = nestingEventType;
        this.operation = operation;
        this.numberOfBytes = numberOfBytes;
        this.flags = flags;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.THREAD_ID</code>.
     */
    public ULong getThreadId() {
        return this.threadId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.EVENT_ID</code>.
     */
    public ULong getEventId() {
        return this.eventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.END_EVENT_ID</code>.
     */
    public ULong getEndEventId() {
        return this.endEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.EVENT_NAME</code>.
     */
    public String getEventName() {
        return this.eventName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.SOURCE</code>.
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.TIMER_START</code>.
     */
    public ULong getTimerStart() {
        return this.timerStart;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.TIMER_END</code>.
     */
    public ULong getTimerEnd() {
        return this.timerEnd;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.TIMER_WAIT</code>.
     */
    public ULong getTimerWait() {
        return this.timerWait;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.SPINS</code>.
     */
    public UInteger getSpins() {
        return this.spins;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.OBJECT_SCHEMA</code>.
     */
    public String getObjectSchema() {
        return this.objectSchema;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.OBJECT_NAME</code>.
     */
    public String getObjectName() {
        return this.objectName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.INDEX_NAME</code>.
     */
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.OBJECT_TYPE</code>.
     */
    public String getObjectType() {
        return this.objectType;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.OBJECT_INSTANCE_BEGIN</code>.
     */
    public ULong getObjectInstanceBegin() {
        return this.objectInstanceBegin;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.NESTING_EVENT_ID</code>.
     */
    public ULong getNestingEventId() {
        return this.nestingEventId;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.NESTING_EVENT_TYPE</code>.
     */
    public EventsWaitsHistoryLongNestingEventType getNestingEventType() {
        return this.nestingEventType;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.OPERATION</code>.
     */
    public String getOperation() {
        return this.operation;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.NUMBER_OF_BYTES</code>.
     */
    public Long getNumberOfBytes() {
        return this.numberOfBytes;
    }

    /**
     * Getter for
     * <code>performance_schema.events_waits_history_long.FLAGS</code>.
     */
    public UInteger getFlags() {
        return this.flags;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final EventsWaitsHistoryLong other = (EventsWaitsHistoryLong) obj;
        if (this.threadId == null) {
            if (other.threadId != null)
                return false;
        }
        else if (!this.threadId.equals(other.threadId))
            return false;
        if (this.eventId == null) {
            if (other.eventId != null)
                return false;
        }
        else if (!this.eventId.equals(other.eventId))
            return false;
        if (this.endEventId == null) {
            if (other.endEventId != null)
                return false;
        }
        else if (!this.endEventId.equals(other.endEventId))
            return false;
        if (this.eventName == null) {
            if (other.eventName != null)
                return false;
        }
        else if (!this.eventName.equals(other.eventName))
            return false;
        if (this.source == null) {
            if (other.source != null)
                return false;
        }
        else if (!this.source.equals(other.source))
            return false;
        if (this.timerStart == null) {
            if (other.timerStart != null)
                return false;
        }
        else if (!this.timerStart.equals(other.timerStart))
            return false;
        if (this.timerEnd == null) {
            if (other.timerEnd != null)
                return false;
        }
        else if (!this.timerEnd.equals(other.timerEnd))
            return false;
        if (this.timerWait == null) {
            if (other.timerWait != null)
                return false;
        }
        else if (!this.timerWait.equals(other.timerWait))
            return false;
        if (this.spins == null) {
            if (other.spins != null)
                return false;
        }
        else if (!this.spins.equals(other.spins))
            return false;
        if (this.objectSchema == null) {
            if (other.objectSchema != null)
                return false;
        }
        else if (!this.objectSchema.equals(other.objectSchema))
            return false;
        if (this.objectName == null) {
            if (other.objectName != null)
                return false;
        }
        else if (!this.objectName.equals(other.objectName))
            return false;
        if (this.indexName == null) {
            if (other.indexName != null)
                return false;
        }
        else if (!this.indexName.equals(other.indexName))
            return false;
        if (this.objectType == null) {
            if (other.objectType != null)
                return false;
        }
        else if (!this.objectType.equals(other.objectType))
            return false;
        if (this.objectInstanceBegin == null) {
            if (other.objectInstanceBegin != null)
                return false;
        }
        else if (!this.objectInstanceBegin.equals(other.objectInstanceBegin))
            return false;
        if (this.nestingEventId == null) {
            if (other.nestingEventId != null)
                return false;
        }
        else if (!this.nestingEventId.equals(other.nestingEventId))
            return false;
        if (this.nestingEventType == null) {
            if (other.nestingEventType != null)
                return false;
        }
        else if (!this.nestingEventType.equals(other.nestingEventType))
            return false;
        if (this.operation == null) {
            if (other.operation != null)
                return false;
        }
        else if (!this.operation.equals(other.operation))
            return false;
        if (this.numberOfBytes == null) {
            if (other.numberOfBytes != null)
                return false;
        }
        else if (!this.numberOfBytes.equals(other.numberOfBytes))
            return false;
        if (this.flags == null) {
            if (other.flags != null)
                return false;
        }
        else if (!this.flags.equals(other.flags))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.threadId == null) ? 0 : this.threadId.hashCode());
        result = prime * result + ((this.eventId == null) ? 0 : this.eventId.hashCode());
        result = prime * result + ((this.endEventId == null) ? 0 : this.endEventId.hashCode());
        result = prime * result + ((this.eventName == null) ? 0 : this.eventName.hashCode());
        result = prime * result + ((this.source == null) ? 0 : this.source.hashCode());
        result = prime * result + ((this.timerStart == null) ? 0 : this.timerStart.hashCode());
        result = prime * result + ((this.timerEnd == null) ? 0 : this.timerEnd.hashCode());
        result = prime * result + ((this.timerWait == null) ? 0 : this.timerWait.hashCode());
        result = prime * result + ((this.spins == null) ? 0 : this.spins.hashCode());
        result = prime * result + ((this.objectSchema == null) ? 0 : this.objectSchema.hashCode());
        result = prime * result + ((this.objectName == null) ? 0 : this.objectName.hashCode());
        result = prime * result + ((this.indexName == null) ? 0 : this.indexName.hashCode());
        result = prime * result + ((this.objectType == null) ? 0 : this.objectType.hashCode());
        result = prime * result + ((this.objectInstanceBegin == null) ? 0 : this.objectInstanceBegin.hashCode());
        result = prime * result + ((this.nestingEventId == null) ? 0 : this.nestingEventId.hashCode());
        result = prime * result + ((this.nestingEventType == null) ? 0 : this.nestingEventType.hashCode());
        result = prime * result + ((this.operation == null) ? 0 : this.operation.hashCode());
        result = prime * result + ((this.numberOfBytes == null) ? 0 : this.numberOfBytes.hashCode());
        result = prime * result + ((this.flags == null) ? 0 : this.flags.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EventsWaitsHistoryLong (");

        sb.append(threadId);
        sb.append(", ").append(eventId);
        sb.append(", ").append(endEventId);
        sb.append(", ").append(eventName);
        sb.append(", ").append(source);
        sb.append(", ").append(timerStart);
        sb.append(", ").append(timerEnd);
        sb.append(", ").append(timerWait);
        sb.append(", ").append(spins);
        sb.append(", ").append(objectSchema);
        sb.append(", ").append(objectName);
        sb.append(", ").append(indexName);
        sb.append(", ").append(objectType);
        sb.append(", ").append(objectInstanceBegin);
        sb.append(", ").append(nestingEventId);
        sb.append(", ").append(nestingEventType);
        sb.append(", ").append(operation);
        sb.append(", ").append(numberOfBytes);
        sb.append(", ").append(flags);

        sb.append(")");
        return sb.toString();
    }
}
