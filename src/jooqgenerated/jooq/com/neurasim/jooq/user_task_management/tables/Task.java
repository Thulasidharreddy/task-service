/*
 * This file is generated by jOOQ.
 */
package com.neurasim.jooq.user_task_management.tables;


import com.neurasim.jooq.user_task_management.Indexes;
import com.neurasim.jooq.user_task_management.Keys;
import com.neurasim.jooq.user_task_management.UserTaskManagement;
import com.neurasim.jooq.user_task_management.enums.TaskStatus;
import com.neurasim.jooq.user_task_management.tables.records.TaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_task_management.Task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>user_task_management.Task.id</code>.
     */
    public final TableField<TaskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>user_task_management.Task.title</code>.
     */
    public final TableField<TaskRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_task_management.Task.description</code>.
     */
    public final TableField<TaskRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_task_management.Task.status</code>.
     */
    public final TableField<TaskRecord, TaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(com.neurasim.jooq.user_task_management.enums.TaskStatus.class), this, "");

    /**
     * The column <code>user_task_management.Task.user_id</code>.
     */
    public final TableField<TaskRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>user_task_management.Task.created_at</code>.
     */
    public final TableField<TaskRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_task_management.Task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>user_task_management.Task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>user_task_management.Task</code> table reference
     */
    public Task() {
        this(DSL.name("Task"), null);
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : UserTaskManagement.USER_TASK_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TASK_USER_ID);
    }

    @Override
    public Identity<TaskRecord, Long> getIdentity() {
        return (Identity<TaskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.KEY_TASK_PRIMARY;
    }

    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_IBFK_1);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>user_task_management.User</code>
     * table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.TASK_IBFK_1);

        return _user;
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    @Override
    public Task as(Table<?> alias) {
        return new Task(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Table<?> name) {
        return new Task(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, TaskStatus, Long, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super TaskStatus, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super TaskStatus, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
